/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/appValidation.ts":
/*!******************************!*\
  !*** ./src/appValidation.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.verifyLicenseKey = exports.isAppActivated = void 0;\r\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\r\nconst logger_1 = __webpack_require__(/*! ./app/config/logger */ \"./src/app/config/logger.ts\");\r\nconst electronConstants_1 = __webpack_require__(/*! ./electronConstants */ \"./src/electronConstants.ts\");\r\nconst network_1 = __webpack_require__(/*! ./utils/network */ \"./src/utils/network.ts\");\r\n//check if the database file exists. if it does, then the app has been validated.\r\nconst isAppActivated = () => {\r\n    return fs.existsSync(electronConstants_1.constants.db_path);\r\n};\r\nexports.isAppActivated = isAppActivated;\r\nfunction verifyLicenseKey(key) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            console.log(\"calling verify license\");\r\n            return (0, network_1.getData)({ url: `${electronConstants_1.constants.server_url}/api_admin/findBranchByKey?k=${key}`, token: \"\" });\r\n        }\r\n        catch (error) {\r\n            console.log(\"verify key\", error);\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n} //3Wordsnocaps!\r\nexports.verifyLicenseKey = verifyLicenseKey;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/appValidation.ts?");

/***/ }),

/***/ "./src/app/config/logger.ts":
/*!**********************************!*\
  !*** ./src/app/config/logger.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.logger = void 0;\r\nconst electronConstants_1 = __webpack_require__(/*! @/electronConstants */ \"./src/electronConstants.ts\");\r\nconst dateHelper_1 = __webpack_require__(/*! @/utils/dateHelper */ \"./src/utils/dateHelper.ts\");\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst winston = __importStar(__webpack_require__(/*! winston */ \"winston\"));\r\nconst defaultFormat = winston.format.combine(winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), winston.format.align(), winston.format.printf(info => `${info.level}: ${[info.timestamp]}: ${info.message}`));\r\nconst logger = winston.createLogger({\r\n    transports: [\r\n        //\r\n        // - Write all logs with importance level of `error` or less to `error.log`\r\n        // - Write all logs with importance level of `info` or less to `combined.log`\r\n        //\r\n        new winston.transports.File({\r\n            filename: path_1.default.resolve(electronConstants_1.constants.settings_location, 'logs', 'ui', `${(0, dateHelper_1.getToday)()} debug.log`),\r\n            level: 'debug',\r\n            format: defaultFormat,\r\n        }),\r\n        new winston.transports.File({\r\n            filename: path_1.default.resolve(electronConstants_1.constants.settings_location, 'logs', 'ui', `${(0, dateHelper_1.getToday)()} info.log`),\r\n            level: 'info',\r\n            format: defaultFormat,\r\n        }),\r\n        new winston.transports.File({\r\n            filename: path_1.default.resolve(electronConstants_1.constants.settings_location, 'logs', 'ui', `${(0, dateHelper_1.getToday)()} error.log`),\r\n            level: 'error',\r\n            format: defaultFormat,\r\n        }),\r\n    ],\r\n});\r\nexports.logger = logger;\r\n//\r\n// If we're not in production then log to the `console` with the format:\r\n// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\r\n//\r\nif (true) {\r\n    logger.add(new winston.transports.Console({\r\n        format: defaultFormat,\r\n    }));\r\n}\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/app/config/logger.ts?");

/***/ }),

/***/ "./src/electronConstants.ts":
/*!**********************************!*\
  !*** ./src/electronConstants.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.constants = exports.defaultOptions = void 0;\r\nconst PORT = process.env.PORT || 5100;\r\n// const appName = \"Shoplane\";\r\n// const appLongName = \"Shoplane POS & Inventory Management System\";\r\n// const databaseName = \"shoplane.db\";\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\r\nconst appName = \"Druglane\";\r\nconst appLongName = \"Druglane Pharmacy Management System\";\r\nconst databaseName = \"druglanev1.db\";\r\nconst appDirectory = \"druglaneServerV1\";\r\nconst settings_location = path_1.default.join(process.env.APPDATA, appDirectory);\r\nexports.defaultOptions = {\r\n    \"port\": 5000,\r\n    \"backup_time\": 19\r\n};\r\nexports.constants = {\r\n    appLongName: appLongName,\r\n    appname: appName,\r\n    server_url: \"https://druglanepms.calgadsoftwares.com\",\r\n    // process.env.NODE_ENV == \"development\" ? \r\n    //      \"http://localhost/druglanebackend\" : \"https://druglanepms.calgadsoftwares.com\",\r\n    settings_location,\r\n    customer_image_url: \"assets/customer_images/\",\r\n    customer_image_thumbnail_url: \"assets/customer_images/thumbnails/\",\r\n    product_image_url: \"assets/product_images/\",\r\n    product_image_thumbnail_url: \"assets/product_images/thumbnails/\",\r\n    port: PORT,\r\n    firebase_user_collection: \"users\",\r\n    firebase_requests_collection: \"requests\",\r\n    firebase_responses_collection: \"responses\",\r\n    db_path: path_1.default.join(settings_location, databaseName),\r\n    backup_folder: path_1.default.join(os_1.default.homedir(), `${appName}Backups`),\r\n    settings_filename: 'system-settings.json',\r\n    db_filename: databaseName,\r\n    internal_backups_path: path_1.default.join(settings_location, 'backups'),\r\n    logs_path: path_1.default.join(settings_location, 'logs'),\r\n    company_id: '',\r\n    STRING_DB_VERSION: \"dbversion\",\r\n};\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/electronConstants.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.loadActivationPage = exports.spawnServer = void 0;\r\nconst electron_1 = __importStar(__webpack_require__(/*! electron */ \"electron\"));\r\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\r\nconst appValidation_1 = __webpack_require__(/*! ./appValidation */ \"./src/appValidation.ts\");\r\nconst logger_1 = __webpack_require__(/*! ./app/config/logger */ \"./src/app/config/logger.ts\");\r\n// import isDev from 'electron-is-dev';\r\nconst electronConstants_1 = __webpack_require__(/*! ./electronConstants */ \"./src/electronConstants.ts\");\r\nconst ServerEvents_1 = __importDefault(__webpack_require__(/*! ./utils/ServerEvents */ \"./src/utils/ServerEvents.ts\"));\r\nconst stringKeys_1 = __webpack_require__(/*! ./utils/stringKeys */ \"./src/utils/stringKeys.ts\");\r\nconst directorySetup_1 = __webpack_require__(/*! ./utils/directorySetup */ \"./src/utils/directorySetup.ts\");\r\nconst electron_store_1 = __importDefault(__webpack_require__(/*! electron-store */ \"electron-store\"));\r\nconst electron_context_menu_1 = __importDefault(__webpack_require__(/*! electron-context-menu */ \"electron-context-menu\"));\r\nconst url = __importStar(__webpack_require__(/*! url */ \"url\"));\r\nconst server_1 = __webpack_require__(/*! ./server/server */ \"./src/server/server.ts\");\r\n//A78D5-B93FB-CD281-3500A\r\n// import { startServer } from \"./server/server\";\r\nconst gotTheLock = electron_1.app.requestSingleInstanceLock();\r\n/**keep track of the server url and make sure it only updates the ui if there's an actual change */\r\nlet lastServerUrl = \"\";\r\nlet mainWindow;\r\nlet databaseUpdateWindow;\r\nlet mainWindowUrl = \"\";\r\n// let serverProcess: ChildProcess;\r\nlet serverState = \"Checking Activation\";\r\nconst isDev = \"development\" == \"development\";\r\n//the first instance of the app will have gotTheLock = true. else it will be fls\r\nif (!gotTheLock) {\r\n    electron_1.app.quit();\r\n}\r\nelse {\r\n    electron_1.app.on('second-instance', (event, commandLine, workingDirectory) => {\r\n        // Someone tried to run a second instance, we should focus our window.\r\n        if (mainWindow != null && mainWindow != undefined) {\r\n            if (mainWindow.isMinimized()) {\r\n                mainWindow.restore();\r\n            }\r\n            mainWindow.focus();\r\n        }\r\n    });\r\n}\r\nlet serverUrl = \"\";\r\nconst store = new electron_store_1.default();\r\n//save all \r\n(0, electron_context_menu_1.default)({\r\n    showSaveImageAs: true\r\n});\r\nconst appmenu = [\r\n    {\r\n        label: 'System',\r\n        submenu: [\r\n            {\r\n                label: 'Quit',\r\n                click: () => electron_1.app.quit(),\r\n                accelerator: 'CmdOrCtrl+w'\r\n            },\r\n            {\r\n                label: 'Restart Sever',\r\n                click: () => {\r\n                    electron_1.app.relaunch();\r\n                    electron_1.app.exit();\r\n                },\r\n                accelerator: 'CmdOrCtrl+r'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        label: 'Goto Locations',\r\n        submenu: [\r\n            {\r\n                label: 'Logs',\r\n                click: () => openFolder(electronConstants_1.constants.logs_path),\r\n                accelerator: 'CmdOrCtrl+w'\r\n            },\r\n            {\r\n                label: 'Backups',\r\n                click: () => openFolder(electronConstants_1.constants.internal_backups_path),\r\n                accelerator: 'CmdOrCtrl+r'\r\n            }\r\n        ]\r\n    }\r\n];\r\n//create backup folders\r\n(0, directorySetup_1.runFolderCreation)();\r\nelectron_1.ipcMain.on(stringKeys_1.CALL_ACTIVATION, (event, key) => __awaiter(void 0, void 0, void 0, function* () {\r\n    var _a, _b;\r\n    try {\r\n        let data = yield (0, appValidation_1.verifyLicenseKey)(key);\r\n        if (data.data.status === \"1\") {\r\n            console.log('activation successful');\r\n            yield (0, server_1.startServer)();\r\n        }\r\n        (_a = mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents) === null || _a === void 0 ? void 0 : _a.send(stringKeys_1.ACTIVATION_RESULT, { data: data.data, error: false, message: \"\" });\r\n    }\r\n    catch (error) {\r\n        (_b = mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents) === null || _b === void 0 ? void 0 : _b.send(stringKeys_1.ACTIVATION_RESULT, { data: null, error: true, message: error });\r\n    }\r\n}));\r\nelectron_1.ipcMain.on(stringKeys_1.GET_APP_DETAILS, getAppDetails);\r\nelectron_1.ipcMain.on(stringKeys_1.GET_SERVER_STATE, () => {\r\n    sendServerState(serverState);\r\n});\r\nelectron_1.ipcMain.on(stringKeys_1.RESTART_SERVER, (event, data) => __awaiter(void 0, void 0, void 0, function* () {\r\n    yield spawnServer();\r\n}));\r\nelectron_1.ipcMain.on(stringKeys_1.RESTART_APPLICATION, (event, data) => __awaiter(void 0, void 0, void 0, function* () {\r\n    restartApp();\r\n}));\r\nelectron_1.ipcMain.on(stringKeys_1.GET_SERVER_URL, sendServerUrl);\r\nelectron_1.ipcMain.on(stringKeys_1.GET_PREFERENCE, (event, data) => {\r\n    let value = store.get(data.key, electronConstants_1.defaultOptions[data.key]);\r\n    event.reply(stringKeys_1.PREFERENCE_RECEIVED, { name: data.key, value: value });\r\n});\r\nelectron_1.ipcMain.on(stringKeys_1.GET_PREFERENCES, (event) => {\r\n    store.openInEditor();\r\n});\r\nelectron_1.ipcMain.on(stringKeys_1.SET_PREFERENCE, (event, data) => {\r\n    try {\r\n        savePreference(data.key, data.value);\r\n        event.reply(stringKeys_1.PREFERENCE_SET, { success: true, message: \"Setting saved successfully\" });\r\n    }\r\n    catch (error) {\r\n        event.reply(stringKeys_1.PREFERENCE_SET, { success: false, message: error });\r\n    }\r\n});\r\nelectron_1.ipcMain.on(stringKeys_1.SET_ADMIN_PASSWORD, (event, data) => {\r\n});\r\nelectron_1.ipcMain.on(stringKeys_1.CREATE_BACKUP, (event) => {\r\n    //do a mysql dump\r\n    console.log('create backup');\r\n});\r\nelectron_1.ipcMain.on(stringKeys_1.SERVER_DATABASE_UPDATE, (event, data) => {\r\n    console.log('server database update', data);\r\n    sendServerDatabaseUpdate(data);\r\n});\r\nfunction savePreference(key, value) {\r\n    try {\r\n        console.log(key, value);\r\n        store.set(key, value);\r\n    }\r\n    catch (error) {\r\n        throw new Error(error);\r\n    }\r\n}\r\nfunction getAppDetails() {\r\n    var _a;\r\n    const title = `${electronConstants_1.constants.appname} v${electron_1.app.getVersion()}`;\r\n    (_a = mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents) === null || _a === void 0 ? void 0 : _a.send(\"appDetailsSent\", { title });\r\n}\r\nfunction restartApp() {\r\n    electron_1.app.relaunch();\r\n    electron_1.app.exit();\r\n}\r\nfunction sendServerState(state) {\r\n    var _a;\r\n    try {\r\n        (_a = mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents) === null || _a === void 0 ? void 0 : _a.send(stringKeys_1.SERVER_STATE_CHANGED, { data: state, time: new Date().toLocaleString() });\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        electron_1.dialog.showErrorBox(\"Internal error\", \"Failed to send server state\");\r\n    }\r\n}\r\nfunction sendServerDatabaseUpdate(state) {\r\n    var _a;\r\n    try {\r\n        console.log(state, 'server database update');\r\n        (_a = mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents) === null || _a === void 0 ? void 0 : _a.send(stringKeys_1.DATABASE_SETUP_EVENT, { data: state, time: new Date().toLocaleString() });\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        electron_1.dialog.showErrorBox(\"Internal error\", \"Failed to send server state\");\r\n    }\r\n}\r\nServerEvents_1.default.on(stringKeys_1.SERVER_STATE_CHANGED, (data) => {\r\n    serverState = data;\r\n    sendServerState(data);\r\n});\r\nServerEvents_1.default.on(stringKeys_1.SERVER_MESSAGE_RECEIVED, (data) => {\r\n    var _a;\r\n    // logs.unshift(data);\r\n    (_a = mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents) === null || _a === void 0 ? void 0 : _a.send(stringKeys_1.SERVER_MESSAGE_RECEIVED, { data, time: new Date().toLocaleString() });\r\n});\r\nServerEvents_1.default.on(stringKeys_1.SERVER_URL_UPDATED, (data) => {\r\n    serverUrl = data;\r\n    // logs.unshift(data);\r\n    if (lastServerUrl !== serverUrl) {\r\n        sendServerUrl();\r\n        lastServerUrl = serverUrl;\r\n    }\r\n});\r\nServerEvents_1.default.on(stringKeys_1.SERVER_DATABASE_UPDATE, (data) => {\r\n    sendServerDatabaseUpdate(data);\r\n    switch (data) {\r\n        case stringKeys_1.UPDATING_DATABASE:\r\n            //create the window if it doesn't exist\r\n            if (!databaseUpdateWindow) {\r\n                databaseUpdateWindow = createChildWindow(\"electronPages/runningMigrations.html\", { title: \"Running Migrations\", parent: mainWindow });\r\n            }\r\n            break;\r\n        case stringKeys_1.COMPLTED_DATABASE_UPDATE:\r\n            //create the window if it doesn't exist\r\n            if (databaseUpdateWindow) {\r\n                databaseUpdateWindow.close();\r\n            }\r\n            electron_1.dialog.showMessageBox(mainWindow, {\r\n                type: \"info\",\r\n                message: \"Database updated successfully\",\r\n            });\r\n            break;\r\n        case stringKeys_1.ERROR_UPDATING_DATABASE:\r\n            //create the window if it doesn't exist\r\n            if (databaseUpdateWindow) {\r\n                databaseUpdateWindow.close();\r\n            }\r\n            electron_1.dialog.showMessageBox(mainWindow, {\r\n                type: \"error\",\r\n                message: \"There was a problem updating the database. Please restart the application to try again, or contact us for help\",\r\n            });\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\nfunction sendServerUrl() {\r\n    var _a;\r\n    (_a = mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents) === null || _a === void 0 ? void 0 : _a.send(stringKeys_1.SERVER_URL_RECEIVED, { data: serverUrl, time: new Date().toLocaleString() }, serverUrl);\r\n}\r\nfunction createMainWindow() {\r\n    var _a;\r\n    // Create the browser window.\r\n    //TODO: Check if null.\r\n    mainWindow = new electron_1.BrowserWindow({\r\n        height: 600,\r\n        webPreferences: {\r\n            nodeIntegration: true,\r\n            contextIsolation: false,\r\n            spellcheck: true\r\n            //  preload: path.join(__dirname, \"preload.js\"),\r\n        },\r\n        width: 800,\r\n    });\r\n    // and load the index.html of the app.\r\n    // mainWindow.loadFile(path.join(__dirname, htmlLocation));\r\n    const startUrl = process.env.ELECTRON_START_URL || url.format({\r\n        pathname: path.join(__dirname, '../index.html'),\r\n        protocol: 'file:',\r\n        slashes: true\r\n    });\r\n    mainWindowUrl = isDev ? 'http://localhost:9000' : startUrl;\r\n    mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.loadURL(mainWindowUrl);\r\n    // Open the DevTools.\r\n    (_a = mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents) === null || _a === void 0 ? void 0 : _a.openDevTools();\r\n    const mainMenu = electron_1.Menu.buildFromTemplate(appmenu);\r\n    electron_1.Menu.setApplicationMenu(mainMenu);\r\n    mainWindow.webContents.setWindowOpenHandler((details) => {\r\n        electron_1.default.shell.openExternal(details.url);\r\n        return { action: 'deny' };\r\n    });\r\n}\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\nelectron_1.app.whenReady().then(() => {\r\n    createMainWindow();\r\n    spawnServer();\r\n    electron_1.app.on(\"activate\", function () {\r\n        // On macOS it's common to re-create a window in the app when the\r\n        // dock icon is clicked and there are no other windows open.\r\n        if (electron_1.BrowserWindow.getAllWindows().length === 0)\r\n            createMainWindow();\r\n        spawnServer();\r\n    });\r\n    //\r\n});\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\nelectron_1.app.on(\"window-all-closed\", () => {\r\n    if (process.platform !== \"darwin\") {\r\n        logger_1.logger.info({ message: \"app terminated\" });\r\n        electron_1.app.quit();\r\n        //kill the server process\r\n        // if (serverProcess) {\r\n        //     try {\r\n        //         serverProcess.kill();\r\n        //         logger.info({ message: \"app terminated\" });\r\n        //         app.quit();\r\n        //     } catch (error) {\r\n        //         logger.error({ message: error });\r\n        //     }\r\n        // }\r\n        // else {\r\n        //     logger.info({ message: \"no server was running. app terminated\" });\r\n        //     app.quit();\r\n        // }\r\n    }\r\n});\r\n// In this file you can include the rest of your app\"s specific main process\r\n// code. You can also put them in separate files and require them here.\r\n// startServer();\r\nfunction spawnServer() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            ServerEvents_1.default.emit(stringKeys_1.SERVER_STATE_CHANGED, \"Checking Activation\");\r\n            //check if the app is activated. if it is, start the server. else go the activation page\r\n            const appActivated = yield (0, appValidation_1.isAppActivated)();\r\n            if (appActivated) {\r\n                ServerEvents_1.default.emit(stringKeys_1.SERVER_STATE_CHANGED, \"Server Starting\");\r\n                //spawn server->runmigrations\r\n                // const serverPath = path.join(__dirname, 'server/server')\r\n                // serverProcess = fork(serverPath);\r\n                yield (0, server_1.startServer)();\r\n                // serverProcess.on('exit', (code: number, signal) => {\r\n                //     logger.error({\r\n                //         message: 'serverProcess process exited with ' +\r\n                //             `code ${code} and signal ${signal}`\r\n                //     });\r\n                //     serverEventEmitter.emit(SERVER_STATE_CHANGED, \"Server Stopped\")\r\n                // });\r\n                // serverProcess.on('error', (error) => {\r\n                //     serverEventEmitter.emit(SERVER_STATE_CHANGED, \"Server Error\")\r\n                //     console.log('serverProcess process error ', error)\r\n                // });\r\n                // serverProcess.on('spawn', () => {\r\n                //     serverEventEmitter.emit(SERVER_STATE_CHANGED, \"Server Running\")\r\n                //     console.log('serverProcess spawned')\r\n                //     //TODO: check if the company details has been set. then check if the admin password has been set\r\n                // });\r\n                // serverProcess.on('disconnect', () => {\r\n                //     serverEventEmitter.emit(SERVER_STATE_CHANGED, \"Server Disconnected\")\r\n                //     console.log('serverProcess disconnected')\r\n                //     spawnServer()\r\n                // });\r\n                // serverProcess.on('message', (message: any, handle: SendHandle) => {\r\n                //     console.log(\"serverProcess sent a message\", message)\r\n                //     serverEventEmitter.emit(message.event, message.message)\r\n                // });\r\n            }\r\n            else {\r\n                ServerEvents_1.default.emit(stringKeys_1.SERVER_STATE_CHANGED, stringKeys_1.APP_NOT_ACTIVATED);\r\n                console.log(\"app not activated\");\r\n                loadActivationPage();\r\n            }\r\n        }\r\n        catch (error) {\r\n            //start the server the old fashioned way\r\n            ServerEvents_1.default.emit(stringKeys_1.SERVER_STATE_CHANGED, \"Server Error \" + error);\r\n            console.log(error);\r\n        }\r\n    });\r\n}\r\nexports.spawnServer = spawnServer;\r\nfunction loadActivationPage() {\r\n    // mainWindow?.loadURL(mainWindowUrl + \"/activate\")\r\n    openReactUrl(\"activate\");\r\n}\r\nexports.loadActivationPage = loadActivationPage;\r\nfunction openFolder(location) {\r\n    electron_1.shell.showItemInFolder(location);\r\n}\r\nfunction openReactUrl(url) {\r\n    mainWindow === null || mainWindow === void 0 ? void 0 : mainWindow.webContents.executeJavaScript(`window.history.pushState({}, '', '${url}');`);\r\n}\r\nfunction createChildWindow(path, options) {\r\n    const window = new electron_1.BrowserWindow(Object.assign(Object.assign({ width: (options === null || options === void 0 ? void 0 : options.width) || 300, height: (options === null || options === void 0 ? void 0 : options.height) || 200, frame: false, transparent: true, alwaysOnTop: true, webPreferences: {\r\n            nodeIntegration: true,\r\n            contextIsolation: false,\r\n        } }, ((options === null || options === void 0 ? void 0 : options.parent) && { modal: true })), ((options === null || options === void 0 ? void 0 : options.parent) && { parent: mainWindow })));\r\n    // Load the HTML file that contains your loading message\r\n    window.loadFile(path);\r\n    return window;\r\n}\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/main.ts?");

/***/ }),

/***/ "./src/server/config/config.ts":
/*!*************************************!*\
  !*** ./src/server/config/config.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.config = exports.sqliteConfig = void 0;\r\nconst logger_1 = __webpack_require__(/*! ./logger */ \"./src/server/config/logger.ts\");\r\nconst constants_1 = __webpack_require__(/*! ../../utils/constants */ \"./src/utils/constants.ts\");\r\nconst dayjs_1 = __importDefault(__webpack_require__(/*! dayjs */ \"dayjs\"));\r\nconst timeZoneOffset = (0, dayjs_1.default)().utcOffset();\r\n// console.log(timeZoneOffset)\r\nconst timeZoneOffsetMinutes = new Date().getTimezoneOffset();\r\nconst timeZoneOffsetHours = -timeZoneOffsetMinutes / 60;\r\nexports.sqliteConfig = {\r\n    \"development\": {\r\n        \"dialect\": \"sqlite\",\r\n        \"storage\": constants_1.constants.db_path,\r\n        logging: (msg) => logger_1.logger.debug(msg),\r\n    },\r\n    \"test\": {\r\n        \"dialect\": \"sqlite\",\r\n        \"storage\": \"test_db.db\",\r\n        \"logging\": false\r\n    },\r\n    \"production\": {\r\n        \"dialect\": \"sqlite\",\r\n        \"storage\": constants_1.constants.db_path,\r\n        logging: (msg) => logger_1.logger.debug(msg),\r\n    }\r\n};\r\nexports.config = {\r\n    \"development\": {\r\n        host: \"127.0.0.1\",\r\n        dialect: \"mariadb\",\r\n        username: \"root\",\r\n        password: \"r00t\",\r\n        database: \"dev\",\r\n        logging: (msg) => logger_1.logger.debug(msg),\r\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n    },\r\n    \"test\": {\r\n        host: \"127.0.0.1\",\r\n        dialect: \"mariadb\",\r\n        username: \"root\",\r\n        password: \"r00t\",\r\n        database: \"test\",\r\n        \"logging\": false,\r\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n        dialectOptions: {\r\n            useUTC: false,\r\n            timezone: \"Etc/GMT+1\",\r\n        },\r\n        // logging: (msg: any) => logger.debug(msg),\r\n    },\r\n    \"production\": {\r\n        host: \"127.0.0.1\",\r\n        dialect: \"mariadb\",\r\n        username: \"root\",\r\n        password: \"r00t\",\r\n        database: \"druglane\",\r\n        logging: (msg) => logger_1.logger.debug(msg),\r\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/config/config.ts?");

/***/ }),

/***/ "./src/server/config/logger.ts":
/*!*************************************!*\
  !*** ./src/server/config/logger.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.logger = void 0;\r\nconst constants_1 = __webpack_require__(/*! ../../utils/constants */ \"./src/utils/constants.ts\");\r\nconst winston = __importStar(__webpack_require__(/*! winston */ \"winston\"));\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst dateHelper_1 = __webpack_require__(/*! ../helpers/dateHelper */ \"./src/server/helpers/dateHelper.ts\");\r\nconst defaultFormat = winston.format.combine(winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), winston.format.align(), winston.format.printf(info => `${info.level}: ${[info.timestamp]}: ${info.message}`));\r\nconst logger = winston.createLogger({\r\n    transports: [\r\n        //\r\n        // - Write all logs with importance level of `error` or less to `error.log`\r\n        // - Write all logs with importance level of `info` or less to `combined.log`\r\n        //\r\n        new winston.transports.File({\r\n            filename: path_1.default.resolve(constants_1.constants.settings_location, 'logs', `${(0, dateHelper_1.getToday)()} debug.log`),\r\n            level: 'debug',\r\n            format: defaultFormat,\r\n        }),\r\n        new winston.transports.File({\r\n            filename: path_1.default.resolve(constants_1.constants.settings_location, 'logs', `${(0, dateHelper_1.getToday)()} info.log`),\r\n            level: 'info',\r\n            format: defaultFormat,\r\n        }),\r\n        new winston.transports.File({\r\n            filename: path_1.default.resolve(constants_1.constants.settings_location, 'logs', `${(0, dateHelper_1.getToday)()} error.log`),\r\n            level: 'error',\r\n            format: defaultFormat,\r\n        }),\r\n    ],\r\n});\r\nexports.logger = logger;\r\n//\r\n// If we're not in production then log to the `console` with the format:\r\n// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\r\n//\r\nif (true) {\r\n    logger.add(new winston.transports.Console({\r\n        format: defaultFormat,\r\n    }));\r\n}\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/config/logger.ts?");

/***/ }),

/***/ "./src/server/config/migrations/migrations.ts":
/*!****************************************************!*\
  !*** ./src/server/config/migrations/migrations.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.runMigrations = void 0;\r\n__webpack_require__(/*! ts-node/register */ \"ts-node/register\");\r\nconst umzug_1 = __webpack_require__(/*! umzug */ \"umzug\");\r\nconst migrationsList_1 = __webpack_require__(/*! ./migrationsList */ \"./src/server/config/migrations/migrationsList.ts\");\r\nconst sequelize_config_1 = __webpack_require__(/*! ../sequelize-config */ \"./src/server/config/sequelize-config.ts\");\r\nconst logger_1 = __webpack_require__(/*! ../logger */ \"./src/server/config/logger.ts\");\r\nconst ServerEvents_1 = __importDefault(__webpack_require__(/*! ../../../utils/ServerEvents */ \"./src/utils/ServerEvents.ts\"));\r\nconst stringKeys_1 = __webpack_require__(/*! ../../../utils/stringKeys */ \"./src/utils/stringKeys.ts\");\r\nconst umzug = new umzug_1.Umzug({\r\n    migrations: migrationsList_1.migrationsList,\r\n    context: sequelize_config_1.sequelize.getQueryInterface(),\r\n    storage: new umzug_1.SequelizeStorage({ sequelize: sequelize_config_1.sequelize }),\r\n    logger: console,\r\n});\r\nexports.runMigrations = (() => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        ServerEvents_1.default.emit(stringKeys_1.SERVER_DATABASE_UPDATE, stringKeys_1.UPDATING_DATABASE);\r\n        yield umzug.up();\r\n        ServerEvents_1.default.emit(stringKeys_1.SERVER_DATABASE_UPDATE, stringKeys_1.COMPLTED_DATABASE_UPDATE);\r\n    }\r\n    catch (error) {\r\n        ServerEvents_1.default.emit(stringKeys_1.SERVER_DATABASE_UPDATE, stringKeys_1.ERROR_UPDATING_DATABASE);\r\n        logger_1.logger.error({ message: error });\r\n        throw new Error(\"Migration error:\" + error);\r\n    }\r\n}));\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/config/migrations/migrations.ts?");

/***/ }),

/***/ "./src/server/config/migrations/migrationsList.ts":
/*!********************************************************!*\
  !*** ./src/server/config/migrations/migrationsList.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.migrationsList = void 0;\r\nconst sequelize_1 = __webpack_require__(/*! sequelize */ \"sequelize\");\r\nconst Products_1 = __webpack_require__(/*! ../../models/Products */ \"./src/server/models/Products.ts\");\r\nconst index_1 = __importDefault(__webpack_require__(/*! ../../models/index */ \"./src/server/models/index.ts\"));\r\nconst sequelize_config_1 = __webpack_require__(/*! ../sequelize-config */ \"./src/server/config/sequelize-config.ts\");\r\nconst Customers_1 = __webpack_require__(/*! ../../models/Customers */ \"./src/server/models/Customers.ts\");\r\nconst Activities_1 = __webpack_require__(/*! ../../models/Activities */ \"./src/server/models/Activities.ts\");\r\nconst Permissions_1 = __webpack_require__(/*! ../../models/Permissions */ \"./src/server/models/Permissions.ts\");\r\nconst permissions_1 = __webpack_require__(/*! ../../config/permissions */ \"./src/server/config/permissions.ts\");\r\nconst Roles_1 = __webpack_require__(/*! ../../models/Roles */ \"./src/server/models/Roles.ts\");\r\nconst RolePermissions_1 = __webpack_require__(/*! ../../models/RolePermissions */ \"./src/server/models/RolePermissions.ts\");\r\nconst Users_1 = __webpack_require__(/*! ../../models/Users */ \"./src/server/models/Users.ts\");\r\nconst UserSessions_1 = __webpack_require__(/*! ../../models/UserSessions */ \"./src/server/models/UserSessions.ts\");\r\nconst Sales_1 = __webpack_require__(/*! ../../models/Sales */ \"./src/server/models/Sales.ts\");\r\nconst InsuranceProviders_1 = __webpack_require__(/*! ../../models/InsuranceProviders */ \"./src/server/models/InsuranceProviders.ts\");\r\nconst SalesDetails_1 = __webpack_require__(/*! ../../models/SalesDetails */ \"./src/server/models/SalesDetails.ts\");\r\nconst Purchases_1 = __webpack_require__(/*! ../../models/Purchases */ \"./src/server/models/Purchases.ts\");\r\nconst PurchaseDetails_1 = __webpack_require__(/*! ../../models/PurchaseDetails */ \"./src/server/models/PurchaseDetails.ts\");\r\nconst Vendors_1 = __webpack_require__(/*! ../../models/Vendors */ \"./src/server/models/Vendors.ts\");\r\nconst ReceivedTransfers_1 = __webpack_require__(/*! ../../models/ReceivedTransfers */ \"./src/server/models/ReceivedTransfers.ts\");\r\nconst ReceivedTransferDetails_1 = __webpack_require__(/*! ../../models/ReceivedTransferDetails */ \"./src/server/models/ReceivedTransferDetails.ts\");\r\nconst Branches_1 = __webpack_require__(/*! ../../models/Branches */ \"./src/server/models/Branches.ts\");\r\nconst Transfers_1 = __webpack_require__(/*! ../../models/Transfers */ \"./src/server/models/Transfers.ts\");\r\nconst TransferDetails_1 = __webpack_require__(/*! ../../models/TransferDetails */ \"./src/server/models/TransferDetails.ts\");\r\nconst Settings_1 = __webpack_require__(/*! ../../models/Settings */ \"./src/server/models/Settings.ts\");\r\nconst StockAdjustment_1 = __webpack_require__(/*! ../../models/StockAdjustment */ \"./src/server/models/StockAdjustment.ts\");\r\nconst StockAdjustmentSessions_1 = __webpack_require__(/*! ../../models/StockAdjustmentSessions */ \"./src/server/models/StockAdjustmentSessions.ts\");\r\nconst CustomerDiagnostics_1 = __webpack_require__(/*! ../../models/CustomerDiagnostics */ \"./src/server/models/CustomerDiagnostics.ts\");\r\nconst DiagnosticTests_1 = __webpack_require__(/*! ../../models/DiagnosticTests */ \"./src/server/models/DiagnosticTests.ts\");\r\nconst StockAdjustmentPending_1 = __webpack_require__(/*! ../../models/StockAdjustmentPending */ \"./src/server/models/StockAdjustmentPending.ts\");\r\nconst DbBackups_1 = __webpack_require__(/*! ../../models/DbBackups */ \"./src/server/models/DbBackups.ts\");\r\nconst Refills_1 = __webpack_require__(/*! ../../models/Refills */ \"./src/server/models/Refills.ts\");\r\nconst StockValues_1 = __webpack_require__(/*! ../../models/StockValues */ \"./src/server/models/StockValues.ts\");\r\nconst OutgoingPayments_1 = __webpack_require__(/*! ../../models/OutgoingPayments */ \"./src/server/models/OutgoingPayments.ts\");\r\nconst OnlineBackups_1 = __webpack_require__(/*! ../../models/OnlineBackups */ \"./src/server/models/OnlineBackups.ts\");\r\nconst DbSync_1 = __webpack_require__(/*! ../../models/DbSync */ \"./src/server/models/DbSync.ts\");\r\nconst IncomingPayments_1 = __webpack_require__(/*! ../../models/IncomingPayments */ \"./src/server/models/IncomingPayments.ts\");\r\nconst DailyRecords_1 = __webpack_require__(/*! ../../models/DailyRecords */ \"./src/server/models/DailyRecords.ts\");\r\nfunction getIndexes(tableName, queryInterface) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let index_names = [];\r\n        const indexes = yield queryInterface.showIndex(tableName);\r\n        for (const key in indexes) {\r\n            if (Object.prototype.hasOwnProperty.call(indexes, key)) {\r\n                const element = indexes[key];\r\n                index_names.push(element['name']);\r\n            }\r\n        }\r\n        return index_names;\r\n    });\r\n}\r\nexports.migrationsList = [\r\n    {\r\n        name: \"2019-001-initialMigrations-addActvities\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Activities_1.Activities.tableName, {\r\n                    activity_id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    user_id: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    activity: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    module: {\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW,\r\n                    },\r\n                    deleted: {\r\n                        allowNull: true,\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: 0\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Activities_1.Activities.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-002-initialMigrations-addCustomers\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Customers_1.Customers.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    sex: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    email: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    phone: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    location: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW,\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Customers_1.Customers.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-003-initialMigrations-createPermissions\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Permissions_1.Permissions.tableName, {\r\n                    permission_id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    description: {\r\n                        type: sequelize_1.STRING\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Permissions_1.Permissions.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-004-initialMigrations-insertPermissions\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkInsert(Permissions_1.Permissions.tableName, [...permissions_1.allPermissions.values()], {});\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                //no going back\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-005-initialMigrations-createRoles\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Roles_1.Roles.tableName, {\r\n                    role_id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    role_name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    description: {\r\n                        type: sequelize_1.STRING\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Permissions_1.Permissions.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-006-initialMigrations-createRolePermissions\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(RolePermissions_1.RolePermissions.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    role_id: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    permission_id: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    }\r\n                });\r\n                yield queryInterface.addConstraint(RolePermissions_1.RolePermissions.tableName, {\r\n                    fields: ['role_id'],\r\n                    type: 'foreign key',\r\n                    name: 'role_permissions_role_id',\r\n                    references: {\r\n                        table: Roles_1.Roles.tableName,\r\n                        field: 'role_id',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint(RolePermissions_1.RolePermissions.tableName, {\r\n                    fields: ['permission_id'],\r\n                    type: 'foreign key',\r\n                    name: 'role_permissions_permission_id',\r\n                    references: {\r\n                        table: Permissions_1.Permissions.tableName,\r\n                        field: 'permission_id',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(RolePermissions_1.RolePermissions.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-007-initialMigrations-insertRoles\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkInsert(Roles_1.Roles.tableName, [\r\n                    {\r\n                        role_id: 1,\r\n                        role_name: 'Branch Manager',\r\n                        description: 'manages day-to-day activities. Receives purchases, manages stock. May also make sales'\r\n                    },\r\n                    {\r\n                        role_id: 2,\r\n                        role_name: 'Sales Person',\r\n                        description: 'serves customers and makes sales. Limited permissions by default'\r\n                    }\r\n                ], {});\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                //no going back\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-008-initialMigrations-insertDefaultPermissions\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                let objects = [];\r\n                //do it for the manager. all permissions by default\r\n                permissions_1.allPermissions.forEach(permission => {\r\n                    objects.push({ role_id: 1, permission_id: permission.permission_id });\r\n                });\r\n                permissions_1.defaultSalesPersonPermissions.forEach(id => {\r\n                    objects.push({ role_id: 2, permission_id: id });\r\n                });\r\n                yield queryInterface.bulkInsert(RolePermissions_1.RolePermissions.tableName, objects, {});\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                //no going back\r\n            });\r\n        }\r\n    },\r\n    //do users, user_sessions, products...\r\n    {\r\n        name: \"2019-009-initialMigrations-createInsurers\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(InsuranceProviders_1.InsuranceProviders.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    }\r\n                });\r\n                //check if the indexes exists before adding them\r\n                let index_names = yield getIndexes(InsuranceProviders_1.InsuranceProviders.tableName, queryInterface);\r\n                if (index_names.indexOf(`${InsuranceProviders_1.InsuranceProviders.tableName}_name`))\r\n                    yield queryInterface.addIndex(InsuranceProviders_1.InsuranceProviders.tableName, ['name']);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(InsuranceProviders_1.InsuranceProviders.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-010-initialMigrations-createVendors\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Vendors_1.Vendors.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    location: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    phone: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    email: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    notes: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    legacy_id: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    }\r\n                });\r\n                //check if the indexes exists before adding them\r\n                let index_names = yield getIndexes(Vendors_1.Vendors.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Vendors_1.Vendors.tableName}_name`) === -1)\r\n                    yield queryInterface.addIndex(Vendors_1.Vendors.tableName, ['name'], {\r\n                        unique: true\r\n                    });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Vendors_1.Vendors.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-011-initialMigrations-createBranches\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Branches_1.Branches.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    location: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    phone: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    address: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    email: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                //check if the indexes exists before adding them\r\n                let index_names = yield getIndexes(Branches_1.Branches.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Branches_1.Branches.tableName}_name`) === -1)\r\n                    yield queryInterface.addIndex(Branches_1.Branches.tableName, ['name'], {\r\n                        unique: true\r\n                    });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Branches_1.Branches.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-012-initialMigrations-createSettings\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Settings_1.Settings.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    module: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    value: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(Settings_1.Settings.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Settings_1.Settings.tableName}_name`) === -1)\r\n                    yield queryInterface.addIndex(Settings_1.Settings.tableName, ['name'], {\r\n                        unique: true\r\n                    });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Settings_1.Settings.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-013-initialMigrations-createUsers\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Users_1.Users.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    role_id: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    email: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    username: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    password_hash: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    last_login: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                        defaultValue: ''\r\n                    },\r\n                    last_ip: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                        defaultValue: ''\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        allowNull: false,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    display_name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    active: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false,\r\n                        defaultValue: 0\r\n                    },\r\n                    last_seen: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: true\r\n                    },\r\n                    phone: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: ''\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(Users_1.Users.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Users_1.Users.tableName}_username`) === -1)\r\n                    yield queryInterface.addIndex(Users_1.Users.tableName, ['username'], {\r\n                        unique: true\r\n                    });\r\n                if (index_names.indexOf(`${Users_1.Users.tableName}_email`) === -1)\r\n                    yield queryInterface.addIndex(Users_1.Users.tableName, ['email'], {\r\n                        unique: true\r\n                    });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Users_1.Users.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-014-initialMigrations-createUserSessions\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(UserSessions_1.UserSessions.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    user_id: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    token: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    expires: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(UserSessions_1.UserSessions.tableName, queryInterface);\r\n                if (index_names.indexOf(`${UserSessions_1.UserSessions.tableName}_user_id_token_expires`) === -1)\r\n                    yield queryInterface.addIndex(UserSessions_1.UserSessions.tableName, ['user_id', 'token', 'expires'], {\r\n                        unique: true\r\n                    });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(UserSessions_1.UserSessions.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-015-initialMigrations-createProducts\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Products_1.Products.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    category: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    notes: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    unit: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    picture: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    max_stock: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        defaultValue: null\r\n                    },\r\n                    min_stock: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        defaultValue: null\r\n                    },\r\n                    expiry: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    barcode: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    current_stock: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        defaultValue: null\r\n                    },\r\n                    last_modified: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    cost_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        defaultValue: null\r\n                    },\r\n                    status: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: 1\r\n                    },\r\n                    size: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    description: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: 1\r\n                    },\r\n                    shelf: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: 1\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                //check if the indexes exists before adding them\r\n                let index_names = yield getIndexes(Products_1.Products.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_name`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['name'], {\r\n                        unique: true,\r\n                    });\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_price`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['price']);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_category`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['category']);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_max_stock`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['max_stock']);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_min_stock`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['min_stock']);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_expiry`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['expiry']);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_current_stock`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['current_stock']);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_last_modified`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['last_modified']);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_status`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['status']);\r\n                if (index_names.indexOf(`${Products_1.Products.tableName}_description`) === -1)\r\n                    yield queryInterface.addIndex(Products_1.Products.tableName, ['description']);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Products_1.Products.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-016-initialMigrations-createSales\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Sales_1.Sales.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    customer: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: true,\r\n                        defaultValue: null\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                        unique: true\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        allowNull: false\r\n                    },\r\n                    amount_paid: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false,\r\n                        defaultValue: 0\r\n                    },\r\n                    payment_method: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                        defaultValue: 'Cash'\r\n                    },\r\n                    momo_reference: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    insurance_provider: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    insurance_member_name: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    insurance_member_id: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    creditor_name: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    credit_paid: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: 0\r\n                    },\r\n                    discount: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false,\r\n                        defaultValue: 0\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    shift: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                        defaultValue: 'Not Set'\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(Sales_1.Sales.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Sales_1.Sales.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(Sales_1.Sales.tableName, ['code'], {\r\n                        unique: true\r\n                    });\r\n                if (index_names.indexOf(`${Sales_1.Sales.tableName}_payment_method`) === -1)\r\n                    yield queryInterface.addIndex(Sales_1.Sales.tableName, ['payment_method']);\r\n                if (index_names.indexOf(`${Sales_1.Sales.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(Sales_1.Sales.tableName, ['date',]);\r\n                if (index_names.indexOf(`${Sales_1.Sales.tableName}_customer`) === -1)\r\n                    yield queryInterface.addIndex(Sales_1.Sales.tableName, ['customer',]);\r\n                // await queryInterface.addConstraint(\r\n                //     Sales.tableName,\r\n                //     {\r\n                //         fields: ['insurance_provider'],\r\n                //         type: 'foreign key',\r\n                //         name: 'sales_insurance_provider',\r\n                //         references: {\r\n                //             table: InsuranceProviders.tableName,\r\n                //             field: 'name',\r\n                //         },\r\n                //         onDelete: 'restrict',\r\n                //         onUpdate: 'cascade'\r\n                //     });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Sales_1.Sales.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-017-initialMigrations-createSalesDetails\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(SalesDetails_1.SalesDetails.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    quantity: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    cost_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(SalesDetails_1.SalesDetails.tableName, queryInterface);\r\n                if (index_names.indexOf(`${SalesDetails_1.SalesDetails.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(SalesDetails_1.SalesDetails.tableName, ['code']);\r\n                if (index_names.indexOf(`${SalesDetails_1.SalesDetails.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(SalesDetails_1.SalesDetails.tableName, ['date',]);\r\n                yield queryInterface.addConstraint(SalesDetails_1.SalesDetails.tableName, {\r\n                    fields: ['code'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Sales_1.Sales.tableName,\r\n                        field: 'code',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint(SalesDetails_1.SalesDetails.tableName, {\r\n                    fields: ['product'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Products_1.Products.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(SalesDetails_1.SalesDetails.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-018-initialMigrations-createPurchases\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Purchases_1.Purchases.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    vendor: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                        unique: true\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    amount_paid: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        defaultValue: 0\r\n                    },\r\n                    payment_method: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: 'Cash'\r\n                    },\r\n                    site: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    invoice: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    last_payment_date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    status: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(Purchases_1.Purchases.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Purchases_1.Purchases.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(Purchases_1.Purchases.tableName, ['code'], {\r\n                        unique: true\r\n                    });\r\n                if (index_names.indexOf(`${Purchases_1.Purchases.tableName}_payment_method`) === -1)\r\n                    yield queryInterface.addIndex(Purchases_1.Purchases.tableName, ['payment_method',]);\r\n                if (index_names.indexOf(`${Purchases_1.Purchases.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(Purchases_1.Purchases.tableName, ['date',]);\r\n                if (index_names.indexOf(`${Purchases_1.Purchases.tableName}_vendor`) === -1)\r\n                    yield queryInterface.addIndex(Purchases_1.Purchases.tableName, ['vendor',]);\r\n                yield queryInterface.addConstraint(Purchases_1.Purchases.tableName, {\r\n                    fields: ['vendor'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Vendors_1.Vendors.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Purchases_1.Purchases.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-019-initialMigrations-createPurchaseDetails\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(PurchaseDetails_1.PurchaseDetails.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    quantity: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    selling_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    unit: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    markup: {\r\n                        type: sequelize_1.STRING,\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(PurchaseDetails_1.PurchaseDetails.tableName, queryInterface);\r\n                if (index_names.indexOf(`${PurchaseDetails_1.PurchaseDetails.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(PurchaseDetails_1.PurchaseDetails.tableName, ['code']);\r\n                if (index_names.indexOf(`${PurchaseDetails_1.PurchaseDetails.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(PurchaseDetails_1.PurchaseDetails.tableName, ['date']);\r\n                yield queryInterface.addConstraint(PurchaseDetails_1.PurchaseDetails.tableName, {\r\n                    fields: ['code'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Purchases_1.Purchases.tableName,\r\n                        field: 'code',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint(PurchaseDetails_1.PurchaseDetails.tableName, {\r\n                    fields: ['product'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Products_1.Products.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(PurchaseDetails_1.PurchaseDetails.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-020-initialMigrations-createReceivedTransfers\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(ReceivedTransfers_1.ReceivedTransfers.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    sender: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                        unique: true\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    invoice: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(ReceivedTransfers_1.ReceivedTransfers.tableName, queryInterface);\r\n                if (index_names.indexOf(`${ReceivedTransfers_1.ReceivedTransfers.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(ReceivedTransfers_1.ReceivedTransfers.tableName, ['code'], {\r\n                        unique: true\r\n                    });\r\n                if (index_names.indexOf(`${ReceivedTransfers_1.ReceivedTransfers.tableName}_invoice`) === -1)\r\n                    yield queryInterface.addIndex(ReceivedTransfers_1.ReceivedTransfers.tableName, ['invoice',]);\r\n                if (index_names.indexOf(`${ReceivedTransfers_1.ReceivedTransfers.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(ReceivedTransfers_1.ReceivedTransfers.tableName, ['date',]);\r\n                if (index_names.indexOf(`${ReceivedTransfers_1.ReceivedTransfers.tableName}_sender`) === -1)\r\n                    yield queryInterface.addIndex(ReceivedTransfers_1.ReceivedTransfers.tableName, ['sender',]);\r\n                yield queryInterface.addConstraint(ReceivedTransfers_1.ReceivedTransfers.tableName, {\r\n                    fields: ['sender'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Branches_1.Branches.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(ReceivedTransfers_1.ReceivedTransfers.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-021-initialMigrations-createReceivedTransferDetails\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(ReceivedTransferDetails_1.ReceivedTransferDetails.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    expiry: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    quantity: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    cost_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(ReceivedTransferDetails_1.ReceivedTransferDetails.tableName, queryInterface);\r\n                if (index_names.indexOf(`${ReceivedTransferDetails_1.ReceivedTransferDetails.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(ReceivedTransferDetails_1.ReceivedTransferDetails.tableName, ['code']);\r\n                if (index_names.indexOf(`${ReceivedTransferDetails_1.ReceivedTransferDetails.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(ReceivedTransferDetails_1.ReceivedTransferDetails.tableName, ['date']);\r\n                yield queryInterface.addConstraint(ReceivedTransferDetails_1.ReceivedTransferDetails.tableName, {\r\n                    fields: ['code'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: ReceivedTransfers_1.ReceivedTransfers.tableName,\r\n                        field: 'code',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint(ReceivedTransferDetails_1.ReceivedTransferDetails.tableName, {\r\n                    fields: ['product'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Products_1.Products.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(PurchaseDetails_1.PurchaseDetails.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-022-initialMigrations-createTransfers\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Transfers_1.Transfers.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    receiver: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                        unique: true\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    status: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: 'Pending'\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(Transfers_1.Transfers.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Transfers_1.Transfers.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(Transfers_1.Transfers.tableName, ['code'], {\r\n                        unique: true\r\n                    });\r\n                if (index_names.indexOf(`${Transfers_1.Transfers.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(Transfers_1.Transfers.tableName, ['date',]);\r\n                if (index_names.indexOf(`${Transfers_1.Transfers.tableName}_receiver`) === -1)\r\n                    yield queryInterface.addIndex(Transfers_1.Transfers.tableName, ['receiver',]);\r\n                yield queryInterface.addConstraint(Transfers_1.Transfers.tableName, {\r\n                    fields: ['receiver'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Branches_1.Branches.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Transfers_1.Transfers.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-023-initialMigrations-createTransferDetails\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(TransferDetails_1.TransferDetails.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    expiry: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    quantity: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    cost_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(TransferDetails_1.TransferDetails.tableName, queryInterface);\r\n                if (index_names.indexOf(`${TransferDetails_1.TransferDetails.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(TransferDetails_1.TransferDetails.tableName, ['code']);\r\n                if (index_names.indexOf(`${TransferDetails_1.TransferDetails.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(TransferDetails_1.TransferDetails.tableName, ['date']);\r\n                yield queryInterface.addConstraint(TransferDetails_1.TransferDetails.tableName, {\r\n                    fields: ['code'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Transfers_1.Transfers.tableName,\r\n                        field: 'code',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint(TransferDetails_1.TransferDetails.tableName, {\r\n                    fields: ['product'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Products_1.Products.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(TransferDetails_1.TransferDetails.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-024-initialMigrations-createStockAdjustment\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(StockAdjustment_1.StockAdjustment.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    quantity_counted: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    quantity_expected: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    current_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    cost_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    category: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    size: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    expiry: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    comments: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    quantity_expired: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false,\r\n                        defaultValue: 0\r\n                    },\r\n                    quantity_damaged: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false,\r\n                        defaultValue: 0\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(StockAdjustment_1.StockAdjustment.tableName, queryInterface);\r\n                if (index_names.indexOf(`${StockAdjustment_1.StockAdjustment.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustment_1.StockAdjustment.tableName, ['code']);\r\n                if (index_names.indexOf(`${StockAdjustment_1.StockAdjustment.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustment_1.StockAdjustment.tableName, ['date',]);\r\n                if (index_names.indexOf(`${StockAdjustment_1.StockAdjustment.tableName}_created_on`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustment_1.StockAdjustment.tableName, ['created_on',]);\r\n                if (index_names.indexOf(`${StockAdjustment_1.StockAdjustment.tableName}_product`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustment_1.StockAdjustment.tableName, ['product',]);\r\n                yield queryInterface.addConstraint(StockAdjustment_1.StockAdjustment.tableName, {\r\n                    fields: ['product'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Products_1.Products.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(SalesDetails_1.SalesDetails.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-025-initialMigrations-createStockAdjustmentSessions\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(StockAdjustmentSessions_1.StockAdjustmentSessions.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        allowNull: false\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    status: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: 'in_progress'\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(StockAdjustmentSessions_1.StockAdjustmentSessions.tableName, queryInterface);\r\n                if (index_names.indexOf(`${StockAdjustmentSessions_1.StockAdjustmentSessions.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustmentSessions_1.StockAdjustmentSessions.tableName, ['code'], {\r\n                        unique: true\r\n                    });\r\n                if (index_names.indexOf(`${StockAdjustmentSessions_1.StockAdjustmentSessions.tableName}_created_on`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustmentSessions_1.StockAdjustmentSessions.tableName, ['created_on']);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(StockAdjustmentSessions_1.StockAdjustmentSessions.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-026-initialMigrations-createCustomerDiagnostics\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(CustomerDiagnostics_1.CustomerDiagnostics.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    customer: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    test: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    data: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    comments: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(CustomerDiagnostics_1.CustomerDiagnostics.tableName, queryInterface);\r\n                if (index_names.indexOf(`${CustomerDiagnostics_1.CustomerDiagnostics.tableName}_test`) === -1)\r\n                    yield queryInterface.addIndex(CustomerDiagnostics_1.CustomerDiagnostics.tableName, ['test'], {\r\n                        unique: true\r\n                    });\r\n                yield queryInterface.addConstraint(CustomerDiagnostics_1.CustomerDiagnostics.tableName, {\r\n                    fields: ['customer'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Customers_1.Customers.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(CustomerDiagnostics_1.CustomerDiagnostics.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-027-initialMigrations-createDiagnosticTests\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(DiagnosticTests_1.DiagnosticTests.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    test_name: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    parameters: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    comments: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(DiagnosticTests_1.DiagnosticTests.tableName, queryInterface);\r\n                if (index_names.indexOf(`${DiagnosticTests_1.DiagnosticTests.tableName}_test_name`) === -1)\r\n                    yield queryInterface.addIndex(DiagnosticTests_1.DiagnosticTests.tableName, ['test_name'], {\r\n                        unique: true\r\n                    });\r\n                yield queryInterface.bulkInsert(DiagnosticTests_1.DiagnosticTests.tableName, [\r\n                    {\r\n                        test_name: 'Blood Glucose Test',\r\n                        parameters: 'value (mmol/L)',\r\n                        comments: `Normal ranges for non-diabetic: Before meals - 4.0 to 5.9 mmol/L; After meals - under 7.8 mmol/L; \r\n      For diabetics: Before meals - 4 to 7 mmol / L; After meals - 5 to 9 mmol / L`,\r\n                    },\r\n                    {\r\n                        test_name: 'Blood Pressure',\r\n                        parameters: `systolic, diastolic`,\r\n                        comments: `90/60mmHg  to 120/80mmHg - ideal,\r\n      140/90mmHg or higher - high,\r\n      90/60mmHg or lower - low`,\r\n                    },\r\n                    {\r\n                        test_name: 'Total Blood Cholesterol',\r\n                        parameters: `value (mmol/L)`,\r\n                        comments: `Below 5.2 mmol/L - normal, 5.2 to 6.2 mmol/L - Borderline High, Above 6.2 mmol/L - High`,\r\n                    }\r\n                ]);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(DiagnosticTests_1.DiagnosticTests.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-028-initialMigrations-createStockAdjustmentPending\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(StockAdjustmentPending_1.StockAdjustmentPending.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        defaultValue: null\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER,\r\n                        allowNull: false\r\n                    },\r\n                    quantity_counted: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    quantity_expected: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    current_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    cost_price: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    category: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    size: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    expiry: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    comments: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    quantity_expired: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false,\r\n                        defaultValue: 0\r\n                    },\r\n                    quantity_damaged: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false,\r\n                        defaultValue: 0\r\n                    },\r\n                    shelf: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    unit: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(StockAdjustmentPending_1.StockAdjustmentPending.tableName, queryInterface);\r\n                if (index_names.indexOf(`${StockAdjustmentPending_1.StockAdjustmentPending.tableName}_code`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustmentPending_1.StockAdjustmentPending.tableName, ['code']);\r\n                if (index_names.indexOf(`${StockAdjustmentPending_1.StockAdjustmentPending.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustmentPending_1.StockAdjustmentPending.tableName, ['date',]);\r\n                if (index_names.indexOf(`${StockAdjustmentPending_1.StockAdjustmentPending.tableName}_created_on`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustmentPending_1.StockAdjustmentPending.tableName, ['created_on',]);\r\n                if (index_names.indexOf(`${StockAdjustmentPending_1.StockAdjustmentPending.tableName}_product`) === -1)\r\n                    yield queryInterface.addIndex(StockAdjustmentPending_1.StockAdjustmentPending.tableName, ['product',]);\r\n                yield queryInterface.addConstraint(StockAdjustmentPending_1.StockAdjustmentPending.tableName, {\r\n                    fields: ['product'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Products_1.Products.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(StockAdjustmentPending_1.StockAdjustmentPending.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-029-initialMigrations-createdbBackups\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(DbBackups_1.DbBackups.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    file_name: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    description: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    uploaded: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    db_version: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(DbBackups_1.DbBackups.tableName, queryInterface);\r\n                if (index_names.indexOf(`${DbBackups_1.DbBackups.tableName}_file_name_created_on`) === -1)\r\n                    yield queryInterface.addIndex(DbBackups_1.DbBackups.tableName, ['file_name', 'created_on']);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(DbBackups_1.DbBackups.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-030-initialMigrations-createRefills\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(Refills_1.Refills.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false,\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    start_date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        allowNull: false,\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    product_id: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    quantity: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false,\r\n                    },\r\n                    end_date: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: null\r\n                    },\r\n                    status: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    customer_id: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    customer_name: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(Refills_1.Refills.tableName, queryInterface);\r\n                if (index_names.indexOf(`${Refills_1.Refills.tableName}_end_date`) === -1)\r\n                    yield queryInterface.addIndex(Refills_1.Refills.tableName, ['end_date']);\r\n                if (index_names.indexOf(`${Refills_1.Refills.tableName}_start_date`) === -1)\r\n                    yield queryInterface.addIndex(Refills_1.Refills.tableName, ['start_date']);\r\n                if (index_names.indexOf(`${Refills_1.Refills.tableName}_status`) === -1)\r\n                    yield queryInterface.addIndex(Refills_1.Refills.tableName, ['status']);\r\n                yield queryInterface.addConstraint(Refills_1.Refills.tableName, {\r\n                    fields: ['product_id'],\r\n                    type: 'foreign key',\r\n                    references: {\r\n                        table: Products_1.Products.tableName,\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'restrict',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(Refills_1.Refills.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-031-initialMigrations-createStockValues\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(StockValues_1.StockValues.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        allowNull: false\r\n                    },\r\n                    last_modified: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: sequelize_1.NOW\r\n                    },\r\n                    selling_value: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    cost_value: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(StockValues_1.StockValues.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-032-initialMigrations-createOutgoingPaymets\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(OutgoingPayments_1.OutgoingPayments.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        allowNull: false\r\n                    },\r\n                    amount: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    type: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    recipient: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    payment_method: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: 'Cash'\r\n                    },\r\n                    transaction_id: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    item_code: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    notes: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(OutgoingPayments_1.OutgoingPayments.tableName, queryInterface);\r\n                if (index_names.indexOf(`${OutgoingPayments_1.OutgoingPayments.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(OutgoingPayments_1.OutgoingPayments.tableName, ['date']);\r\n                if (index_names.indexOf(`${OutgoingPayments_1.OutgoingPayments.tableName}_type`) === -1)\r\n                    yield queryInterface.addIndex(OutgoingPayments_1.OutgoingPayments.tableName, ['type']);\r\n                if (index_names.indexOf(`${OutgoingPayments_1.OutgoingPayments.tableName}_recipient`) === -1)\r\n                    yield queryInterface.addIndex(OutgoingPayments_1.OutgoingPayments.tableName, ['recipient']);\r\n                if (index_names.indexOf(`${OutgoingPayments_1.OutgoingPayments.tableName}_created_on`) === -1)\r\n                    yield queryInterface.addIndex(OutgoingPayments_1.OutgoingPayments.tableName, ['created_on']);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(OutgoingPayments_1.OutgoingPayments.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-034-initialMigrations-createOnlineBackups\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(OnlineBackups_1.OnlineBackups.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        allowNull: false\r\n                    },\r\n                    url: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(OnlineBackups_1.OnlineBackups.tableName, queryInterface);\r\n                if (index_names.indexOf(`${OnlineBackups_1.OnlineBackups.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(OnlineBackups_1.OnlineBackups.tableName, ['date']);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(OnlineBackups_1.OnlineBackups.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-035-initialMigrations-createDBSync\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(DbSync_1.DbSync.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    type: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    action: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    data: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(DbSync_1.DbSync.tableName, queryInterface);\r\n                if (index_names.indexOf(`${DbSync_1.DbSync.tableName}_created_on`) === -1)\r\n                    yield queryInterface.addIndex(DbSync_1.DbSync.tableName, ['created_on']);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(DbSync_1.DbSync.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"2019-036-initialMigrations-createIncomingPaymets\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable(IncomingPayments_1.IncomingPayments.tableName, {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY,\r\n                        allowNull: false\r\n                    },\r\n                    amount: {\r\n                        type: sequelize_1.DOUBLE,\r\n                        allowNull: false\r\n                    },\r\n                    type: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    payer: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    payment_method: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: 'Cash'\r\n                    },\r\n                    transaction_id: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    item_code: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    notes: {\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: null\r\n                    },\r\n                    created_by: {\r\n                        type: sequelize_1.INTEGER,\r\n                        defaultValue: null\r\n                    },\r\n                    created_on: {\r\n                        type: sequelize_1.DATE,\r\n                        defaultValue: sequelize_1.NOW\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes(IncomingPayments_1.IncomingPayments.tableName, queryInterface);\r\n                if (index_names.indexOf(`${IncomingPayments_1.IncomingPayments.tableName}_date`) === -1)\r\n                    yield queryInterface.addIndex(IncomingPayments_1.IncomingPayments.tableName, ['date']);\r\n                if (index_names.indexOf(`${IncomingPayments_1.IncomingPayments.tableName}_type`) === -1)\r\n                    yield queryInterface.addIndex(IncomingPayments_1.IncomingPayments.tableName, ['type']);\r\n                if (index_names.indexOf(`${IncomingPayments_1.IncomingPayments.tableName}_payer`) === -1)\r\n                    yield queryInterface.addIndex(IncomingPayments_1.IncomingPayments.tableName, ['payer']);\r\n                if (index_names.indexOf(`${IncomingPayments_1.IncomingPayments.tableName}_created_on`) === -1)\r\n                    yield queryInterface.addIndex(IncomingPayments_1.IncomingPayments.tableName, ['created_on']);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable(IncomingPayments_1.IncomingPayments.tableName);\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210314155622-addCustomerDob\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn(Customers_1.Customers.tableName, 'date_of_birth', {\r\n                    type: sequelize_1.DATEONLY\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn(Customers_1.Customers.tableName, 'date_of_birth');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210314180101-create-product-batches\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable('ProductBatches', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    batch_number: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    expiry: {\r\n                        type: sequelize_1.DATE\r\n                    },\r\n                    barcode: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    purchase_code: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    createdAt: {\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    },\r\n                    updatedAt: {\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable('ProductBatches');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210315154011-addQuantityToProductBatches\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('productbatches', 'quantity', {\r\n                    type: sequelize_1.DOUBLE\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('productbatches', 'quantity');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210317181610-addQuantitySoldToproductBatches\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('productbatches', 'quantity_sold', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('productbatches', 'quantity_sold');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210324143037-create-daily-records\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable('dailyRecords', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY\r\n                    }, amount: {\r\n                        type: sequelize_1.DOUBLE\r\n                    }, shift: {\r\n                        type: sequelize_1.STRING\r\n                    }, created_by: {\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    created_on: {\r\n                        defaultValue: sequelize_1.NOW,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable('dailyRecords');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210324173726-addPaymentMethodsToDailyRecords\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('dailyRecords', 'cash', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n                yield queryInterface.addColumn('dailyRecords', 'momo', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n                yield queryInterface.addColumn('dailyRecords', 'insurance', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n                yield queryInterface.addColumn('dailyRecords', 'credit', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n                yield queryInterface.addColumn('dailyRecords', 'pos', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n                yield queryInterface.addColumn('dailyRecords', 'cheque', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n                yield queryInterface.addColumn('dailyRecords', 'other', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('dailyRecords', 'cash');\r\n                yield queryInterface.removeColumn('dailyRecords', 'momo');\r\n                yield queryInterface.removeColumn('dailyRecords', 'insurance');\r\n                yield queryInterface.removeColumn('dailyRecords', 'credit');\r\n                yield queryInterface.removeColumn('dailyRecords', 'pos');\r\n                yield queryInterface.removeColumn('dailyRecords', 'cheque');\r\n                yield queryInterface.removeColumn('dailyRecords', 'other');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210409084451-createSalesBatches\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable('sales_batches', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    date: {\r\n                        type: sequelize_1.DATEONLY\r\n                    },\r\n                    batch_number: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    quantity: {\r\n                        type: sequelize_1.DOUBLE\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING\r\n                    }, created_by: {\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    created_on: {\r\n                        defaultValue: sequelize_1.NOW,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable('sales_batches');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210409085254-addExpiryToSalesBatches\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('sales_batches', 'expiry', {\r\n                    type: sequelize_1.DATE\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('sales_batches', 'expiry');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210409095027-addPreferredVendorToProducts\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('products', 'preferred_vendor', {\r\n                    type: sequelize_1.INTEGER\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('products', 'preferred_vendor');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210626115902-createTokensTable\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable('tokens', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    token: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    created_on: {\r\n                        defaultValue: sequelize_1.NOW,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    }\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable('tokens`');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210824173831-addOnlineToUsers\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('users', 'allow_online', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: 'no'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('users', 'allow_online');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20210926105345-updateProductsTable\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20211023131213-insertTaxSetting\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkInsert('settings', [{\r\n                        name: 'tax',\r\n                        module: 'System',\r\n                        value: '0'\r\n                    }], {\r\n                // ignoreDuplicates: true\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkDelete('settings', {\r\n                    name: 'tax'\r\n                });\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20211023134920-addTaxToSales\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('sales', 'tax', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 0\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('sales', 'tax');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20211024133528-insertBatchSetting\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                const queryOptions = {};\r\n                yield queryInterface.bulkInsert('settings', [{\r\n                        name: 'activate_batch_mode',\r\n                        module: 'System',\r\n                        value: 'no'\r\n                    }], {});\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkDelete('settings', {\r\n                    name: 'activate_batch_mode'\r\n                });\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20211109143824-addLogoToSettings\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                // const logo_exists = await Settings.findAll({\r\n                //     where: {\r\n                //         name: { [Op.in]: ['logo','receipt_logo']}\r\n                //     }\r\n                // })\r\n                // console.log(\"logo exists\",logo_exists)\r\n                const data = [{\r\n                        name: 'logo',\r\n                        module: 'System',\r\n                        value: ''\r\n                    },\r\n                    {\r\n                        name: 'receipt_logo',\r\n                        module: 'System',\r\n                        value: 'no'\r\n                    }];\r\n                yield queryInterface.bulkInsert('settings', data);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkDelete('settings', {\r\n                    name: {\r\n                        [sequelize_1.Op.in]: ['logo',\r\n                            'receipt_logo']\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20211121152934-productsAddDrugInfo\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('products', 'is_drug', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: 'yes'\r\n                });\r\n                yield queryInterface.addColumn('products', 'generic_name', {\r\n                    allowNull: true,\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null\r\n                });\r\n                yield queryInterface.addColumn('products', 'contraindications', {\r\n                    allowNull: true,\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null\r\n                });\r\n                yield queryInterface.addColumn('products', 'pregnancy', {\r\n                    allowNull: true,\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null\r\n                });\r\n                yield queryInterface.addColumn('products', 'side_effects', {\r\n                    allowNull: true,\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null\r\n                });\r\n                yield queryInterface.addColumn('products', 'caution', {\r\n                    allowNull: true,\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null\r\n                });\r\n                yield queryInterface.addColumn('products', 'indications', {\r\n                    allowNull: true,\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('products', 'is_drug');\r\n                yield queryInterface.removeColumn('products', 'generic_name');\r\n                yield queryInterface.removeColumn('products', 'contraindications');\r\n                yield queryInterface.removeColumn('products', 'pregnancy');\r\n                yield queryInterface.removeColumn('products', 'side_effects');\r\n                yield queryInterface.removeColumn('products', 'caution');\r\n                yield queryInterface.removeColumn('products', 'indications');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20211121154018-addStoresTables\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable('stores', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    name: {\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    created_on: {\r\n                        defaultValue: sequelize_1.NOW,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    }\r\n                });\r\n                yield queryInterface.createTable('store_inventory', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    store: {\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    max_stock: {\r\n                        type: sequelize_1.DOUBLE\r\n                    },\r\n                    min_stock: {\r\n                        type: sequelize_1.DOUBLE\r\n                    },\r\n                    current_stock: {\r\n                        type: sequelize_1.DOUBLE\r\n                    },\r\n                    expiry: {\r\n                        type: sequelize_1.DATE\r\n                    },\r\n                    created_on: {\r\n                        defaultValue: sequelize_1.NOW,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    }\r\n                });\r\n                yield queryInterface.addConstraint('store_inventory', {\r\n                    fields: ['product'],\r\n                    type: 'foreign key',\r\n                    name: 'products_storeInventory_product',\r\n                    references: {\r\n                        table: 'products',\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint('store_inventory', {\r\n                    fields: ['store'],\r\n                    type: 'foreign key',\r\n                    name: 'products_storeInventory_store',\r\n                    references: {\r\n                        table: 'stores',\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable('stores');\r\n                yield queryInterface.dropTable('store_inventory');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20211121170321-addRequisitionTables\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable('requisitions', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    code: {\r\n                        allowNull: false,\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    sender: {\r\n                        allowNull: false,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    recipient: {\r\n                        allowNull: false,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    created_on: {\r\n                        defaultValue: sequelize_1.NOW,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    },\r\n                    created_by: {\r\n                        defaultValue: null,\r\n                        allowNull: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    }, status: {\r\n                        allowNull: false,\r\n                        defaultValue: 'Pending',\r\n                        type: sequelize_1.STRING\r\n                    }\r\n                });\r\n                yield queryInterface.createTable('requisition_details', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    product: {\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    code: {\r\n                        type: sequelize_1.STRING,\r\n                    },\r\n                    price: {\r\n                        type: sequelize_1.DOUBLE\r\n                    },\r\n                    cost_price: {\r\n                        type: sequelize_1.DOUBLE\r\n                    },\r\n                    quantity: {\r\n                        type: sequelize_1.DOUBLE\r\n                    },\r\n                    expiry: {\r\n                        type: sequelize_1.DATE\r\n                    },\r\n                    created_on: {\r\n                        defaultValue: sequelize_1.NOW,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    },\r\n                    date: {\r\n                        allowNull: false,\r\n                        type: sequelize_1.DATEONLY,\r\n                    },\r\n                    created_by: {\r\n                        defaultValue: null,\r\n                        allowNull: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    }\r\n                });\r\n                yield queryInterface.addConstraint('requisitions', {\r\n                    fields: ['code'],\r\n                    type: 'unique',\r\n                    name: 'requisitions_code_key', // useful if using queryInterface.removeConstraint\r\n                });\r\n                yield queryInterface.addConstraint('requisitions', {\r\n                    fields: ['sender'],\r\n                    type: 'foreign key',\r\n                    name: 'requisitions_store_sender',\r\n                    references: {\r\n                        table: 'stores',\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint('requisitions', {\r\n                    fields: ['recipient'],\r\n                    type: 'foreign key',\r\n                    name: 'requisitions_store_recipient',\r\n                    references: {\r\n                        table: 'stores',\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint('requisition_details', {\r\n                    fields: ['product'],\r\n                    type: 'foreign key',\r\n                    name: 'requisition_details_product_key',\r\n                    references: {\r\n                        table: 'products',\r\n                        field: 'id',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n                yield queryInterface.addConstraint('requisition_details', {\r\n                    fields: ['code'],\r\n                    type: 'foreign key',\r\n                    name: 'requisition_details_code_key',\r\n                    references: {\r\n                        table: 'requisitions',\r\n                        field: 'code',\r\n                    },\r\n                    onDelete: 'cascade',\r\n                    onUpdate: 'cascade'\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable('requisitions');\r\n                yield queryInterface.dropTable('requisition_details');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20211125214835-addDescriptionToStores\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('stores', 'description', {\r\n                    type: sequelize_1.STRING,\r\n                    allowNull: true,\r\n                    defaultValue: ''\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('stores', 'description');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220105074517-addReceiptSettings\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkInsert('settings', [\r\n                    {\r\n                        name: 'tax_title',\r\n                        module: 'System',\r\n                        value: 'Local Sale Tax'\r\n                    },\r\n                    {\r\n                        name: 'show_tax_on_receipt',\r\n                        module: 'System',\r\n                        value: 'yes'\r\n                    },\r\n                    {\r\n                        name: 'receipt_show_credits',\r\n                        module: 'System',\r\n                        value: 'yes'\r\n                    },\r\n                    {\r\n                        name: 'receipt_extra_info',\r\n                        module: 'System',\r\n                        value: ''\r\n                    },\r\n                    {\r\n                        name: 'receipt_footer',\r\n                        module: 'System',\r\n                        value: ''\r\n                    },\r\n                ]);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkDelete('settings', {\r\n                    name: {\r\n                        [sequelize_1.Op.in]: [\"tax_title\",\r\n                            \"show_tax_on_receipt\",\r\n                            \"receipt_show_credits\",\r\n                            \"receipt_extra_info\",\r\n                            \"receipt_footer\"]\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220223095800-addMarkupToProducts\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('products', 'markup', {\r\n                    type: sequelize_1.DOUBLE,\r\n                    defaultValue: 1.33\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('products', 'markup');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220311134330-addActiveIngredient\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('products', 'active_ingredients', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null,\r\n                    allowNull: true\r\n                });\r\n                yield queryInterface.addColumn('products', 'drug_info', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null,\r\n                    allowNull: true\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('products', 'active_ingredients');\r\n                yield queryInterface.removeColumn('products', 'drug_info');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220328084933-addExpiryToPurchaseDetails\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('purchase_details', 'expiry', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null,\r\n                    allowNull: true\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('purchase_details', 'expiry');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220411095651-receiptSettings\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkInsert('settings', [\r\n                    {\r\n                        name: 'receipt_show_customer',\r\n                        module: 'System',\r\n                        value: \"yes\"\r\n                    },\r\n                    {\r\n                        name: 'receipt_product_data',\r\n                        module: 'System',\r\n                        value: \"\"\r\n                    },\r\n                    {\r\n                        name: 'receipt_font_size',\r\n                        module: 'System',\r\n                        value: \"13px\"\r\n                    },\r\n                    {\r\n                        name: 'receipt_show_borders',\r\n                        module: 'System',\r\n                        value: \"yes\"\r\n                    }\r\n                ]);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkDelete('settings', {\r\n                    name: {\r\n                        [sequelize_1.Op.in]: [\"receipt_show_customer\",\r\n                            \"receipt_product_data\",\r\n                            \"receipt_font_size\",\r\n                            \"receipt_show_borders\"]\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220503070044-updateSalesDetails\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn('sales_details', 'expiry', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null,\r\n                    allowNull: true\r\n                });\r\n                yield queryInterface.addColumn('sales_details', 'unit', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null,\r\n                    allowNull: true\r\n                });\r\n                yield queryInterface.addColumn('sales_details', 'label', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null,\r\n                    allowNull: true\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn('sales_details', 'expiry');\r\n                yield queryInterface.removeColumn('sales_details', 'unit');\r\n                yield queryInterface.removeColumn('sales_details', 'label');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220506130046-addSalesPermissions\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkInsert('permissions', [{\r\n                        permission_id: '88',\r\n                        name: 'Edit Sales Prices',\r\n                        description: 'Allow user to change the price of items during sales'\r\n                    }]);\r\n                yield queryInterface.bulkInsert('role_permissions', [{\r\n                        permission_id: 88,\r\n                        role_id: 1\r\n                    }]);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkDelete('permissions', {\r\n                    permission_id: '88'\r\n                });\r\n                yield queryInterface.bulkDelete('role_permissions', {\r\n                    permission_id: '88'\r\n                });\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220524121539-multiplePaymentMethods\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable('sales_payment_methods', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER,\r\n                    },\r\n                    code: {\r\n                        allowNull: false,\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    payment_method: {\r\n                        allowNull: false,\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    created_on: {\r\n                        defaultValue: sequelize_1.NOW,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATE,\r\n                    },\r\n                    date: {\r\n                        defaultValue: null,\r\n                        allowNull: true,\r\n                        type: sequelize_1.DATEONLY,\r\n                    },\r\n                    amount_paid: {\r\n                        allowNull: false,\r\n                        type: sequelize_1.DOUBLE\r\n                    },\r\n                    transaction_id: {\r\n                        allowNull: true,\r\n                        defaultValue: null,\r\n                        type: sequelize_1.STRING\r\n                    }\r\n                });\r\n                let index_names = yield getIndexes('sales_payment_methods', queryInterface);\r\n                if (index_names.indexOf(`sales_payment_methods_payment_method`) === -1)\r\n                    yield queryInterface.addIndex('sales_payment_methods', {\r\n                        fields: ['payment_method'],\r\n                    });\r\n                if (index_names.indexOf(`sales_payment_methods_created_on`) === -1)\r\n                    yield queryInterface.addIndex('sales_payment_methods', {\r\n                        fields: ['created_on'],\r\n                    });\r\n                if (index_names.indexOf(`sales_payment_methods_date`) === -1)\r\n                    yield queryInterface.addIndex('sales_payment_methods', {\r\n                        fields: ['date'],\r\n                    });\r\n                if (index_names.indexOf(`sales_payment_methods_amount_paid`) === -1)\r\n                    yield queryInterface.addIndex('sales_payment_methods', {\r\n                        fields: ['amount_paid'],\r\n                    });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable('sales_payment_methods');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20220711162301-addDuplicateTimeoutSetting\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkInsert('settings', [\r\n                    {\r\n                        name: 'duplicate_record_timeout',\r\n                        module: 'System',\r\n                        value: \"10\"\r\n                    }\r\n                ]);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.bulkDelete('settings', {\r\n                    name: 'duplicate_record_timeout',\r\n                });\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20221007120257-addReminderTable\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.createTable('reminders', {\r\n                    id: {\r\n                        allowNull: false,\r\n                        autoIncrement: true,\r\n                        primaryKey: true,\r\n                        type: sequelize_1.INTEGER\r\n                    },\r\n                    type: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    dayOfWeek: {\r\n                        allowNull: false,\r\n                        type: sequelize_1.STRING,\r\n                        defaultValue: 'Monday'\r\n                    },\r\n                    hourOfDay: {\r\n                        allowNull: false,\r\n                        defaultValue: \"9\",\r\n                        type: sequelize_1.STRING\r\n                    },\r\n                    recipient: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: false\r\n                    },\r\n                    cc: {\r\n                        type: sequelize_1.STRING,\r\n                        allowNull: true,\r\n                        defaultValue: null\r\n                    }\r\n                });\r\n                //add the default data\r\n                yield queryInterface.bulkInsert('reminders', [\r\n                    {\r\n                        'type': 'upcoming refills',\r\n                        'dayOfWeek': 'Monday',\r\n                        'hourOfDay': '10',\r\n                        'recipient': 'none',\r\n                        'cc': ''\r\n                    }\r\n                ]);\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.dropTable('reminders');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20221220113200-addCreatedOnToVariousTables\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                const tables = [\"insurance_providers\",\r\n                    \"reminders\", \"role_permissions\", \"roles\"];\r\n                const transaction = yield sequelize_config_1.sequelize.transaction();\r\n                try {\r\n                    for (let index = 0; index < tables.length; index++) {\r\n                        const table = tables[index];\r\n                        //check if the column exists first\r\n                        const tableDescription = yield queryInterface.describeTable(table);\r\n                        if (!tableDescription.created_on) {\r\n                            yield queryInterface.addColumn(table, 'created_on', {\r\n                                defaultValue: sequelize_1.NOW,\r\n                                allowNull: true,\r\n                                type: sequelize_1.DATE,\r\n                            }, {\r\n                                transaction\r\n                            });\r\n                        }\r\n                    }\r\n                    transaction.commit();\r\n                }\r\n                catch (error) {\r\n                    transaction.rollback();\r\n                    throw new Error(error);\r\n                }\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                const tables = [\"insurance_providers\",\r\n                    \"reminders\", \"role_permissions\", \"roles\"];\r\n                tables.forEach((table) => __awaiter(this, void 0, void 0, function* () {\r\n                    yield queryInterface.removeColumn(table, 'created_on');\r\n                }));\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20221220114600-addUpdatedAtToVariousTables\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                const transaction = yield sequelize_config_1.sequelize.transaction();\r\n                try {\r\n                    for (let index = 0; index < index_1.default.length; index++) {\r\n                        const model = index_1.default[index];\r\n                        //check if the column exists first\r\n                        let tableDescription = yield queryInterface.describeTable(model.tableName);\r\n                        if (!tableDescription.updatedAt) {\r\n                            yield queryInterface.addColumn(model.tableName, 'updatedAt', {\r\n                                defaultValue: sequelize_1.NOW,\r\n                                allowNull: true,\r\n                                type: sequelize_1.DATE,\r\n                            }, {\r\n                                transaction\r\n                            });\r\n                        }\r\n                    }\r\n                    transaction.commit();\r\n                }\r\n                catch (error) {\r\n                    transaction.rollback();\r\n                    throw new Error(error);\r\n                }\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                index_1.default.forEach((model) => __awaiter(this, void 0, void 0, function* () {\r\n                    yield queryInterface.removeColumn(model.tableName, 'updatedAt');\r\n                }));\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20221220151900-addObjectIdToActivities\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                const tableDescription = yield queryInterface.describeTable(\"activities\");\r\n                if (!tableDescription.object_id) {\r\n                    yield queryInterface.addColumn(\"activities\", 'object_id', {\r\n                        type: sequelize_1.STRING,\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn(\"activities\", 'object_id');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20221221082200-addDeletedAtToAllTables\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                const transaction = yield sequelize_config_1.sequelize.transaction();\r\n                try {\r\n                    for (let index = 0; index < index_1.default.length; index++) {\r\n                        const model = index_1.default[index];\r\n                        //check if the column does not exist first\r\n                        let tableDescription = yield queryInterface.describeTable(model.tableName);\r\n                        if (!tableDescription.deletedAt) {\r\n                            yield queryInterface.addColumn(model.tableName, 'deletedAt', {\r\n                                allowNull: true,\r\n                                type: sequelize_1.DATE,\r\n                            }, {\r\n                                transaction\r\n                            });\r\n                        }\r\n                    }\r\n                    transaction.commit();\r\n                }\r\n                catch (error) {\r\n                    transaction.rollback();\r\n                    throw new Error(error);\r\n                }\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                index_1.default.forEach((model) => __awaiter(this, void 0, void 0, function* () {\r\n                    yield queryInterface.removeColumn(model.tableName, 'deletedAt');\r\n                }));\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20230314000000-addLastProductStockModified\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addColumn(Products_1.Products.tableName, 'last_stock_modification', {\r\n                    type: sequelize_1.STRING,\r\n                    defaultValue: null,\r\n                    allowNull: true\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.removeColumn(Products_1.Products.tableName, 'last_stock_modification');\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20230321000000-addIndexToStockValues\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addIndex(StockValues_1.StockValues.tableName, ['date'], {\r\n                    unique: true\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n            });\r\n        }\r\n    },\r\n    {\r\n        name: \"20230527000000-addUniqueIndexToDailyRecords\",\r\n        up({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                yield queryInterface.addIndex(DailyRecords_1.DailyRecords.tableName, ['date', 'shift'], {\r\n                    unique: true\r\n                });\r\n            });\r\n        },\r\n        down({ context: queryInterface }) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n            });\r\n        }\r\n    }\r\n];\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/config/migrations/migrationsList.ts?");

/***/ }),

/***/ "./src/server/config/permissions.ts":
/*!******************************************!*\
  !*** ./src/server/config/permissions.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.defaultSalesPersonPermissions = exports.allPermissions = exports.PERMISSION_VIEW_SALES_HISTORY = exports.PERMISSION_VIEW_SALES_REPORTS = exports.PERMISSION_VIEW_TRANSFER_HISTORY = exports.PERMISSION_ADJUST_STOCK = exports.PERMISSION_CREATE_SALES = exports.PERMISSION_DELETE_PURCHASES = exports.PERMISSION_DELETE_SALES_RECORDS = exports.PERMISSION_DELETE_TRANSFERS = exports.PERMISSION_EDIT_SALES = exports.PERMISSION_GIVE_DISCOUNT = exports.PERMISSION_MANAGE_ACCOUNTS = exports.PERMISSION_MANAGE_CUSTOMERS = exports.PERMISSION_MANAGE_INVENTORY = exports.PERMISSION_MANAGE_SETTINGS = exports.PERMISSION_MANAGE_STAFF = exports.PERMISSION_MANAGE_VENDORS = exports.PERMISSION_RECEIVE_PURCHASES = exports.PERMISSION_RECEIVE_TRANSFERS = exports.PERMISSION_RETURN_SOLD_ITEMS = exports.PERMISSION_TRANSFER_ITEMS = exports.PERMISSION_VIEW_ACCOUNTS = exports.PERMISSION_VIEW_END_OF_DAY_REPORT = exports.PERMISSION_VIEW_INVENTORY = exports.PERMISSION_VIEW_PURCHASE_HISTORY = exports.PERMISSION_VIEW_USER_ACTIVITIES = void 0;\r\nexports.PERMISSION_VIEW_USER_ACTIVITIES = \"View Sales History\";\r\nexports.PERMISSION_VIEW_PURCHASE_HISTORY = \"View Purchase History\";\r\nexports.PERMISSION_VIEW_INVENTORY = \"View Inventory\";\r\nexports.PERMISSION_VIEW_END_OF_DAY_REPORT = \"View End Of Day Report\";\r\nexports.PERMISSION_VIEW_ACCOUNTS = \"View Accounts\";\r\nexports.PERMISSION_TRANSFER_ITEMS = \"Transfer Items\";\r\nexports.PERMISSION_RETURN_SOLD_ITEMS = \"Return Sold Items\";\r\nexports.PERMISSION_RECEIVE_TRANSFERS = \"Receive Transfers\";\r\nexports.PERMISSION_RECEIVE_PURCHASES = \"Receive Purchases\";\r\nexports.PERMISSION_MANAGE_VENDORS = \"Manage Vendors\";\r\nexports.PERMISSION_MANAGE_STAFF = \"Manage Staff\";\r\nexports.PERMISSION_MANAGE_SETTINGS = \"Manage Settings\";\r\nexports.PERMISSION_MANAGE_INVENTORY = \"Manage Inventory\";\r\nexports.PERMISSION_MANAGE_CUSTOMERS = \"Manage Customers\";\r\nexports.PERMISSION_MANAGE_ACCOUNTS = \"Manage Accounts\";\r\nexports.PERMISSION_GIVE_DISCOUNT = \"Give Discount\";\r\nexports.PERMISSION_EDIT_SALES = \"Edit Sales\";\r\nexports.PERMISSION_DELETE_TRANSFERS = \"Delete Transfers\";\r\nexports.PERMISSION_DELETE_SALES_RECORDS = \"Sales Records\";\r\nexports.PERMISSION_DELETE_PURCHASES = \"Delete Purchases\";\r\nexports.PERMISSION_CREATE_SALES = \"Create Sales\";\r\nexports.PERMISSION_ADJUST_STOCK = \"Adjust Stock\";\r\nexports.PERMISSION_VIEW_TRANSFER_HISTORY = \"View Transfer History\";\r\nexports.PERMISSION_VIEW_SALES_REPORTS = \"View Sales Reports\";\r\nexports.PERMISSION_VIEW_SALES_HISTORY = \"View Sales History\";\r\nconst SETTING_DUPLICATE_RECORD_TIMEOUT = \"duplicate_record_timeout\";\r\nconst STRING_NO_UPCOMING_REFILLS_FOUND = \"No upcoming refills found\";\r\nexports.allPermissions = new Map(Object.entries({\r\n    PERMISSION_VIEW_SALES_HISTORY: {\r\n        name: exports.PERMISSION_VIEW_SALES_HISTORY,\r\n        permission_id: 59,\r\n        description: 'view sales invoices'\r\n    },\r\n    PERMISSION_RETURN_SOLD_ITEMS: {\r\n        name: exports.PERMISSION_RETURN_SOLD_ITEMS,\r\n        permission_id: 60,\r\n        description: 'received items returned. This will alter stock levels'\r\n    },\r\n    PERMISSION_DELETE_SALES_RECORDS: {\r\n        name: exports.PERMISSION_DELETE_SALES_RECORDS,\r\n        permission_id: 61,\r\n        description: 'delete sales receipts. this erases the receipt from the database. it will affect stock levels and sales'\r\n    },\r\n    PERMISSION_VIEW_SALES_REPORTS: {\r\n        name: exports.PERMISSION_VIEW_SALES_REPORTS,\r\n        permission_id: 62,\r\n        description: 'View the monthly/daily sales reports page '\r\n    },\r\n    PERMISSION_VIEW_END_OF_DAY_REPORT: {\r\n        name: exports.PERMISSION_VIEW_END_OF_DAY_REPORT,\r\n        permission_id: 63,\r\n        description: 'view the end of day sales summary'\r\n    },\r\n    PERMISSION_TRANSFER_ITEMS: {\r\n        name: exports.PERMISSION_TRANSFER_ITEMS,\r\n        permission_id: 64,\r\n        description: 'transfer products to another branch. this will affect stock levels'\r\n    },\r\n    PERMISSION_RECEIVE_TRANSFERS: {\r\n        name: exports.PERMISSION_RECEIVE_TRANSFERS,\r\n        permission_id: 65,\r\n        description: 'receive items transferred from another branch. this will affect stock levels'\r\n    },\r\n    PERMISSION_VIEW_INVENTORY: {\r\n        name: exports.PERMISSION_VIEW_INVENTORY,\r\n        permission_id: 67,\r\n        description: 'view the products list, expiries, and stock-out'\r\n    },\r\n    PERMISSION_MANAGE_INVENTORY: {\r\n        name: exports.PERMISSION_MANAGE_INVENTORY,\r\n        permission_id: 68,\r\n        description: 'add a new product to the inventory/edit products, delete products'\r\n    },\r\n    PERMISSION_ADJUST_STOCK: {\r\n        name: exports.PERMISSION_ADJUST_STOCK,\r\n        permission_id: 72,\r\n        description: 'adjust the stock of products or initiate stock-taking'\r\n    },\r\n    PERMISSION_RECEIVE_PURCHASES: {\r\n        name: exports.PERMISSION_RECEIVE_PURCHASES,\r\n        permission_id: 73,\r\n        description: 'receive new purchases'\r\n    },\r\n    PERMISSION_VIEW_PURCHASE_HISTORY: {\r\n        name: exports.PERMISSION_VIEW_PURCHASE_HISTORY,\r\n        permission_id: 74,\r\n        description: 'view purchase history'\r\n    },\r\n    PERMISSION_CREATE_SALES: {\r\n        name: exports.PERMISSION_CREATE_SALES,\r\n        permission_id: 75,\r\n        description: 'make sales'\r\n    },\r\n    PERMISSION_DELETE_PURCHASES: {\r\n        name: exports.PERMISSION_DELETE_PURCHASES,\r\n        permission_id: 76,\r\n        description: 'delete purchases invoices. This will affect stock levels'\r\n    },\r\n    PERMISSION_MANAGE_VENDORS: {\r\n        name: exports.PERMISSION_MANAGE_VENDORS,\r\n        permission_id: 77,\r\n        description: 'add/delete vendors'\r\n    },\r\n    PERMISSION_VIEW_TRANSFER_HISTORY: {\r\n        name: exports.PERMISSION_VIEW_TRANSFER_HISTORY,\r\n        permission_id: 78,\r\n        description: 'view outgoing/incoming transfer history'\r\n    },\r\n    PERMISSION_DELETE_TRANSFERS: {\r\n        name: exports.PERMISSION_DELETE_TRANSFERS,\r\n        permission_id: 79,\r\n        description: 'elete transfer records. this will affect stock levels'\r\n    },\r\n    PERMISSION_VIEW_USER_ACTIVITIES: {\r\n        name: exports.PERMISSION_VIEW_USER_ACTIVITIES,\r\n        permission_id: 80,\r\n        description: 'view all activities by user and time'\r\n    },\r\n    PERMISSION_MANAGE_STAFF: {\r\n        name: exports.PERMISSION_MANAGE_STAFF,\r\n        permission_id: 81,\r\n        description: 'add/edit/delete users. Also can change a user role or permissions'\r\n    },\r\n    PERMISSION_MANAGE_CUSTOMERS: {\r\n        name: exports.PERMISSION_MANAGE_CUSTOMERS,\r\n        permission_id: 82,\r\n        description: 'add/edit/delete customers data.'\r\n    },\r\n    PERMISSION_MANAGE_SETTINGS: {\r\n        name: exports.PERMISSION_MANAGE_SETTINGS,\r\n        permission_id: 83,\r\n        description: 'edit company name, phone, address, etc'\r\n    },\r\n    PERMISSION_VIEW_ACCOUNTS: {\r\n        name: exports.PERMISSION_VIEW_ACCOUNTS,\r\n        permission_id: 84,\r\n        description: 'view accounts details/reports'\r\n    },\r\n    PERMISSION_MANAGE_ACCOUNTS: {\r\n        name: exports.PERMISSION_MANAGE_ACCOUNTS,\r\n        permission_id: 85,\r\n        description: 'delete/add expenses/accounts details/reports'\r\n    },\r\n    PERMISSION_GIVE_DISCOUNT: {\r\n        name: exports.PERMISSION_GIVE_DISCOUNT,\r\n        permission_id: 86,\r\n        description: 'offer discounts to clients during sales'\r\n    },\r\n    PERMISSION_EDIT_SALES: {\r\n        name: exports.PERMISSION_EDIT_SALES,\r\n        permission_id: 87,\r\n        description: 'edit a sales date, payment method, amount paid, customer and shift'\r\n    }\r\n}));\r\nexports.defaultSalesPersonPermissions = [\r\n    59, 62, 63, 67, 74, 80, 75\r\n];\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/config/permissions.ts?");

/***/ }),

/***/ "./src/server/config/sequelize-config.ts":
/*!***********************************************!*\
  !*** ./src/server/config/sequelize-config.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.sequelize = exports.authenticate = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst index_1 = __importDefault(__webpack_require__(/*! ../models/index */ \"./src/server/models/index.ts\"));\r\nconst config_1 = __webpack_require__(/*! ./config */ \"./src/server/config/config.ts\");\r\nconst Branches_1 = __webpack_require__(/*! ../models/Branches */ \"./src/server/models/Branches.ts\");\r\nconst CustomerDiagnostics_1 = __webpack_require__(/*! ../models/CustomerDiagnostics */ \"./src/server/models/CustomerDiagnostics.ts\");\r\nconst Customers_1 = __webpack_require__(/*! ../models/Customers */ \"./src/server/models/Customers.ts\");\r\nconst Permissions_1 = __webpack_require__(/*! ../models/Permissions */ \"./src/server/models/Permissions.ts\");\r\nconst Products_1 = __webpack_require__(/*! ../models/Products */ \"./src/server/models/Products.ts\");\r\nconst PurchaseDetails_1 = __webpack_require__(/*! ../models/PurchaseDetails */ \"./src/server/models/PurchaseDetails.ts\");\r\nconst Purchases_1 = __webpack_require__(/*! ../models/Purchases */ \"./src/server/models/Purchases.ts\");\r\nconst ReceivedTransferDetails_1 = __webpack_require__(/*! ../models/ReceivedTransferDetails */ \"./src/server/models/ReceivedTransferDetails.ts\");\r\nconst ReceivedTransfers_1 = __webpack_require__(/*! ../models/ReceivedTransfers */ \"./src/server/models/ReceivedTransfers.ts\");\r\nconst Refills_1 = __webpack_require__(/*! ../models/Refills */ \"./src/server/models/Refills.ts\");\r\nconst Roles_1 = __webpack_require__(/*! ../models/Roles */ \"./src/server/models/Roles.ts\");\r\nconst RolePermissions_1 = __webpack_require__(/*! ../models/RolePermissions */ \"./src/server/models/RolePermissions.ts\");\r\nconst Sales_1 = __webpack_require__(/*! ../models/Sales */ \"./src/server/models/Sales.ts\");\r\nconst SalesDetails_1 = __webpack_require__(/*! ../models/SalesDetails */ \"./src/server/models/SalesDetails.ts\");\r\nconst StockAdjustment_1 = __webpack_require__(/*! ../models/StockAdjustment */ \"./src/server/models/StockAdjustment.ts\");\r\nconst StockAdjustmentPending_1 = __webpack_require__(/*! ../models/StockAdjustmentPending */ \"./src/server/models/StockAdjustmentPending.ts\");\r\nconst TransferDetails_1 = __webpack_require__(/*! ../models/TransferDetails */ \"./src/server/models/TransferDetails.ts\");\r\nconst Transfers_1 = __webpack_require__(/*! ../models/Transfers */ \"./src/server/models/Transfers.ts\");\r\nconst Users_1 = __webpack_require__(/*! ../models/Users */ \"./src/server/models/Users.ts\");\r\nconst Vendors_1 = __webpack_require__(/*! ../models/Vendors */ \"./src/server/models/Vendors.ts\");\r\nconst Activities_1 = __webpack_require__(/*! ../models/Activities */ \"./src/server/models/Activities.ts\");\r\nconst IncomingPayments_1 = __webpack_require__(/*! ../models/IncomingPayments */ \"./src/server/models/IncomingPayments.ts\");\r\nconst logger_1 = __webpack_require__(/*! ./logger */ \"./src/server/config/logger.ts\");\r\nconst salesHelper_1 = __webpack_require__(/*! ../helpers/salesHelper */ \"./src/server/helpers/salesHelper.ts\");\r\nconst userHelper_1 = __webpack_require__(/*! ../helpers/userHelper */ \"./src/server/helpers/userHelper.ts\");\r\n// const databaseNames: { [key:string]:string} = {test:'test', development: 'dev'}\r\n/**\r\n * SequelizeConnectionError: This error is thrown if Sequelize is unable to establish a connection to the database. This could be due to various reasons such as an incorrect database name, hostname, port, or authentication credentials.\r\n\r\nSequelizeHostNotReachableError: This error is thrown if the database host is not reachable. This could be due to a network issue or the database server being down.\r\n\r\nSequelizeAccessDeniedError: This error is thrown if the authentication credentials provided are incorrect. This could be due to an incorrect username, password, or database permissions.\r\n\r\nSequelizeConnectionRefusedError: This error is thrown if the database server refuses the connection. This could be due to a configuration issue on the server or an issue with the database software itself.\r\n\r\nSequelizeConnectionTimedOutError: This error is thrown if the connection times out while waiting for a response from the database server. This could be due to a network issue or a high load on the database server.\r\n\r\nSequelizeConnectionAcquireTimeoutError: This error is thrown if Sequelize is unable to acquire a connection from the pool within the specified timeout period. This could be due to a high load on the database server or a misconfiguration of the connection pool.\r\n\r\nSequelizeInvalidConnectionError: This error is thrown if the connection parameters provided are invalid. This could be due to a typo in the connection string or an incorrect configuration of the database server.\r\nUnable to connect to the database:  ConnectionError [SequelizeConnectionError]: (conn=32, no: 1049, SQLState: 42000) Unknown database 'test'\r\ncode: 'ER_BAD_DB_ERROR'\r\nSequelizeDatabaseError: (conn=60, no: 1046, SQLState: 3D000) No database selected\r\n*/\r\nconst connection = new sequelize_typescript_1.Sequelize(config_1.sqliteConfig[\"development\"]);\r\nexports.sequelize = connection;\r\nfunction authenticate() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            yield connection.authenticate();\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.authenticate = authenticate;\r\nconnection.addModels(index_1.default);\r\nPermissions_1.Permissions.belongsToMany(Roles_1.Roles, {\r\n    through: RolePermissions_1.RolePermissions,\r\n    foreignKey: 'permission_id'\r\n});\r\nRoles_1.Roles.belongsToMany(Permissions_1.Permissions, {\r\n    through: RolePermissions_1.RolePermissions,\r\n    foreignKey: 'role_id'\r\n});\r\nRoles_1.Roles.hasMany(Users_1.Users, {\r\n    foreignKey: 'role_id'\r\n});\r\nCustomers_1.Customers.hasMany(CustomerDiagnostics_1.CustomerDiagnostics, {\r\n    foreignKey: 'customer',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE'\r\n});\r\nCustomerDiagnostics_1.CustomerDiagnostics.belongsTo(Customers_1.Customers, {\r\n    foreignKey: 'customer'\r\n});\r\nCustomers_1.Customers.hasMany(Sales_1.Sales, {\r\n    foreignKey: 'customer',\r\n    onDelete: 'SET NULL',\r\n    onUpdate: 'CASCADE'\r\n});\r\nSales_1.Sales.belongsTo(Customers_1.Customers, {\r\n    foreignKey: 'customer'\r\n});\r\nProducts_1.Products.hasMany(SalesDetails_1.SalesDetails, {\r\n    foreignKey: 'product',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nSalesDetails_1.SalesDetails.belongsTo(Products_1.Products, {\r\n    foreignKey: 'product'\r\n});\r\nProducts_1.Products.hasMany(PurchaseDetails_1.PurchaseDetails, {\r\n    foreignKey: 'product',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nPurchaseDetails_1.PurchaseDetails.belongsTo(Products_1.Products, {\r\n    foreignKey: 'product'\r\n});\r\nProducts_1.Products.hasMany(TransferDetails_1.TransferDetails, {\r\n    foreignKey: 'product',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nTransferDetails_1.TransferDetails.belongsTo(Products_1.Products, {\r\n    foreignKey: 'product'\r\n});\r\nProducts_1.Products.hasMany(ReceivedTransferDetails_1.ReceivedTransferDetails, {\r\n    foreignKey: 'product',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nReceivedTransferDetails_1.ReceivedTransferDetails.belongsTo(Products_1.Products, {\r\n    foreignKey: 'product'\r\n});\r\nProducts_1.Products.hasMany(StockAdjustment_1.StockAdjustment, {\r\n    foreignKey: 'product',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nStockAdjustment_1.StockAdjustment.belongsTo(Products_1.Products, {\r\n    foreignKey: 'product'\r\n});\r\nProducts_1.Products.hasMany(StockAdjustmentPending_1.StockAdjustmentPending, {\r\n    foreignKey: 'product',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE'\r\n});\r\nStockAdjustmentPending_1.StockAdjustmentPending.belongsTo(Products_1.Products, {\r\n    foreignKey: 'product'\r\n});\r\nPurchases_1.Purchases.hasMany(PurchaseDetails_1.PurchaseDetails, {\r\n    foreignKey: 'code',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE',\r\n    sourceKey: 'code'\r\n});\r\nPurchaseDetails_1.PurchaseDetails.belongsTo(Purchases_1.Purchases, {\r\n    foreignKey: 'code',\r\n    targetKey: 'code',\r\n});\r\nVendors_1.Vendors.hasMany(Purchases_1.Purchases, {\r\n    foreignKey: 'vendor',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nPurchases_1.Purchases.belongsTo(Vendors_1.Vendors, {\r\n    foreignKey: 'vendor'\r\n});\r\nReceivedTransfers_1.ReceivedTransfers.hasMany(ReceivedTransferDetails_1.ReceivedTransferDetails, {\r\n    foreignKey: 'code',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE'\r\n});\r\nReceivedTransferDetails_1.ReceivedTransferDetails.belongsTo(ReceivedTransfers_1.ReceivedTransfers, {\r\n    foreignKey: 'code'\r\n});\r\nBranches_1.Branches.hasMany(ReceivedTransfers_1.ReceivedTransfers, {\r\n    foreignKey: 'sender',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nReceivedTransfers_1.ReceivedTransfers.belongsTo(Branches_1.Branches, {\r\n    foreignKey: 'sender'\r\n});\r\nCustomers_1.Customers.hasMany(Refills_1.Refills, {\r\n    foreignKey: \"customer_id\",\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE'\r\n});\r\nRefills_1.Refills.belongsTo(Customers_1.Customers, {\r\n    foreignKey: \"customer_id\"\r\n});\r\nSales_1.Sales.hasMany(SalesDetails_1.SalesDetails, {\r\n    foreignKey: 'code',\r\n    sourceKey: 'code',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE',\r\n    as: SalesDetails_1.SalesDetails.tableName\r\n});\r\nSalesDetails_1.SalesDetails.belongsTo(Sales_1.Sales, {\r\n    foreignKey: 'code',\r\n    targetKey: 'code',\r\n    as: Sales_1.Sales.tableName\r\n});\r\nCustomers_1.Customers.hasMany(Sales_1.Sales, {\r\n    foreignKey: 'customer',\r\n    onDelete: 'SET NULL',\r\n    onUpdate: 'CASCADE'\r\n});\r\nSales_1.Sales.belongsTo(Customers_1.Customers, {\r\n    foreignKey: 'customer'\r\n});\r\nTransfers_1.Transfers.hasMany(TransferDetails_1.TransferDetails, {\r\n    foreignKey: 'code',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE'\r\n});\r\nTransferDetails_1.TransferDetails.belongsTo(Transfers_1.Transfers, {\r\n    foreignKey: 'code',\r\n    targetKey: 'code'\r\n});\r\nBranches_1.Branches.hasMany(Transfers_1.Transfers, {\r\n    foreignKey: 'recipient',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nTransfers_1.Transfers.belongsTo(Branches_1.Branches, {\r\n    foreignKey: 'recipient'\r\n});\r\nUsers_1.Users.hasMany(StockAdjustmentPending_1.StockAdjustmentPending, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE'\r\n});\r\nStockAdjustmentPending_1.StockAdjustmentPending.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(StockAdjustment_1.StockAdjustment, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE'\r\n});\r\nStockAdjustment_1.StockAdjustment.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(Activities_1.Activities, {\r\n    foreignKey: 'user_id',\r\n    onDelete: 'CASCADE',\r\n    onUpdate: 'CASCADE'\r\n});\r\nActivities_1.Activities.belongsTo(Users_1.Users, {\r\n    foreignKey: 'user_id'\r\n});\r\nUsers_1.Users.hasMany(IncomingPayments_1.IncomingPayments, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nIncomingPayments_1.IncomingPayments.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(PurchaseDetails_1.PurchaseDetails, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nPurchaseDetails_1.PurchaseDetails.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(Purchases_1.Purchases, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nPurchases_1.Purchases.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(ReceivedTransferDetails_1.ReceivedTransferDetails, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nReceivedTransferDetails_1.ReceivedTransferDetails.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(ReceivedTransfers_1.ReceivedTransfers, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nReceivedTransfers_1.ReceivedTransfers.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(Refills_1.Refills, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nRefills_1.Refills.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(Sales_1.Sales, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nSales_1.Sales.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(SalesDetails_1.SalesDetails, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nSalesDetails_1.SalesDetails.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(TransferDetails_1.TransferDetails, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nTransferDetails_1.TransferDetails.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nUsers_1.Users.hasMany(Transfers_1.Transfers, {\r\n    foreignKey: 'created_by',\r\n    onDelete: 'RESTRICT',\r\n    onUpdate: 'CASCADE'\r\n});\r\nTransfers_1.Transfers.belongsTo(Users_1.Users, {\r\n    foreignKey: 'created_by'\r\n});\r\nSales_1.Sales.addHook('afterFind', (results) => {\r\n    if (Array.isArray(results)) {\r\n        results.forEach((result) => {\r\n            (0, salesHelper_1.flattenNestedProperties)(result);\r\n        });\r\n    }\r\n    else {\r\n        (0, salesHelper_1.flattenNestedProperties)(results);\r\n    }\r\n});\r\nSalesDetails_1.SalesDetails.addHook('afterFind', (results) => {\r\n    if (Array.isArray(results)) {\r\n        results.forEach((result) => {\r\n            (0, salesHelper_1.formatDateTime)(result);\r\n        });\r\n    }\r\n    else {\r\n        (0, salesHelper_1.formatDateTime)(results);\r\n    }\r\n});\r\nUsers_1.Users.addHook('afterFind', (results) => {\r\n    if (Array.isArray(results)) {\r\n        results.forEach((result) => {\r\n            (0, userHelper_1.flattenNestedUserProperties)(result);\r\n        });\r\n    }\r\n    else {\r\n        (0, userHelper_1.flattenNestedUserProperties)(results);\r\n    }\r\n});\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/config/sequelize-config.ts?");

/***/ }),

/***/ "./src/server/controllers/admin.controller.ts":
/*!****************************************************!*\
  !*** ./src/server/controllers/admin.controller.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst logger_1 = __webpack_require__(/*! ../config/logger */ \"./src/server/config/logger.ts\");\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst router = express_1.default.Router();\r\nconst admin_service_1 = __webpack_require__(/*! ../services/admin.service */ \"./src/server/services/admin.service.ts\");\r\nconst auth_1 = __webpack_require__(/*! ../utils/auth */ \"./src/server/utils/auth.ts\");\r\nconst constants_1 = __webpack_require__(/*! ../../utils/constants */ \"./src/utils/constants.ts\");\r\nrouter.get(\"/\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    res.status(200).send(\"welcome!\");\r\n}));\r\nrouter.get('/getAppName', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = { name: constants_1.constants.appname, long_name: constants_1.constants.appLongName };\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/login', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const user = yield (0, admin_service_1.login_function)(req.body);\r\n        res.status(201).json(user);\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        // await helper.closeConnection();\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/admin_login', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const token = yield (0, admin_service_1.server_admin_login_function)(req.body);\r\n        res.status(201).json(token);\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/resetAdminLogin', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const token = yield (0, admin_service_1.resetAdminPassword)();\r\n        res.status(201).json(token);\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/resetAdminPassword', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        const token = yield (0, admin_service_1.doResetAdminPassword)(req.body);\r\n        res.status(201).json(token);\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/getBranches', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_branches_function)();\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/getLogo', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_logo_function)();\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error(error);\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/saveBranch', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.save_branch_function)(req.body);\r\n        res.json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error(error);\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/getInsurers', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_insurers_function)();\r\n        res.json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error(error);\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/settings', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.getSettings)();\r\n        res.json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/allPermissions', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_permissions_function)();\r\n        res.json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/saveSettings', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        console.log(req.body);\r\n        let data = yield (0, admin_service_1.saveSettings)(req.body);\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/saveRole', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.addRole)(req.body);\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/getRoles', auth_1.hasPermission, auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_roles_function)({});\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/getUsers', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_users_function)({});\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/user/:id', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_user_function)({ id: req.params.id });\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/role/:id', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_role_function)({ id: req.params.id });\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/rolePermissions/:id', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.get_role_permissions_function)({ id: req.params.id });\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.delete('/rolePermissions/:role_id/:permission_id', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.delete_role_permission_function)({\r\n            role_id: req.params.role_id, permission_id: req.params.permission_id,\r\n            user_id: req.user_id\r\n        });\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/saveUser', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.save_user_function)(req.body);\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.delete('/user/:id', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.delete_user_function)({\r\n            id: req.params.id,\r\n            user_id: ''\r\n        });\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.delete('/role/:id/', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, admin_service_1.delete_role_function)({\r\n            id: req.params.id,\r\n            user_id: ''\r\n        });\r\n        res.status(200).json(data);\r\n    }\r\n    catch (error) {\r\n        logger_1.logger.error({ message: error });\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nexports[\"default\"] = router;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/controllers/admin.controller.ts?");

/***/ }),

/***/ "./src/server/controllers/customer.controller.ts":
/*!*******************************************************!*\
  !*** ./src/server/controllers/customer.controller.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst customer_service_1 = __webpack_require__(/*! ../services/customer.service */ \"./src/server/services/customer.service.ts\");\r\nconst auth_1 = __webpack_require__(/*! ../utils/auth */ \"./src/server/utils/auth.ts\");\r\nconst router = express_1.default.Router();\r\nrouter.get(\"/\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    res.status(200).send(\"welcome!\");\r\n}));\r\n/**\r\n * get all customers. also for search\r\n */\r\nrouter.get('/getList', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._getList)(req.query);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/save', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._save)(req.body);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.delete('/delete/:id', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._delete)({ id: req.params.id, user_id: req.user_id });\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/findById', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._findById)(req.query);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/saveDiagnostics', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._saveDiagnostics)(req.body);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\n/**\r\n * reuse for findDiagnosticsBetweenDates\r\n */\r\nrouter.get('/getCustomerDiagnosticsList', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._getCustomerDiagnosticsList)(req.query);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/getDiagnosticsList', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._getDiagnosticsList)(req.query);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/addRefill', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._addRefill)(req.body);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.post('/addMultipleRefill', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._addMultipleRefill)(req.body);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.delete('/deleteRefill/:id', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._deleteRefill)({ id: req.params.id, user_id: req.user_id });\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\n/**reuse for getCustomerRefillList and findRefillBetweenDates */\r\nrouter.get('/getRefillList', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._getRefillList)(req.query);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nrouter.get('/countRefill', auth_1.hasPermission, (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let data = yield (0, customer_service_1._countRefills)(req.query);\r\n        res.status(201).json(data);\r\n    }\r\n    catch (error) {\r\n        res.status(500).json({ status: '-1', data: null, message: error });\r\n    }\r\n}));\r\nexports[\"default\"] = router;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/controllers/customer.controller.ts?");

/***/ }),

/***/ "./src/server/controllers/product.controller.ts":
/*!******************************************************!*\
  !*** ./src/server/controllers/product.controller.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst router = express_1.default.Router();\r\nrouter.get(\"/\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    res.status(200).send(\"welcome!\");\r\n}));\r\nexports[\"default\"] = router;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/controllers/product.controller.ts?");

/***/ }),

/***/ "./src/server/controllers/purchase.controller.ts":
/*!*******************************************************!*\
  !*** ./src/server/controllers/purchase.controller.ts ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst router = express_1.default.Router();\r\nrouter.get(\"/\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    res.status(200).send(\"welcome!\");\r\n}));\r\nexports[\"default\"] = router;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/controllers/purchase.controller.ts?");

/***/ }),

/***/ "./src/server/controllers/sale.controller.ts":
/*!***************************************************!*\
  !*** ./src/server/controllers/sale.controller.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst router = express_1.default.Router();\r\nrouter.get(\"/\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    res.status(200).send(\"welcome!\");\r\n}));\r\nexports[\"default\"] = router;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/controllers/sale.controller.ts?");

/***/ }),

/***/ "./src/server/controllers/transfers.controller.ts":
/*!********************************************************!*\
  !*** ./src/server/controllers/transfers.controller.ts ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst router = express_1.default.Router();\r\nrouter.get(\"/\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    res.status(200).send(\"welcome!\");\r\n}));\r\nexports[\"default\"] = router;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/controllers/transfers.controller.ts?");

/***/ }),

/***/ "./src/server/controllers/users.controller.ts":
/*!****************************************************!*\
  !*** ./src/server/controllers/users.controller.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst router = express_1.default.Router();\r\nrouter.get(\"/\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    res.status(200).send(\"welcome!\");\r\n}));\r\nexports[\"default\"] = router;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/controllers/users.controller.ts?");

/***/ }),

/***/ "./src/server/controllers/vendor.controller.ts":
/*!*****************************************************!*\
  !*** ./src/server/controllers/vendor.controller.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst router = express_1.default.Router();\r\nrouter.get(\"/\", (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    res.status(200).send(\"welcome!\");\r\n}));\r\nexports[\"default\"] = router;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/controllers/vendor.controller.ts?");

/***/ }),

/***/ "./src/server/helpers/dateHelper.ts":
/*!******************************************!*\
  !*** ./src/server/helpers/dateHelper.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setDates = exports.getWeekNumber = exports.addTimePeriod = exports.subtractTimePeriod = exports.formatDate = exports.timeBetweenDates = exports.compareDates = exports.getThisYear = exports.getLastDayOfMonth = exports.getAge = exports.getMonthsNoPad = exports.getMonthsObjects = exports.getDatesBetween = exports.nth = exports.getDays = exports.getMonths = exports.getDayName = exports.getMonthName = exports.padZero = exports.getToday = exports.formatDateTime = exports.addDaystoDate = exports.getFirstDayOfWeek = void 0;\r\n/**\r\n * get the date of the first sunday of the week\r\n * @param {number} weekNum the week number in the year\r\n * @param {number} year the current year\r\n * @returns  {Date} the date of the first day of the week\r\n */\r\nfunction getFirstDayOfWeek(weekNum, year) {\r\n    let firstDay = new Date(year, 0, (1 + (weekNum - 1) * 7));\r\n    while (firstDay.getDay() !== 0) {\r\n        firstDay.setDate(firstDay.getDate() - 1);\r\n    }\r\n    return firstDay;\r\n}\r\nexports.getFirstDayOfWeek = getFirstDayOfWeek;\r\n/**\r\n * add a number of days to a given date and return the\r\n * new date\r\n */\r\nfunction addDaystoDate(days, date) {\r\n    let dat = new Date(date);\r\n    dat.setDate(dat.getDate() + days);\r\n    return dat;\r\n}\r\nexports.addDaystoDate = addDaystoDate;\r\n/**\r\n * format the datetime and return the string without the T\r\n * e.g. 2022-11-15T04:05:00 -> 2022-11-15 04:05:00\r\n * @param {string} date the date\r\n * @returns {string}\r\n */\r\nfunction formatDateTime(date) {\r\n    return (new Date(date)).toISOString().slice(0, 19).replace(\"T\", \" \");\r\n}\r\nexports.formatDateTime = formatDateTime;\r\n/**\r\n * format a date and return the string representation. timestamp = yyyy-mm-dd hh-ii-ss\r\n * timestamp_string = yyyymmddhhiiss\r\n * month = mm\r\n * default = yyyy-mm-dd\r\n * @param type string a format type. options are timestamp, timestamp_string, month, or empty string ''\r\n * @param date\r\n * @returns {string}\r\n */\r\nfunction getToday(type = '', date = null) {\r\n    let today = new Date();\r\n    if (date != null) {\r\n        today = new Date(date);\r\n    }\r\n    let dd = today.getDate();\r\n    let mm = today.getMonth() + 1; //January is 0!\r\n    let yyyy = today.getFullYear();\r\n    let dd_string;\r\n    if (dd < 10) {\r\n        dd_string = '0' + dd;\r\n    }\r\n    else {\r\n        dd_string = dd.toString();\r\n    }\r\n    let mm_string;\r\n    if (mm < 10) {\r\n        mm_string = '0' + mm;\r\n    }\r\n    else {\r\n        mm_string = mm.toString();\r\n    }\r\n    let hrs = \"\", mins = \"\", secs = \"\";\r\n    hrs = padZero(today.getHours());\r\n    mins = padZero(today.getMinutes());\r\n    secs = padZero(today.getSeconds());\r\n    switch (type) {\r\n        case \"timestamp\":\r\n            return yyyy + '-' + mm_string + '-' + dd_string + ' ' + hrs + ':' + mins + ':' + secs;\r\n        case \"timestamp_string\":\r\n            return yyyy + '' + mm_string + '' + dd_string + '' + hrs + '' + mins + '' + secs;\r\n        case \"month\":\r\n            return mm_string;\r\n        case \"time\":\r\n            return hrs + ':' + mins + ':' + secs;\r\n        default:\r\n            return yyyy + '-' + mm_string + '-' + dd_string;\r\n    }\r\n    // mm_string+'/'+dd_string+'/'+yyyy;\r\n}\r\nexports.getToday = getToday;\r\n/**\r\n * add a zero to a month number up to 2 digits\r\n * @param m string the month number as a string or int\r\n * @returns string\r\n */\r\nfunction padZero(m) {\r\n    let str = m.toString();\r\n    return str.padStart(2, \"0\");\r\n}\r\nexports.padZero = padZero;\r\n/**\r\n * get the name of the month using the number\r\n * @param m the month number. January is 1, december is 12\r\n * @returns\r\n */\r\nfunction getMonthName(m) {\r\n    try {\r\n        let monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ];\r\n        if (monthNames[m - 1] == undefined) {\r\n            throw new Error(\"Number not found\");\r\n        }\r\n        return monthNames[m - 1];\r\n    }\r\n    catch (error) {\r\n        throw new Error(\"Number not found\");\r\n    }\r\n}\r\nexports.getMonthName = getMonthName;\r\n/**\r\n * get the name of a day using the number\r\n * @param {number} d the day number. sunday is 0... saturday is 6\r\n * @returns {string}\r\n */\r\nfunction getDayName(d) {\r\n    try {\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        if (days[d] == undefined) {\r\n            throw new Error(\"Number not found\");\r\n        }\r\n        return days[d];\r\n    }\r\n    catch (error) {\r\n        throw new Error(\"Number not found\");\r\n    }\r\n}\r\nexports.getDayName = getDayName;\r\n/**\r\n * get the list of month names\r\n * @returns {string[]}\r\n */\r\nfunction getMonths() {\r\n    return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n}\r\nexports.getMonths = getMonths;\r\n/**\r\n * get the list of days starting from sunday\r\n * @returns {string[]} the list of day names starting from Sunday\r\n */\r\nfunction getDays() {\r\n    return [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n}\r\nexports.getDays = getDays;\r\n/**\r\n * get the ordinal of a number. e.g. 1st, 2nd, 3rd, 4th\r\n * @param {number} d the day number\r\n * @returns {string}\r\n */\r\nfunction nth(d) {\r\n    if (d > 3 && d < 21)\r\n        return 'th';\r\n    switch (d % 10) {\r\n        case 1: return \"st\";\r\n        case 2: return \"nd\";\r\n        case 3: return \"rd\";\r\n        default: return \"th\";\r\n    }\r\n}\r\nexports.nth = nth;\r\n;\r\n/**\r\n * get the list of days between 2 specified dates\r\n * @param {string|Date} startDate the start date - string or date\r\n * @param {string | Date} stopDate the end date - string or date\r\n * @returns {string[]}\r\n */\r\nfunction getDatesBetween(startDate, stopDate) {\r\n    let dateArray = [];\r\n    let currentDate = typeof (startDate) == 'string' ? new Date(startDate) : startDate;\r\n    let endDate = typeof (stopDate) == 'string' ? new Date(stopDate) : stopDate;\r\n    while (currentDate <= endDate) {\r\n        dateArray.push(getToday('', currentDate));\r\n        currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n}\r\nexports.getDatesBetween = getDatesBetween;\r\n/**\r\n * return the list of months from January to December as objects with id, name\r\n * @returns {Month[]}\r\n */\r\nfunction getMonthsObjects() {\r\n    let months = [];\r\n    months.push({ id: \"01\", name: 'January' });\r\n    months.push({ id: \"02\", name: 'February' });\r\n    months.push({ id: \"03\", name: 'March' });\r\n    months.push({ id: \"04\", name: 'April' });\r\n    months.push({ id: \"05\", name: 'May' });\r\n    months.push({ id: \"06\", name: 'June' });\r\n    months.push({ id: \"07\", name: 'July' });\r\n    months.push({ id: \"08\", name: 'August' });\r\n    months.push({ id: \"09\", name: 'September' });\r\n    months.push({ id: \"10\", name: 'October' });\r\n    months.push({ id: \"11\", name: 'November' });\r\n    months.push({ id: \"12\", name: 'December' });\r\n    return months;\r\n}\r\nexports.getMonthsObjects = getMonthsObjects;\r\n//remove the 0's from the month ids\r\n/**\r\n * get the list of month objects but with no zero padding for the id\r\n * @returns {Month[]}\r\n */\r\nfunction getMonthsNoPad() {\r\n    let months = [];\r\n    months.push({ id: \"1\", name: 'January' });\r\n    months.push({ id: \"2\", name: 'February' });\r\n    months.push({ id: \"3\", name: 'March' });\r\n    months.push({ id: \"4\", name: 'April' });\r\n    months.push({ id: \"5\", name: 'May' });\r\n    months.push({ id: \"6\", name: 'June' });\r\n    months.push({ id: \"7\", name: 'July' });\r\n    months.push({ id: \"8\", name: 'August' });\r\n    months.push({ id: \"9\", name: 'September' });\r\n    months.push({ id: \"10\", name: 'October' });\r\n    months.push({ id: \"11\", name: 'November' });\r\n    months.push({ id: \"12\", name: 'December' });\r\n    return months;\r\n}\r\nexports.getMonthsNoPad = getMonthsNoPad;\r\n/**\r\n * get the number of years past from the given date\r\n * @param dateString the date of birth\r\n * @returns {number} the number of years up to today\r\n */\r\nfunction getAge(dateString) {\r\n    let today = new Date();\r\n    let birthDate = new Date(dateString);\r\n    let age = today.getFullYear() - birthDate.getFullYear();\r\n    let m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n        age--;\r\n    }\r\n    return age;\r\n}\r\nexports.getAge = getAge;\r\n/**\r\n * get the day component of the ending date of the month\r\n* @param monthNumber January = 1, December  = 12\r\n * @returns {Number}\r\n */\r\nfunction getLastDayOfMonth(monthNumber) {\r\n    let month = typeof (monthNumber) == 'string' ? parseInt(monthNumber) : monthNumber;\r\n    let thirty_days = [9, 4, 6, 11];\r\n    if (month == 2) {\r\n        return 28;\r\n    }\r\n    else if (thirty_days.indexOf(month) != -1) {\r\n        return 30;\r\n    }\r\n    else {\r\n        return 31;\r\n    }\r\n}\r\nexports.getLastDayOfMonth = getLastDayOfMonth;\r\n/**\r\n * get the current year\r\n * @returns {number}\r\n */\r\nfunction getThisYear() {\r\n    return new Date().getFullYear();\r\n}\r\nexports.getThisYear = getThisYear;\r\n/**\r\n * check if date1 is before, after or same as date2. date2 defaults to current day\r\n * @param date1 the first date\r\n * @param date2 the second date\r\n * @returns {string} 'before'|'after'|'same'\r\n */\r\nfunction compareDates(date1, date2) {\r\n    let d1 = new Date(date1);\r\n    let d2 = date2 == undefined ? new Date() : new Date(date2);\r\n    if (d1 < d2) {\r\n        return 'before';\r\n    }\r\n    else if (d1 > d2) {\r\n        return 'after';\r\n    }\r\n    else {\r\n        return 'same';\r\n    }\r\n}\r\nexports.compareDates = compareDates;\r\n/**\r\n * get the number of days, seconds, minutes between 2 dates\r\n * @param {string} date1 the date we're interested in\r\n * @param {string} date2 defaults to the current day\r\n * @param {string} format defaults to seconds. could be days, minutes, seconds\r\n * @returns {number} the number of {format}s between the dats\r\n */\r\nfunction timeBetweenDates(date1, date2 = '', format = 'seconds') {\r\n    let d1 = new Date(date1);\r\n    let d2 = new Date();\r\n    if (date2 != '') {\r\n        d2 = new Date(date2);\r\n    }\r\n    switch (format) {\r\n        case 'days':\r\n            return (d1.getTime() - d2.getTime() / (1000 * 60 * 60 * 24));\r\n        case 'minutes':\r\n            return (d1.getTime() - d2.getTime() / (1000 * 60 * 60));\r\n        case 'seconds':\r\n        default:\r\n            return (d1.getTime() - d2.getTime()) / 1000;\r\n    }\r\n}\r\nexports.timeBetweenDates = timeBetweenDates;\r\n/**\r\n * format a date\r\n * @param today the date\r\n * @param type one of 'timestamp' | 'timestamp_string' | 'month' | ''\r\n * @returns {string}\r\n */\r\nfunction formatDate(today, type = '') {\r\n    return getToday(type, today);\r\n}\r\nexports.formatDate = formatDate;\r\n/**\r\n * subtract a period from a date and return the new date\r\n * @param date a date to subtract from\r\n * @param period years,months, days,hours,minutes,seconds\r\n * @param duration the number of period to subtract\r\n * @returns {Date}\r\n */\r\nfunction subtractTimePeriod(date, period, duration) {\r\n    date = typeof (date) == 'string' ? new Date(date) : date;\r\n    switch (period) {\r\n        case \"years\":\r\n            return new Date(date.setFullYear(date.getFullYear() - duration));\r\n        case \"months\":\r\n            return new Date(date.setMonth(date.getMonth() - duration));\r\n        case \"hours\":\r\n            return new Date(date.setHours(date.getHours() - duration));\r\n        case \"minutes\":\r\n            return new Date(date.setMinutes(date.getMinutes() - duration));\r\n        case \"seconds\":\r\n            return new Date(date.setSeconds(date.getSeconds() - duration));\r\n        case \"days\":\r\n        default:\r\n            return new Date(date.setDate(date.getDate() - duration));\r\n    }\r\n}\r\nexports.subtractTimePeriod = subtractTimePeriod;\r\n/**\r\n * subtract a period from a date and return the new date\r\n * @param date a date to add to\r\n * @param period years,months, days,hours,minutes,seconds\r\n * @param duration the number of period to subtract\r\n * @returns {Date}\r\n */\r\nfunction addTimePeriod(date, period, duration) {\r\n    date = typeof (date) == 'string' ? new Date(date) : date;\r\n    switch (period) {\r\n        case \"years\":\r\n            return new Date(date.setFullYear(date.getFullYear() - duration));\r\n        case \"months\":\r\n            return new Date(date.setMonth(date.getMonth() - duration));\r\n        case \"hours\":\r\n            return new Date(date.setHours(date.getHours() - duration));\r\n        case \"minutes\":\r\n            return new Date(date.setMinutes(date.getMinutes() - duration));\r\n        case \"seconds\":\r\n            return new Date(date.setSeconds(date.getSeconds() - duration));\r\n        case \"days\":\r\n        default:\r\n            return new Date(date.setDate(date.getDate() - duration));\r\n    }\r\n}\r\nexports.addTimePeriod = addTimePeriod;\r\n/**\r\n * get the week number of the current date or provided date\r\n * @param _date optional\r\n */\r\nfunction getWeekNumber(_date) {\r\n    const currentDate = !_date ? new Date() : new Date(_date);\r\n    Date.now();\r\n    const oneJan = new Date(currentDate.getFullYear(), 0, 1); //1st jan for the year\r\n    let numberOfDays = Math.floor((currentDate.getTime() - oneJan.getTime()) / (24 * 60 * 60 * 1000));\r\n    return Math.ceil(numberOfDays / 7);\r\n}\r\nexports.getWeekNumber = getWeekNumber;\r\n/**\r\n *   get the start and end dates\r\n * @param {String} quick_option\r\n * @returns {Object} {start_date, end_date}\r\n */\r\nfunction setDates(quick_option) {\r\n    const today = new Date();\r\n    let this_week_number = getWeekNumber(today);\r\n    let this_year = getThisYear();\r\n    let last_year = this_year - 1;\r\n    let this_month = today.getMonth(); //0-11\r\n    let last_month = this_month == 0 ? 12 : this_month - 1;\r\n    let next_month = this_month == 11 ? 1 : this_month + 1;\r\n    let start_date;\r\n    let end_date;\r\n    switch (quick_option) {\r\n        case \"all\":\r\n            start_date = formatDate(new Date(2015, 0, 1));\r\n            end_date = getToday();\r\n            break;\r\n        case \"today\":\r\n            start_date = getToday();\r\n            end_date = getToday();\r\n            break;\r\n        case \"yesterday\":\r\n            start_date = formatDate(addDaystoDate(-1, getToday()));\r\n            end_date = formatDate(addDaystoDate(-1, getToday()));\r\n            break;\r\n        case \"this_week\":\r\n            start_date = formatDate(getFirstDayOfWeek(this_week_number, this_year));\r\n            end_date = formatDate(addDaystoDate(6, start_date));\r\n            break;\r\n        case \"last_week\":\r\n            //because this can go into the previous year, we still get that for this week and add some days to it\r\n            start_date = formatDate(addDaystoDate(-6, formatDate(getFirstDayOfWeek(this_week_number, this_year))));\r\n            end_date = formatDate(addDaystoDate(6, start_date));\r\n            break;\r\n        case \"next_week\":\r\n            start_date = formatDate(addDaystoDate(6, formatDate(getFirstDayOfWeek(this_week_number, this_year))));\r\n            end_date = formatDate(addDaystoDate(6, start_date));\r\n            break;\r\n        case \"this_month\":\r\n            start_date = formatDate(new Date(this_year, this_month, 1));\r\n            end_date = formatDate(new Date(this_year, this_month, getLastDayOfMonth(this_month)));\r\n            break;\r\n        case \"last_month\":\r\n            start_date = formatDate(new Date(new Date(this_year, this_month, 1).setMonth(this_month - 1)));\r\n            end_date = formatDate(new Date(new Date(this_year, this_month, getLastDayOfMonth(last_month)).setMonth(this_month - 1)));\r\n            break;\r\n        case \"next_month\":\r\n            start_date = formatDate(new Date(new Date(this_year, this_month, 1).setMonth(this_month + 1)));\r\n            end_date = formatDate(new Date(new Date(this_year, this_month, getLastDayOfMonth(next_month)).setMonth(this_month + 1)));\r\n            break;\r\n        case \"first_quarter\":\r\n            start_date = formatDate(new Date(this_year, 0, 1));\r\n            end_date = formatDate(new Date(this_year, 2, 31));\r\n            break;\r\n        case \"second_quarter\":\r\n            start_date = formatDate(new Date(this_year, 3, 1));\r\n            end_date = formatDate(new Date(this_year, 5, 30));\r\n            break;\r\n        case \"third_quarter\":\r\n            start_date = formatDate(new Date(this_year, 6, 1));\r\n            end_date = formatDate(new Date(this_year, 8, 30));\r\n            break;\r\n        case \"last_quarter\":\r\n            start_date = formatDate(new Date(this_year, 9, 1));\r\n            end_date = formatDate(new Date(this_year, 11, 31));\r\n            break;\r\n        case \"this_year\":\r\n            start_date = formatDate(new Date(this_year, 0, 1));\r\n            end_date = formatDate(new Date(this_year, 11, 31));\r\n            break;\r\n        case \"last_year\":\r\n            start_date = formatDate(new Date(last_year, 0, 1));\r\n            end_date = formatDate(new Date(last_year, 11, 31));\r\n            break;\r\n        case \"today\":\r\n        default:\r\n            start_date = getToday();\r\n            end_date = getToday();\r\n            break;\r\n    }\r\n    return { \"startDate\": start_date, \"endDate\": end_date };\r\n}\r\nexports.setDates = setDates;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/helpers/dateHelper.ts?");

/***/ }),

/***/ "./src/server/helpers/salesHelper.ts":
/*!*******************************************!*\
  !*** ./src/server/helpers/salesHelper.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.flattenNestedProperties = exports.formatDateTime = exports.getTotalSalesList = exports.getTotalSales = exports.getTotalIncomingPaid = exports.getTotalSummary = exports.getDailySalesWithPaymentMethods = exports.getSalesByPaymentMethod = exports.getUserSales = exports.getSalesReportByShift = exports.getSalesReportByUser = exports.getDiscountTaxReportByShift = exports.getDiscountTaxReportByUser = exports.getDiscountReportByPaymentMethodSpecific = void 0;\r\nconst SalesDetails_1 = __webpack_require__(/*! ../models/SalesDetails */ \"./src/server/models/SalesDetails.ts\");\r\nconst Users_1 = __webpack_require__(/*! ../models/Users */ \"./src/server/models/Users.ts\");\r\nconst sequelize_1 = __webpack_require__(/*! sequelize */ \"sequelize\");\r\nconst sequelize_config_1 = __webpack_require__(/*! ../config/sequelize-config */ \"./src/server/config/sequelize-config.ts\");\r\nconst Sales_1 = __webpack_require__(/*! ../models/Sales */ \"./src/server/models/Sales.ts\");\r\nconst DailyRecords_1 = __webpack_require__(/*! ../models/DailyRecords */ \"./src/server/models/DailyRecords.ts\");\r\nconst IncomingPayments_1 = __webpack_require__(/*! ../models/IncomingPayments */ \"./src/server/models/IncomingPayments.ts\");\r\nconst strings_1 = __webpack_require__(/*! ../utils/strings */ \"./src/server/utils/strings.ts\");\r\nconst dateHelper_1 = __webpack_require__(/*! ./dateHelper */ \"./src/server/helpers/dateHelper.ts\");\r\n/**\r\n * get the discount and tax grouped by payment method and e.g. the users or shift\r\n * @param start a start date\r\n * @param end an end date\r\n * @param field a field to group by\r\n * @returns list of sales objects\r\n */\r\nfunction getDiscountReportByPaymentMethodSpecific(start, end, field) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let objects = yield Sales_1.Sales.findAll({\r\n            attributes: [\r\n                [sequelize_config_1.sequelize.literal(`sum(tax)`), 'tax'],\r\n                [sequelize_config_1.sequelize.literal(`sum(discount)`), 'discount'],\r\n                \"payment_method\",\r\n                field\r\n            ],\r\n            where: {\r\n                date: {\r\n                    [sequelize_1.Op.gte]: start,\r\n                    [sequelize_1.Op.lte]: end\r\n                },\r\n            },\r\n            group: ['payment_method', field],\r\n            subQuery: false,\r\n            raw: true\r\n        });\r\n        return objects;\r\n    });\r\n}\r\nexports.getDiscountReportByPaymentMethodSpecific = getDiscountReportByPaymentMethodSpecific;\r\n/**\r\n * get a list of total discount and tax per user, ignoring the payment method\r\n * @param start a start date\r\n * @param end the end date\r\n * @returns list of sales objects\r\n */\r\nfunction getDiscountTaxReportByUser(start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let objects = yield Sales_1.Sales.findAll({\r\n            attributes: [\r\n                'created_by',\r\n                [sequelize_config_1.sequelize.literal(`sum(tax)`), 'tax'],\r\n                [sequelize_config_1.sequelize.literal(`sum(discount)`), 'discount'],\r\n            ],\r\n            where: {\r\n                date: {\r\n                    [sequelize_1.Op.gte]: start,\r\n                    [sequelize_1.Op.lte]: end\r\n                },\r\n            },\r\n            group: [sequelize_config_1.sequelize.col(`${Sales_1.Sales.tableName}.created_by`)],\r\n            order: [[sequelize_config_1.sequelize.col(`${Sales_1.Sales.tableName}.created_by`), 'asc']],\r\n            raw: true,\r\n            subQuery: false,\r\n            include: [\r\n                {\r\n                    model: Users_1.Users,\r\n                    attributes: ['display_name']\r\n                }\r\n            ]\r\n        });\r\n        return objects;\r\n    });\r\n}\r\nexports.getDiscountTaxReportByUser = getDiscountTaxReportByUser;\r\n/**\r\n * get a list of total discount and tax per shift, ignoring the payment method\r\n * @param start a start date\r\n * @param end the end date\r\n * @returns list of sales objects\r\n */\r\nfunction getDiscountTaxReportByShift(start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let objects = yield Sales_1.Sales.findAll({\r\n            attributes: [\r\n                'shift',\r\n                [sequelize_config_1.sequelize.literal(`sum(tax)`), 'tax'],\r\n                [sequelize_config_1.sequelize.literal(`sum(discount)`), 'discount'],\r\n            ],\r\n            where: {\r\n                date: {\r\n                    [sequelize_1.Op.gte]: start,\r\n                    [sequelize_1.Op.lte]: end\r\n                },\r\n            },\r\n            group: [sequelize_config_1.sequelize.col(`${Sales_1.Sales.tableName}.shift`)],\r\n            order: [[sequelize_config_1.sequelize.col(`${Sales_1.Sales.tableName}.shift`), 'asc']],\r\n            raw: true,\r\n            subQuery: false\r\n        });\r\n        return objects;\r\n    });\r\n}\r\nexports.getDiscountTaxReportByShift = getDiscountTaxReportByShift;\r\n/**\r\n * get total amount, total cost of items sold,total discount and tax per user per payment\r\n * method\r\n * @param start a start date\r\n * @param end the end date\r\n * @returns a list of sales objects\r\n */\r\nfunction getSalesReportByUser(start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let objects = yield Sales_1.Sales.findAll({\r\n            attributes: [\r\n                \"payment_method\",\r\n                \"created_by\",\r\n                [sequelize_config_1.sequelize.literal(`sum(tax)`), 'tax'],\r\n                [sequelize_config_1.sequelize.literal(`sum(discount)`), 'discount'],\r\n            ],\r\n            where: {\r\n                date: {\r\n                    [sequelize_1.Op.gte]: start,\r\n                    [sequelize_1.Op.lte]: end\r\n                },\r\n            },\r\n            group: [sequelize_config_1.sequelize.col(`${Sales_1.Sales.tableName}.created_by`), 'payment_method'],\r\n            subQuery: false,\r\n            raw: true,\r\n            order: [[sequelize_config_1.sequelize.col(`${Sales_1.Sales.tableName}.created_by`), 'asc']],\r\n            include: [\r\n                {\r\n                    model: Users_1.Users,\r\n                    attributes: ['display_name']\r\n                },\r\n                {\r\n                    model: SalesDetails_1.SalesDetails,\r\n                    as: SalesDetails_1.SalesDetails.tableName,\r\n                    attributes: [\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * price)'), strings_1.STRING_TOTAL],\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * cost_price)'), strings_1.STRING_TOTAL_COST],\r\n                    ]\r\n                }\r\n            ]\r\n        });\r\n        return objects;\r\n    });\r\n}\r\nexports.getSalesReportByUser = getSalesReportByUser;\r\nfunction getSalesReportByShift(start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let objects = Sales_1.Sales.findAll({\r\n            attributes: [\r\n                \"payment_method\",\r\n                \"shift\",\r\n                [sequelize_config_1.sequelize.literal(`sum(tax) `), 'tax'],\r\n                [sequelize_config_1.sequelize.literal(` sum(discount) `), 'discount'],\r\n            ],\r\n            where: {\r\n                date: {\r\n                    [sequelize_1.Op.gte]: start,\r\n                    [sequelize_1.Op.lte]: end\r\n                },\r\n            },\r\n            group: ['shift', 'payment_method'],\r\n            subQuery: false,\r\n            raw: true,\r\n            order: [['shift', 'asc']],\r\n            include: [\r\n                {\r\n                    model: SalesDetails_1.SalesDetails,\r\n                    as: SalesDetails_1.SalesDetails.tableName,\r\n                    attributes: [\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * price)'), strings_1.STRING_TOTAL],\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * cost_price)'), strings_1.STRING_TOTAL_COST],\r\n                    ]\r\n                }\r\n            ]\r\n        });\r\n        return objects;\r\n    });\r\n}\r\nexports.getSalesReportByShift = getSalesReportByShift;\r\nfunction getUserSales(start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let objects = Sales_1.Sales.findAll({\r\n            attributes: [\r\n                \"created_by\",\r\n            ],\r\n            where: {\r\n                date: {\r\n                    [sequelize_1.Op.gte]: start,\r\n                    [sequelize_1.Op.lte]: end\r\n                },\r\n            },\r\n            group: [sequelize_config_1.sequelize.col(`${Sales_1.Sales.tableName}.created_by`)],\r\n            subQuery: false,\r\n            raw: true,\r\n            include: [\r\n                {\r\n                    model: Users_1.Users,\r\n                    attributes: ['display_name']\r\n                },\r\n                {\r\n                    model: SalesDetails_1.SalesDetails,\r\n                    as: SalesDetails_1.SalesDetails.tableName,\r\n                    attributes: [\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * price)'), strings_1.STRING_TOTAL],\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * cost_price)'), strings_1.STRING_TOTAL_COST],\r\n                        [sequelize_config_1.sequelize.literal(`count(${SalesDetails_1.SalesDetails.tableName}.id)`), strings_1.STRING_NUMBER_OF_ITEMS]\r\n                    ]\r\n                }\r\n            ]\r\n        });\r\n        return objects;\r\n    });\r\n}\r\nexports.getUserSales = getUserSales;\r\n/**\r\n * get the total sold per payment method between some dates\r\n * @param start start date\r\n * @param end end date\r\n * @param payment_method optional\r\n * @returns payment_method, total\r\n */\r\nfunction getSalesByPaymentMethod(start, end, payment_method) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let objects = Sales_1.Sales.findAll({\r\n            attributes: [\r\n                \"payment_method\",\r\n            ],\r\n            where: Object.assign({ date: {\r\n                    [sequelize_1.Op.gte]: start,\r\n                    [sequelize_1.Op.lte]: end\r\n                } }, (payment_method && { payment_method: payment_method })),\r\n            group: ['payment_method'],\r\n            subQuery: false,\r\n            raw: true,\r\n            include: [\r\n                {\r\n                    model: SalesDetails_1.SalesDetails,\r\n                    as: SalesDetails_1.SalesDetails.tableName,\r\n                    attributes: [\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * price)'), strings_1.STRING_TOTAL],\r\n                    ]\r\n                }\r\n            ]\r\n        });\r\n        return objects;\r\n    });\r\n}\r\nexports.getSalesByPaymentMethod = getSalesByPaymentMethod;\r\n/**\r\n *\r\n * @param start the start date\r\n * @param end the end date\r\n * @returns a list of of dates, payment_method, total, total_cost, tax and discount\r\n */\r\nfunction getDailySalesWithPaymentMethods(start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let objects = Sales_1.Sales.findAll({\r\n            attributes: [\r\n                \"payment_method\",\r\n                \"date\",\r\n                [sequelize_config_1.sequelize.literal(` sum(tax)`), 'tax'],\r\n                [sequelize_config_1.sequelize.literal(`sum(discount)`), 'discount'],\r\n            ],\r\n            where: {\r\n                date: {\r\n                    [sequelize_1.Op.gte]: start,\r\n                    [sequelize_1.Op.lte]: end\r\n                },\r\n            },\r\n            group: ['date', 'payment_method'],\r\n            subQuery: false,\r\n            raw: true,\r\n            include: [\r\n                {\r\n                    model: SalesDetails_1.SalesDetails,\r\n                    as: SalesDetails_1.SalesDetails.tableName,\r\n                    attributes: [\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * price)'), strings_1.STRING_TOTAL],\r\n                        [sequelize_config_1.sequelize.literal('SUM(quantity * cost_price)'), strings_1.STRING_TOTAL_COST],\r\n                    ],\r\n                }\r\n            ]\r\n        });\r\n        return objects;\r\n    });\r\n}\r\nexports.getDailySalesWithPaymentMethods = getDailySalesWithPaymentMethods;\r\n/**\r\n * get an object with the total of each payment method\r\n * @param date a date\r\n * @returns a daily records object\r\n */\r\nfunction getTotalSummary(start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let objects = yield DailyRecords_1.DailyRecords.findAll({\r\n                attributes: [\r\n                    'date',\r\n                    'amount',\r\n                    [sequelize_config_1.sequelize.literal('SUM(cash)'), 'cash'],\r\n                    [sequelize_config_1.sequelize.literal('SUM(momo)'), 'momo'],\r\n                    [sequelize_config_1.sequelize.literal('SUM(pos)'), 'pos'],\r\n                    [sequelize_config_1.sequelize.literal('SUM(cheque)'), 'cheque'],\r\n                    [sequelize_config_1.sequelize.literal('SUM(other)'), 'other'],\r\n                    [sequelize_config_1.sequelize.literal('SUM(credit)'), 'credit'],\r\n                    [sequelize_config_1.sequelize.literal('SUM(insurance)'), 'insurance'],\r\n                ],\r\n                where: {\r\n                    date: {\r\n                        [sequelize_1.Op.gte]: start,\r\n                        [sequelize_1.Op.lte]: end\r\n                    },\r\n                },\r\n                group: ['date'],\r\n                subQuery: false,\r\n                raw: true\r\n            });\r\n            if (!objects) {\r\n                throw new Error(\"getTotalSummary object not found\");\r\n            }\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.getTotalSummary = getTotalSummary;\r\nfunction getTotalIncomingPaid(payer, start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let object = yield IncomingPayments_1.IncomingPayments.findOne({\r\n                attributes: [\r\n                    [sequelize_config_1.sequelize.fn(\"SUM\", sequelize_config_1.sequelize.col('amount')), 'total']\r\n                ],\r\n                where: Object.assign(Object.assign(Object.assign({ type: 'Credit Sale Payment' }, (start && { date: { [sequelize_1.Op.gte]: new Date(start) } })), (end && { date: { [sequelize_1.Op.lte]: new Date(end) } })), (payer && { payer: payer }))\r\n            });\r\n            if (!object) {\r\n                throw new Error(\"getTotalIncomingPaid object not found\");\r\n            }\r\n            return object.total || 0;\r\n        }\r\n        catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.getTotalIncomingPaid = getTotalIncomingPaid;\r\nfunction getTotalSales(start, end) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let object = yield SalesDetails_1.SalesDetails.findOne({\r\n                attributes: [\r\n                    [sequelize_config_1.sequelize.literal(`sum(price * quantity)`), strings_1.STRING_TOTAL]\r\n                ],\r\n                where: {\r\n                    date: {\r\n                        [sequelize_1.Op.gte]: start,\r\n                        [sequelize_1.Op.lte]: end\r\n                    },\r\n                }\r\n            });\r\n            if (!object) {\r\n                throw new Error(\"getTotalSales object not found\");\r\n            }\r\n            return object.total || 0;\r\n        }\r\n        catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.getTotalSales = getTotalSales;\r\n/**\r\n * get a list of total sales by date\r\n * @param start the start date\r\n * @param end the end date\r\n * @returns list of {date, total}\r\n */\r\nfunction getTotalSalesList(start, end, group_by = [\"date\"]) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let objects = yield SalesDetails_1.SalesDetails.findAll({\r\n                attributes: [\r\n                    ...group_by,\r\n                    [sequelize_config_1.sequelize.literal(`sum(price * quantity)`), strings_1.STRING_TOTAL]\r\n                ],\r\n                where: {\r\n                    date: {\r\n                        [sequelize_1.Op.gte]: start,\r\n                        [sequelize_1.Op.lte]: end\r\n                    },\r\n                },\r\n                group: group_by,\r\n                subQuery: false\r\n            });\r\n            if (!objects) {\r\n                throw new Error(\"getTotalSalesList object not found\");\r\n            }\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.getTotalSalesList = getTotalSalesList;\r\nfunction formatDateTime(object) {\r\n    if (!object || !object.created_on)\r\n        return;\r\n    const timestamp = (0, dateHelper_1.getToday)(\"timestamp\", object.created_on);\r\n    console.log(timestamp);\r\n    Object.assign(object, Object.assign(Object.assign({}, object), { created_on: timestamp }));\r\n}\r\nexports.formatDateTime = formatDateTime;\r\nfunction flattenNestedProperties(object) {\r\n    if (!object)\r\n        return;\r\n    const flattenedObject = Object.assign(Object.assign({}, object), { customer_id: object['Customer.customer_id'], customer_name: object['Customer.customer_name'], display_name: object['User.display_name'], total: object['sales_details.total'], total_cost: object['sales_details.total_cost'], num_of_items: object['sales_details.num_of_items'], created_on: (0, dateHelper_1.getToday)(\"timestamp\", object.created_on) });\r\n    delete flattenedObject['Customer.customer_id'];\r\n    delete flattenedObject['Customer.customer_name'];\r\n    delete flattenedObject['User.display_name'];\r\n    delete flattenedObject['sales_details.total_amount'];\r\n    delete flattenedObject['sales_details.num_of_items'];\r\n    Object.assign(object, flattenedObject);\r\n}\r\nexports.flattenNestedProperties = flattenNestedProperties;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/helpers/salesHelper.ts?");

/***/ }),

/***/ "./src/server/helpers/searchHelper.ts":
/*!********************************************!*\
  !*** ./src/server/helpers/searchHelper.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getOperatorParamArray = exports.getOperator = exports.parseSearchQuery = void 0;\r\nconst sequelize_1 = __webpack_require__(/*! sequelize */ \"sequelize\");\r\n//parse params sent through an array object [{field:name, operator:includes, param: some product name}]\r\n/**\r\n * get the where options for a search query\r\n * @param data an array of search query [{field:name, operator:includes, param: some product name}]\r\n * @returns sequelize WhereOptions\r\n */\r\nfunction parseSearchQuery(data) {\r\n    //for each item, use the operator to determine the sequelize operator\r\n    let where = {};\r\n    for (let index = 0; index < data.length; index++) {\r\n        const element = data[index];\r\n        where[element.field] = getOperator(element.operator, element.param);\r\n    }\r\n    return where;\r\n}\r\nexports.parseSearchQuery = parseSearchQuery;\r\nfunction getOperator(operator, param) {\r\n    //the param may be separated by commas.\r\n    //TODO: CONSIDER changing that to an array of strings instead \r\n    //store the like operator queries\r\n    let like_queries = getOperatorParamArray(operator, param);\r\n    switch (operator) {\r\n        case 'includes':\r\n            return {\r\n                [sequelize_1.Op.or]: like_queries //the result of a loop goes here}\r\n            };\r\n        default:\r\n            return {\r\n                [sequelize_1.Op.or]: like_queries //the result of a loop goes here}\r\n            };\r\n    }\r\n}\r\nexports.getOperator = getOperator;\r\nfunction getOperatorParamArray(operator, param) {\r\n    let params = typeof (param) === \"string\" ? param.split(\",\").map(p => p.trim()) : [param];\r\n    //store the like operator queries\r\n    let like_queries = [];\r\n    params.forEach(p => {\r\n        //if we're looking for dates between, each item has to be converted into a date object with new Date()\r\n        if (operator === 'dates_between' && Array.isArray(p)) {\r\n            p.map(obj => {\r\n                obj = new Date(obj);\r\n            });\r\n        }\r\n        switch (operator) {\r\n            case 'includes':\r\n                like_queries.push({ [sequelize_1.Op.like]: `%${p}%` });\r\n                break;\r\n            case 'starts_with':\r\n                like_queries.push({ [sequelize_1.Op.like]: `${p}%` });\r\n                break;\r\n            case 'ends_with':\r\n                like_queries.push({ [sequelize_1.Op.like]: `%${p}` });\r\n                break;\r\n            case 'equals':\r\n                like_queries.push({ [sequelize_1.Op.eq]: `${p}` });\r\n                break;\r\n            case 'between':\r\n                like_queries.push({ [sequelize_1.Op.between]: p }); //an array is expected for the value\r\n                break;\r\n            case 'dates_between':\r\n                like_queries.push({ [sequelize_1.Op.between]: p }); //an array is expected for the value\r\n                break;\r\n            case 'less_than':\r\n                like_queries.push({ [sequelize_1.Op.lt]: p }); //a number is expected for the value\r\n                break;\r\n            case 'greater_than':\r\n                like_queries.push({ [sequelize_1.Op.gt]: p }); //a number is expected for the value\r\n                break;\r\n            case 'greater_than_or_equal':\r\n                like_queries.push({ [sequelize_1.Op.gte]: p }); //a number is expected for the value\r\n                break;\r\n            case 'less_than_or_equal':\r\n                like_queries.push({ [sequelize_1.Op.lte]: p }); //a number is expected for the value\r\n                break;\r\n            case 'in':\r\n                like_queries.push({ [sequelize_1.Op.in]: p }); //an array of values is expected [1,2,3]\r\n                break;\r\n            default:\r\n                like_queries.push({ [sequelize_1.Op.like]: `${p}` });\r\n        }\r\n    });\r\n    return like_queries;\r\n}\r\nexports.getOperatorParamArray = getOperatorParamArray;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/helpers/searchHelper.ts?");

/***/ }),

/***/ "./src/server/helpers/stringHelpers.ts":
/*!*********************************************!*\
  !*** ./src/server/helpers/stringHelpers.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.configKeys = exports.moduleNames = exports.infoMessages = exports.errorMessages = void 0;\r\nexports.errorMessages = {\r\n    WRONG_COMBINATION: \"Wrong combination. Try again\",\r\n    USER_NOT_FOUND: \"User not found\",\r\n    ERROR_GETTING_BRANCHES: \"Error getting branches\",\r\n    ERROR_GETTING_LOGO: \"Error getting logo\",\r\n    ERROR_GETTING_SETTINGS: \"Error getting settings\",\r\n    ERROR_CREATING_BRANCH: \"Error creating branch\",\r\n    ERROR_GETTING_INSURERS: \"Error getting insurers\",\r\n    ERROR_SAVING_SETTINGS: \"Error saving settings\",\r\n    NOT_LOGGED_IN: \"You are not logged in.\",\r\n    NO_PERMISSION: \"Permission not granted for this operation\",\r\n    INCORRECT_REQUEST_CONFIG: \"Incorrect request config. Please log out and login again\",\r\n    INCORRECT_SYSTEM_CONFIG: \"Incorrect system config. Please contact support for help\",\r\n    NOT_LOGGED_IN_AS_ADMIN: \"You are not logged in as the admin. Please log out and login again\",\r\n    PASSWORD_INCORRECT: \"Incorrect Password\"\r\n};\r\nexports.infoMessages = {\r\n    LOGGED_IN: \"logged in\",\r\n    CREATED_NEW_BRANCH: \"created a new branch\",\r\n    CREATED_NEW_INSURER: \"created a new insurer\"\r\n};\r\nexports.moduleNames = {\r\n    SYSTEM: \"System\"\r\n};\r\nexports.configKeys = {\r\n    ADMIN_PASSWORD_SALT: \"NxDWcnBE34@#$#\"\r\n};\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/helpers/stringHelpers.ts?");

/***/ }),

/***/ "./src/server/helpers/userHelper.ts":
/*!******************************************!*\
  !*** ./src/server/helpers/userHelper.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.flattenNestedUserProperties = void 0;\r\nfunction flattenNestedUserProperties(object) {\r\n    if (!object)\r\n        return;\r\n    const flattenedObject = Object.assign(Object.assign({}, object), { role_name: object['userRole.role_name'], role_description: object['userRole.description'], role_id: object['userRole.role_id'] });\r\n    delete flattenedObject['userRole.role_name'];\r\n    delete flattenedObject['userRole.description'];\r\n    delete flattenedObject['userRole.role_id'];\r\n    Object.assign(object, flattenedObject);\r\n}\r\nexports.flattenNestedUserProperties = flattenNestedUserProperties;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/helpers/userHelper.ts?");

/***/ }),

/***/ "./src/server/models/Activities.ts":
/*!*****************************************!*\
  !*** ./src/server/models/Activities.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Activities = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet Activities = class Activities extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        allowNull: false,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Activities.prototype, \"activity\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.BIGINT,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Activities.prototype, \"activity_id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Activities.prototype, \"user_id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        allowNull: true,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Activities.prototype, \"module\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Activities.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: true,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Activities.prototype, \"deleted\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: true,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Activities.prototype, \"object_id\", void 0);\r\nActivities = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'activities',\r\n        modelName: 'Activities',\r\n        paranoid: true,\r\n    })\r\n], Activities);\r\nexports.Activities = Activities;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Activities.ts?");

/***/ }),

/***/ "./src/server/models/Branches.ts":
/*!***************************************!*\
  !*** ./src/server/models/Branches.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Branches = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet Branches = class Branches extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Branches.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Branches.prototype, \"name\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Branches.prototype, \"location\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Branches.prototype, \"phone\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Branches.prototype, \"address\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Branches.prototype, \"email\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Branches.prototype, \"created_on\", void 0);\r\nBranches = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'branches',\r\n        modelName: 'Branches',\r\n        paranoid: true,\r\n    })\r\n], Branches);\r\nexports.Branches = Branches;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Branches.ts?");

/***/ }),

/***/ "./src/server/models/CustomerDiagnostics.ts":
/*!**************************************************!*\
  !*** ./src/server/models/CustomerDiagnostics.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CustomerDiagnostics = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Customers_1 = __webpack_require__(/*! ./Customers */ \"./src/server/models/Customers.ts\");\r\nlet CustomerDiagnostics = class CustomerDiagnostics extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], CustomerDiagnostics.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Customers_1.Customers),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false,\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], CustomerDiagnostics.prototype, \"customer\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], CustomerDiagnostics.prototype, \"test\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], CustomerDiagnostics.prototype, \"data\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], CustomerDiagnostics.prototype, \"comments\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], CustomerDiagnostics.prototype, \"date\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], CustomerDiagnostics.prototype, \"created_on\", void 0);\r\nCustomerDiagnostics = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'customer_diagnostics',\r\n        modelName: 'CustomerDiagnostics',\r\n        paranoid: true,\r\n    })\r\n], CustomerDiagnostics);\r\nexports.CustomerDiagnostics = CustomerDiagnostics;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/CustomerDiagnostics.ts?");

/***/ }),

/***/ "./src/server/models/Customers.ts":
/*!****************************************!*\
  !*** ./src/server/models/Customers.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Customers = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst CustomerDiagnostics_1 = __webpack_require__(/*! ./CustomerDiagnostics */ \"./src/server/models/CustomerDiagnostics.ts\");\r\nlet Customers = class Customers extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Customers.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Customers.prototype, \"name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Customers.prototype, \"sex\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Customers.prototype, \"phone\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        validate: {\r\n            isEmail: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Customers.prototype, \"email\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        validate: {\r\n            isDate: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Customers.prototype, \"date_of_birth\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Customers.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Customers.prototype, \"location\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.HasMany)(() => CustomerDiagnostics_1.CustomerDiagnostics),\r\n    __metadata(\"design:type\", Array)\r\n], Customers.prototype, \"customerDiagnostics\", void 0);\r\nCustomers = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'customers',\r\n        modelName: 'Customers',\r\n        paranoid: true,\r\n    })\r\n], Customers);\r\nexports.Customers = Customers;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Customers.ts?");

/***/ }),

/***/ "./src/server/models/DailyRecords.ts":
/*!*******************************************!*\
  !*** ./src/server/models/DailyRecords.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DailyRecords = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet DailyRecords = class DailyRecords extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], DailyRecords.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"amount\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"pos\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"cheque\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"insurance\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"momo\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"cash\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"other\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"credit\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], DailyRecords.prototype, \"shift\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", Number)\r\n], DailyRecords.prototype, \"created_on\", void 0);\r\nDailyRecords = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'dailyRecords',\r\n        modelName: 'DailyRecords',\r\n        paranoid: true,\r\n    })\r\n], DailyRecords);\r\nexports.DailyRecords = DailyRecords;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/DailyRecords.ts?");

/***/ }),

/***/ "./src/server/models/DbBackups.ts":
/*!****************************************!*\
  !*** ./src/server/models/DbBackups.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DbBackups = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet DbBackups = class DbBackups extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DbBackups.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DbBackups.prototype, \"file_name\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], DbBackups.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DbBackups.prototype, \"description\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DbBackups.prototype, \"uploaded\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DbBackups.prototype, \"db_version\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], DbBackups.prototype, \"created_on\", void 0);\r\nDbBackups = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'dbbackups',\r\n        modelName: 'DbBackups',\r\n        paranoid: true,\r\n    })\r\n], DbBackups);\r\nexports.DbBackups = DbBackups;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/DbBackups.ts?");

/***/ }),

/***/ "./src/server/models/DbSync.ts":
/*!*************************************!*\
  !*** ./src/server/models/DbSync.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DbSync = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet DbSync = class DbSync extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DbSync.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DbSync.prototype, \"type\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DbSync.prototype, \"action\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DbSync.prototype, \"data\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], DbSync.prototype, \"created_on\", void 0);\r\nDbSync = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'db_sync',\r\n        modelName: 'DbSync',\r\n        paranoid: true,\r\n    })\r\n], DbSync);\r\nexports.DbSync = DbSync;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/DbSync.ts?");

/***/ }),

/***/ "./src/server/models/DiagnosticTests.ts":
/*!**********************************************!*\
  !*** ./src/server/models/DiagnosticTests.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DiagnosticTests = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet DiagnosticTests = class DiagnosticTests extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], DiagnosticTests.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DiagnosticTests.prototype, \"test_name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DiagnosticTests.prototype, \"parameters\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], DiagnosticTests.prototype, \"comments\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], DiagnosticTests.prototype, \"created_on\", void 0);\r\nDiagnosticTests = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'diagnostic_tests',\r\n        modelName: 'DiagnosticTests',\r\n        paranoid: true,\r\n    })\r\n], DiagnosticTests);\r\nexports.DiagnosticTests = DiagnosticTests;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/DiagnosticTests.ts?");

/***/ }),

/***/ "./src/server/models/IncomingPayments.ts":
/*!***********************************************!*\
  !*** ./src/server/models/IncomingPayments.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.IncomingPayments = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet IncomingPayments = class IncomingPayments extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], IncomingPayments.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], IncomingPayments.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], IncomingPayments.prototype, \"amount\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], IncomingPayments.prototype, \"type\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], IncomingPayments.prototype, \"payer\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], IncomingPayments.prototype, \"payment_method\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], IncomingPayments.prototype, \"transaction_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], IncomingPayments.prototype, \"item_code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], IncomingPayments.prototype, \"notes\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], IncomingPayments.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], IncomingPayments.prototype, \"created_on\", void 0);\r\nIncomingPayments = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'incoming_payments',\r\n        modelName: 'IncomingPayments',\r\n        paranoid: true,\r\n    })\r\n], IncomingPayments);\r\nexports.IncomingPayments = IncomingPayments;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/IncomingPayments.ts?");

/***/ }),

/***/ "./src/server/models/InsuranceProviders.ts":
/*!*************************************************!*\
  !*** ./src/server/models/InsuranceProviders.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.InsuranceProviders = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet InsuranceProviders = class InsuranceProviders extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], InsuranceProviders.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], InsuranceProviders.prototype, \"name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], InsuranceProviders.prototype, \"created_on\", void 0);\r\nInsuranceProviders = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'insurance_providers',\r\n        modelName: 'InsuranceProviders',\r\n        paranoid: true,\r\n    })\r\n], InsuranceProviders);\r\nexports.InsuranceProviders = InsuranceProviders;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/InsuranceProviders.ts?");

/***/ }),

/***/ "./src/server/models/OnlineBackups.ts":
/*!********************************************!*\
  !*** ./src/server/models/OnlineBackups.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OnlineBackups = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet OnlineBackups = class OnlineBackups extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], OnlineBackups.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], OnlineBackups.prototype, \"date\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], OnlineBackups.prototype, \"url\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], OnlineBackups.prototype, \"created_on\", void 0);\r\nOnlineBackups = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'online_backups',\r\n        modelName: 'OnlineBackups',\r\n        paranoid: true,\r\n    })\r\n], OnlineBackups);\r\nexports.OnlineBackups = OnlineBackups;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/OnlineBackups.ts?");

/***/ }),

/***/ "./src/server/models/OutgoingPayments.ts":
/*!***********************************************!*\
  !*** ./src/server/models/OutgoingPayments.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OutgoingPayments = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet OutgoingPayments = class OutgoingPayments extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], OutgoingPayments.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], OutgoingPayments.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], OutgoingPayments.prototype, \"amount\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], OutgoingPayments.prototype, \"type\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], OutgoingPayments.prototype, \"recipient\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], OutgoingPayments.prototype, \"transaction_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], OutgoingPayments.prototype, \"item_code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], OutgoingPayments.prototype, \"notes\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], OutgoingPayments.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], OutgoingPayments.prototype, \"created_on\", void 0);\r\nOutgoingPayments = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'outgoing_payments',\r\n        modelName: 'OutgoingPayments',\r\n        paranoid: true,\r\n    })\r\n], OutgoingPayments);\r\nexports.OutgoingPayments = OutgoingPayments;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/OutgoingPayments.ts?");

/***/ }),

/***/ "./src/server/models/Permissions.ts":
/*!******************************************!*\
  !*** ./src/server/models/Permissions.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Permissions = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet Permissions = class Permissions extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Permissions.prototype, \"permission_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        unique: true,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Permissions.prototype, \"name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Permissions.prototype, \"description\", void 0);\r\nPermissions = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'permissions',\r\n        modelName: 'Permissions',\r\n        paranoid: true,\r\n        timestamps: false\r\n    })\r\n], Permissions);\r\nexports.Permissions = Permissions;\r\n// Permissions.belongsToMany(Roles, {through: RolePermissions})\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Permissions.ts?");

/***/ }),

/***/ "./src/server/models/ProductBatches.ts":
/*!*********************************************!*\
  !*** ./src/server/models/ProductBatches.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ProductBatches = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Products_1 = __webpack_require__(/*! ./Products */ \"./src/server/models/Products.ts\");\r\nlet ProductBatches = class ProductBatches extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ProductBatches.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], ProductBatches.prototype, \"batch_number\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], ProductBatches.prototype, \"expiry\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], ProductBatches.prototype, \"barcode\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Products_1.Products),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ProductBatches.prototype, \"product\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], ProductBatches.prototype, \"purchase_code\", void 0);\r\nProductBatches = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'ProductBatches',\r\n        modelName: 'ProductBatches',\r\n        paranoid: true,\r\n    })\r\n], ProductBatches);\r\nexports.ProductBatches = ProductBatches;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/ProductBatches.ts?");

/***/ }),

/***/ "./src/server/models/Products.ts":
/*!***************************************!*\
  !*** ./src/server/models/Products.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Products = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet Products = class Products extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false,\r\n        unique: true,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"price\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"category\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"notes\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"unit\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"picture\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"max_stock\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"min_stock\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        allowNull: false,\r\n        validate: {\r\n            isDate: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"expiry\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"barcode\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"current_stock\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        allowNull: true\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"last_modified\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"cost_price\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"size\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"description\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false,\r\n        defaultValue: 1\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"status\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"shelf\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"preferred_vendor\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"is_drug\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"generic_name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"contraindications\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"pregnancy\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"side_effects\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"caution\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"indications\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 1.33,\r\n        validate: {\r\n            isNumeric: true,\r\n            isFloat: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Products.prototype, \"markup\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"active_ingredients\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"drug_info\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Products.prototype, \"last_stock_modification\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.VIRTUAL,\r\n        get() {\r\n            return Date.parse(this.getDataValue('expiry')) < Date.now();\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Boolean)\r\n], Products.prototype, \"expired\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.VIRTUAL,\r\n        get() {\r\n            return this.getDataValue('current_stock') < 1;\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Boolean)\r\n], Products.prototype, \"out_of_stock\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.VIRTUAL,\r\n        get() {\r\n            return this.getDataValue('current_stock') > 0 &&\r\n                this.getDataValue('current_stock') <= this.getDataValue('min_stock');\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Boolean)\r\n], Products.prototype, \"near_min\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.VIRTUAL,\r\n        get() {\r\n            return this.getDataValue('current_stock') > 0 &&\r\n                this.getDataValue('current_stock') >= this.getDataValue('max_stock');\r\n        },\r\n    }),\r\n    __metadata(\"design:type\", Boolean)\r\n], Products.prototype, \"near_max\", void 0);\r\nProducts = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'products',\r\n        modelName: 'Products',\r\n        paranoid: true,\r\n    })\r\n], Products);\r\nexports.Products = Products;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Products.ts?");

/***/ }),

/***/ "./src/server/models/PurchaseDetails.ts":
/*!**********************************************!*\
  !*** ./src/server/models/PurchaseDetails.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PurchaseDetails = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet PurchaseDetails = class PurchaseDetails extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], PurchaseDetails.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], PurchaseDetails.prototype, \"product\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], PurchaseDetails.prototype, \"quantity\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], PurchaseDetails.prototype, \"price\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], PurchaseDetails.prototype, \"unit\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], PurchaseDetails.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], PurchaseDetails.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], PurchaseDetails.prototype, \"markup\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], PurchaseDetails.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], PurchaseDetails.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], PurchaseDetails.prototype, \"selling_price\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], PurchaseDetails.prototype, \"expiry\", void 0);\r\nPurchaseDetails = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'purchase_details',\r\n        modelName: 'PurchaseDetails',\r\n        paranoid: true,\r\n    })\r\n], PurchaseDetails);\r\nexports.PurchaseDetails = PurchaseDetails;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/PurchaseDetails.ts?");

/***/ }),

/***/ "./src/server/models/Purchases.ts":
/*!****************************************!*\
  !*** ./src/server/models/Purchases.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Purchases = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet Purchases = class Purchases extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Purchases.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Purchases.prototype, \"vendor\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Purchases.prototype, \"date\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Purchases.prototype, \"site\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Purchases.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Purchases.prototype, \"status\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Purchases.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Purchases.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Purchases.prototype, \"invoice\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Purchases.prototype, \"payment_method\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Purchases.prototype, \"amount_paid\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Purchases.prototype, \"last_payment_date\", void 0);\r\nPurchases = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'purchases',\r\n        modelName: 'Purchases',\r\n        paranoid: true,\r\n    })\r\n], Purchases);\r\nexports.Purchases = Purchases;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Purchases.ts?");

/***/ }),

/***/ "./src/server/models/ReceivedTransferDetails.ts":
/*!******************************************************!*\
  !*** ./src/server/models/ReceivedTransferDetails.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ReceivedTransferDetails = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Products_1 = __webpack_require__(/*! ./Products */ \"./src/server/models/Products.ts\");\r\nconst ReceivedTransfers_1 = __webpack_require__(/*! ./ReceivedTransfers */ \"./src/server/models/ReceivedTransfers.ts\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet ReceivedTransferDetails = class ReceivedTransferDetails extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransferDetails.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Products_1.Products),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransferDetails.prototype, \"product\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransferDetails.prototype, \"quantity\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransferDetails.prototype, \"price\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], ReceivedTransferDetails.prototype, \"unit\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], ReceivedTransferDetails.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransferDetails.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransferDetails.prototype, \"markup\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.ForeignKey)(() => ReceivedTransfers_1.ReceivedTransfers),\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], ReceivedTransferDetails.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], ReceivedTransferDetails.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransferDetails.prototype, \"selling_price\", void 0);\r\nReceivedTransferDetails = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'received_transfer_details',\r\n        modelName: 'ReceivedTransferDetails',\r\n        paranoid: true,\r\n    })\r\n], ReceivedTransferDetails);\r\nexports.ReceivedTransferDetails = ReceivedTransferDetails;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/ReceivedTransferDetails.ts?");

/***/ }),

/***/ "./src/server/models/ReceivedTransfers.ts":
/*!************************************************!*\
  !*** ./src/server/models/ReceivedTransfers.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ReceivedTransfers = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Branches_1 = __webpack_require__(/*! ./Branches */ \"./src/server/models/Branches.ts\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet ReceivedTransfers = class ReceivedTransfers extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransfers.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], ReceivedTransfers.prototype, \"date\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], ReceivedTransfers.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], ReceivedTransfers.prototype, \"invoice\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], ReceivedTransfers.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransfers.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Branches_1.Branches),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], ReceivedTransfers.prototype, \"sender\", void 0);\r\nReceivedTransfers = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'received_transfers',\r\n        modelName: 'ReceivedTransfers',\r\n        paranoid: true,\r\n    })\r\n], ReceivedTransfers);\r\nexports.ReceivedTransfers = ReceivedTransfers;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/ReceivedTransfers.ts?");

/***/ }),

/***/ "./src/server/models/Refills.ts":
/*!**************************************!*\
  !*** ./src/server/models/Refills.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Refills = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Customers_1 = __webpack_require__(/*! ./Customers */ \"./src/server/models/Customers.ts\");\r\nconst Products_1 = __webpack_require__(/*! ./Products */ \"./src/server/models/Products.ts\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet Refills = class Refills extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Refills.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Refills.prototype, \"product\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Products_1.Products),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Refills.prototype, \"product_id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 1\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Refills.prototype, \"quantity\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Refills.prototype, \"start_date\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Refills.prototype, \"end_date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Refills.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Refills.prototype, \"status\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Customers_1.Customers),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Refills.prototype, \"customer_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Refills.prototype, \"customer_name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Refills.prototype, \"created_on\", void 0);\r\nRefills = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'refills',\r\n        modelName: 'Refills',\r\n        paranoid: true,\r\n    })\r\n], Refills);\r\nexports.Refills = Refills;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Refills.ts?");

/***/ }),

/***/ "./src/server/models/RolePermissions.ts":
/*!**********************************************!*\
  !*** ./src/server/models/RolePermissions.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RolePermissions = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Permissions_1 = __webpack_require__(/*! ./Permissions */ \"./src/server/models/Permissions.ts\");\r\nconst Roles_1 = __webpack_require__(/*! ./Roles */ \"./src/server/models/Roles.ts\");\r\nlet RolePermissions = class RolePermissions extends sequelize_typescript_1.Model {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.updatedAt = false;\r\n    }\r\n};\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Roles_1.Roles),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], RolePermissions.prototype, \"role_id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Permissions_1.Permissions),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], RolePermissions.prototype, \"permission_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], RolePermissions.prototype, \"created_on\", void 0);\r\nRolePermissions = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'role_permissions',\r\n        modelName: 'RolePermissions',\r\n        paranoid: true,\r\n    })\r\n], RolePermissions);\r\nexports.RolePermissions = RolePermissions;\r\n// const {\r\n//   Model\r\n// } = require('sequelize');\r\n// const Roles = require(\"./roles\");\r\n// const Permissions = require(\"./permissions\")\r\n// module.exports = (sequelize, DataTypes) => {\r\n//   class role_permissions extends Model {\r\n//     /**\r\n//      * Helper method for defining associations.\r\n//      * This method is not a part of Sequelize lifecycle.\r\n//      * The `models/index` file will call this method automatically.\r\n//      */\r\n//     static associate(models) {\r\n//       // define association here\r\n//     }\r\n//   };\r\n//   role_permissions.init({\r\n//     role_id: {type: DataTypes.INTEGER\r\n//     },\r\n//     permission_id: {type: DataTypes.INTEGER\r\n//     }\r\n//   }, {\r\n//     sequelize,\r\n//     modelName: 'role_permissions',\r\n//   });\r\n//   return role_permissions;\r\n// };\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/RolePermissions.ts?");

/***/ }),

/***/ "./src/server/models/Roles.ts":
/*!************************************!*\
  !*** ./src/server/models/Roles.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Roles = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet Roles = \r\n// @BelongsToMany(Permissions, RolePermissions)\r\nclass Roles extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Roles.prototype, \"role_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Roles.prototype, \"role_name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Roles.prototype, \"description\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Roles.prototype, \"created_on\", void 0);\r\nRoles = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'roles',\r\n        modelName: 'Roles',\r\n        paranoid: true,\r\n    })\r\n    // @BelongsToMany(Permissions, RolePermissions)\r\n], Roles);\r\nexports.Roles = Roles;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Roles.ts?");

/***/ }),

/***/ "./src/server/models/Sales.ts":
/*!************************************!*\
  !*** ./src/server/models/Sales.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Sales = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Customers_1 = __webpack_require__(/*! ./Customers */ \"./src/server/models/Customers.ts\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet Sales = class Sales extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Sales.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Customers_1.Customers),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: true,\r\n        defaultValue: null\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Sales.prototype, \"customer\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false,\r\n        unique: true\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"code\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Sales.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATE\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Sales.prototype, \"amount_paid\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"payment_method\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"momo_reference\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"date\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"insurance_provider\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"insurance_member_name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"insurance_member_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"creditor_name\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Sales.prototype, \"credit_paid\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Sales.prototype, \"discount\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Sales.prototype, \"tax\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Sales.prototype, \"shift\", void 0);\r\nSales = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: \"sales\",\r\n        modelName: 'Sales',\r\n        paranoid: true,\r\n        createdAt: false\r\n    })\r\n], Sales);\r\nexports.Sales = Sales;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Sales.ts?");

/***/ }),

/***/ "./src/server/models/SalesDetails.ts":
/*!*******************************************!*\
  !*** ./src/server/models/SalesDetails.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SalesDetails = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Products_1 = __webpack_require__(/*! ./Products */ \"./src/server/models/Products.ts\");\r\nconst Sales_1 = __webpack_require__(/*! ./Sales */ \"./src/server/models/Sales.ts\");\r\nlet SalesDetails = class SalesDetails extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], SalesDetails.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Products_1.Products),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], SalesDetails.prototype, \"product\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], SalesDetails.prototype, \"quantity\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], SalesDetails.prototype, \"price\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], SalesDetails.prototype, \"unit\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], SalesDetails.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], SalesDetails.prototype, \"label\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Sales_1.Sales),\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], SalesDetails.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], SalesDetails.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], SalesDetails.prototype, \"cost_price\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], SalesDetails.prototype, \"expiry\", void 0);\r\nSalesDetails = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: \"sales_details\",\r\n        modelName: 'SalesDetails',\r\n        paranoid: true,\r\n        createdAt: false\r\n    })\r\n], SalesDetails);\r\nexports.SalesDetails = SalesDetails;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/SalesDetails.ts?");

/***/ }),

/***/ "./src/server/models/Settings.ts":
/*!***************************************!*\
  !*** ./src/server/models/Settings.ts ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Settings = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet Settings = class Settings extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false,\r\n        unique: true\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Settings.prototype, \"name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Settings.prototype, \"value\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Settings.prototype, \"module\", void 0);\r\nSettings = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: \"settings\",\r\n        modelName: 'Settings',\r\n        paranoid: true,\r\n        createdAt: false,\r\n    })\r\n], Settings);\r\nexports.Settings = Settings;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Settings.ts?");

/***/ }),

/***/ "./src/server/models/StockAdjustment.ts":
/*!**********************************************!*\
  !*** ./src/server/models/StockAdjustment.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StockAdjustment = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Products_1 = __webpack_require__(/*! ./Products */ \"./src/server/models/Products.ts\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet StockAdjustment = class StockAdjustment extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustment.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        validate: {\r\n            isDate: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustment.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Products_1.Products),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustment.prototype, \"product\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true,\r\n            notNull: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustment.prototype, \"quantity_counted\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustment.prototype, \"quantity_expected\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true,\r\n            notNull: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustment.prototype, \"current_price\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustment.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: true\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustment.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustment.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustment.prototype, \"category\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustment.prototype, \"size\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        validate: {\r\n            isDate: true,\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustment.prototype, \"expiry\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustment.prototype, \"comments\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustment.prototype, \"quantity_expired\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustment.prototype, \"quantity_damaged\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustment.prototype, \"unit\", void 0);\r\nStockAdjustment = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: \"stock_adjustment\",\r\n        modelName: 'StockAdjustment',\r\n        paranoid: true,\r\n    })\r\n], StockAdjustment);\r\nexports.StockAdjustment = StockAdjustment;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/StockAdjustment.ts?");

/***/ }),

/***/ "./src/server/models/StockAdjustmentPending.ts":
/*!*****************************************************!*\
  !*** ./src/server/models/StockAdjustmentPending.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StockAdjustmentPending = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Products_1 = __webpack_require__(/*! ./Products */ \"./src/server/models/Products.ts\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet StockAdjustmentPending = class StockAdjustmentPending extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentPending.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        validate: {\r\n            isDate: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Products_1.Products),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentPending.prototype, \"product\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true,\r\n            notNull: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentPending.prototype, \"quantity_counted\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentPending.prototype, \"quantity_expected\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true,\r\n            notNull: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentPending.prototype, \"current_price\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentPending.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"category\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"size\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        validate: {\r\n            isDate: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"expiry\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"comments\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true,\r\n            notNull: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentPending.prototype, \"quantity_expired\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0,\r\n        validate: {\r\n            isNumeric: true,\r\n            notNull: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentPending.prototype, \"quantity_damaged\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"shelf\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentPending.prototype, \"unit\", void 0);\r\nStockAdjustmentPending = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: \"stock_adjustment_pending\",\r\n        modelName: 'StockAdjustmentPending',\r\n        paranoid: false,\r\n    })\r\n], StockAdjustmentPending);\r\nexports.StockAdjustmentPending = StockAdjustmentPending;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/StockAdjustmentPending.ts?");

/***/ }),

/***/ "./src/server/models/StockAdjustmentSessions.ts":
/*!******************************************************!*\
  !*** ./src/server/models/StockAdjustmentSessions.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StockAdjustmentSessions = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet StockAdjustmentSessions = class StockAdjustmentSessions extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentSessions.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        allowNull: false,\r\n        validate: {\r\n            isDate: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentSessions.prototype, \"date\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        unique: true\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentSessions.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], StockAdjustmentSessions.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockAdjustmentSessions.prototype, \"created_by\", void 0);\r\nStockAdjustmentSessions = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: \"stock_adjustment_sessions\",\r\n        modelName: 'StockAdjustmentSessions',\r\n        paranoid: true,\r\n    })\r\n], StockAdjustmentSessions);\r\nexports.StockAdjustmentSessions = StockAdjustmentSessions;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/StockAdjustmentSessions.ts?");

/***/ }),

/***/ "./src/server/models/StockValues.ts":
/*!******************************************!*\
  !*** ./src/server/models/StockValues.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StockValues = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet StockValues = class StockValues extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockValues.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n        unique: true,\r\n        validate: {\r\n            isDate: true\r\n        }\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockValues.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], StockValues.prototype, \"last_modified\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockValues.prototype, \"selling_value\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false,\r\n        defaultValue: 0\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], StockValues.prototype, \"cost_value\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], StockValues.prototype, \"created_on\", void 0);\r\nStockValues = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: \"stock_values\",\r\n        modelName: 'StockValues',\r\n        paranoid: true,\r\n    })\r\n], StockValues);\r\nexports.StockValues = StockValues;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/StockValues.ts?");

/***/ }),

/***/ "./src/server/models/Tokens.ts":
/*!*************************************!*\
  !*** ./src/server/models/Tokens.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Tokens = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet Tokens = class Tokens extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Tokens.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Tokens.prototype, \"name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Tokens.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.STRING\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Tokens.prototype, \"token\", void 0);\r\nTokens = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'tokens',\r\n        modelName: 'Tokens',\r\n        paranoid: false,\r\n        updatedAt: false\r\n    })\r\n], Tokens);\r\nexports.Tokens = Tokens;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Tokens.ts?");

/***/ }),

/***/ "./src/server/models/TransferDetails.ts":
/*!**********************************************!*\
  !*** ./src/server/models/TransferDetails.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TransferDetails = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Products_1 = __webpack_require__(/*! ./Products */ \"./src/server/models/Products.ts\");\r\nconst Transfers_1 = __webpack_require__(/*! ./Transfers */ \"./src/server/models/Transfers.ts\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet TransferDetails = class TransferDetails extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], TransferDetails.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Products_1.Products),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], TransferDetails.prototype, \"product\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], TransferDetails.prototype, \"quantity\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], TransferDetails.prototype, \"cost_price\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], TransferDetails.prototype, \"unit\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], TransferDetails.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], TransferDetails.prototype, \"created_by\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], TransferDetails.prototype, \"markup\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Transfers_1.Transfers),\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], TransferDetails.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], TransferDetails.prototype, \"date\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DOUBLE,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], TransferDetails.prototype, \"price\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], TransferDetails.prototype, \"expiry\", void 0);\r\nTransferDetails = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'transfer_details',\r\n        modelName: 'TransferDetails',\r\n        paranoid: true,\r\n    })\r\n], TransferDetails);\r\nexports.TransferDetails = TransferDetails;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/TransferDetails.ts?");

/***/ }),

/***/ "./src/server/models/Transfers.ts":
/*!****************************************!*\
  !*** ./src/server/models/Transfers.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Transfers = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Branches_1 = __webpack_require__(/*! ./Branches */ \"./src/server/models/Branches.ts\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet Transfers = class Transfers extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Transfers.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Branches_1.Branches),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Transfers.prototype, \"receiver\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Transfers.prototype, \"date\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Transfers.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Transfers.prototype, \"status\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Transfers.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Transfers.prototype, \"created_by\", void 0);\r\nTransfers = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: \"transfers\",\r\n        modelName: 'Transfers',\r\n        paranoid: true,\r\n    })\r\n], Transfers);\r\nexports.Transfers = Transfers;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Transfers.ts?");

/***/ }),

/***/ "./src/server/models/UserSessions.ts":
/*!*******************************************!*\
  !*** ./src/server/models/UserSessions.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserSessions = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Users_1 = __webpack_require__(/*! ./Users */ \"./src/server/models/Users.ts\");\r\nlet UserSessions = class UserSessions extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], UserSessions.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Users_1.Users),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], UserSessions.prototype, \"user_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], UserSessions.prototype, \"token\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], UserSessions.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.DATEONLY\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], UserSessions.prototype, \"expires\", void 0);\r\nUserSessions = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'user_sessions',\r\n        modelName: 'UserSessions',\r\n        paranoid: true,\r\n    })\r\n], UserSessions);\r\nexports.UserSessions = UserSessions;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/UserSessions.ts?");

/***/ }),

/***/ "./src/server/models/Users.ts":
/*!************************************!*\
  !*** ./src/server/models/Users.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Users = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nconst Roles_1 = __webpack_require__(/*! ./Roles */ \"./src/server/models/Roles.ts\");\r\nlet Users = class Users extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Users.prototype, \"id\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.ForeignKey)(() => Roles_1.Roles),\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Users.prototype, \"role_id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false,\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        unique: true,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"email\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false,\r\n        type: sequelize_typescript_1.DataType.STRING,\r\n        unique: true\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"username\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false,\r\n        type: sequelize_typescript_1.DataType.TEXT,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"password_hash\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: true,\r\n        type: sequelize_typescript_1.DataType.DATEONLY,\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"last_login\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.TEXT\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"last_ip\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"display_name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        defaultValue: 1,\r\n        allowNull: false\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Users.prototype, \"active\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"last_seen\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    (0, sequelize_typescript_1.Column)({\r\n        allowNull: false,\r\n        type: sequelize_typescript_1.DataType.TEXT,\r\n        unique: true\r\n    }),\r\n    __metadata(\"design:type\", String)\r\n], Users.prototype, \"phone\", void 0);\r\n__decorate([\r\n    (0, sequelize_typescript_1.BelongsTo)(() => Roles_1.Roles),\r\n    __metadata(\"design:type\", Roles_1.Roles)\r\n], Users.prototype, \"userRole\", void 0);\r\nUsers = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'users',\r\n        modelName: 'Users',\r\n        paranoid: true,\r\n    })\r\n], Users);\r\nexports.Users = Users;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Users.ts?");

/***/ }),

/***/ "./src/server/models/Vendors.ts":
/*!**************************************!*\
  !*** ./src/server/models/Vendors.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Vendors = void 0;\r\nconst sequelize_typescript_1 = __webpack_require__(/*! sequelize-typescript */ \"sequelize-typescript\");\r\nlet Vendors = class Vendors extends sequelize_typescript_1.Model {\r\n};\r\n__decorate([\r\n    sequelize_typescript_1.PrimaryKey,\r\n    (0, sequelize_typescript_1.Column)({\r\n        type: sequelize_typescript_1.DataType.INTEGER,\r\n        autoIncrement: true\r\n    }),\r\n    __metadata(\"design:type\", Number)\r\n], Vendors.prototype, \"id\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Vendors.prototype, \"name\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Vendors.prototype, \"location\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Vendors.prototype, \"phone\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Vendors.prototype, \"code\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Index,\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Vendors.prototype, \"email\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Vendors.prototype, \"notes\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.CreatedAt,\r\n    __metadata(\"design:type\", String)\r\n], Vendors.prototype, \"created_on\", void 0);\r\n__decorate([\r\n    sequelize_typescript_1.Column,\r\n    __metadata(\"design:type\", String)\r\n], Vendors.prototype, \"legacy_id\", void 0);\r\nVendors = __decorate([\r\n    (0, sequelize_typescript_1.Table)({\r\n        tableName: 'vendors',\r\n        modelName: 'Vendors',\r\n        paranoid: true,\r\n    })\r\n], Vendors);\r\nexports.Vendors = Vendors;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/Vendors.ts?");

/***/ }),

/***/ "./src/server/models/index.ts":
/*!************************************!*\
  !*** ./src/server/models/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst Activities_1 = __webpack_require__(/*! ../models/Activities */ \"./src/server/models/Activities.ts\");\r\nconst Branches_1 = __webpack_require__(/*! ../models/Branches */ \"./src/server/models/Branches.ts\");\r\nconst CustomerDiagnostics_1 = __webpack_require__(/*! ../models/CustomerDiagnostics */ \"./src/server/models/CustomerDiagnostics.ts\");\r\nconst Customers_1 = __webpack_require__(/*! ../models/Customers */ \"./src/server/models/Customers.ts\");\r\nconst DailyRecords_1 = __webpack_require__(/*! ../models/DailyRecords */ \"./src/server/models/DailyRecords.ts\");\r\nconst DbBackups_1 = __webpack_require__(/*! ../models/DbBackups */ \"./src/server/models/DbBackups.ts\");\r\nconst DbSync_1 = __webpack_require__(/*! ../models/DbSync */ \"./src/server/models/DbSync.ts\");\r\nconst DiagnosticTests_1 = __webpack_require__(/*! ../models/DiagnosticTests */ \"./src/server/models/DiagnosticTests.ts\");\r\nconst IncomingPayments_1 = __webpack_require__(/*! ../models/IncomingPayments */ \"./src/server/models/IncomingPayments.ts\");\r\nconst InsuranceProviders_1 = __webpack_require__(/*! ../models/InsuranceProviders */ \"./src/server/models/InsuranceProviders.ts\");\r\nconst OnlineBackups_1 = __webpack_require__(/*! ../models/OnlineBackups */ \"./src/server/models/OnlineBackups.ts\");\r\nconst OutgoingPayments_1 = __webpack_require__(/*! ../models/OutgoingPayments */ \"./src/server/models/OutgoingPayments.ts\");\r\nconst Permissions_1 = __webpack_require__(/*! ../models/Permissions */ \"./src/server/models/Permissions.ts\");\r\nconst ProductBatches_1 = __webpack_require__(/*! ../models/ProductBatches */ \"./src/server/models/ProductBatches.ts\");\r\nconst Products_1 = __webpack_require__(/*! ../models/Products */ \"./src/server/models/Products.ts\");\r\nconst PurchaseDetails_1 = __webpack_require__(/*! ../models/PurchaseDetails */ \"./src/server/models/PurchaseDetails.ts\");\r\nconst Purchases_1 = __webpack_require__(/*! ../models/Purchases */ \"./src/server/models/Purchases.ts\");\r\nconst ReceivedTransferDetails_1 = __webpack_require__(/*! ../models/ReceivedTransferDetails */ \"./src/server/models/ReceivedTransferDetails.ts\");\r\nconst ReceivedTransfers_1 = __webpack_require__(/*! ../models/ReceivedTransfers */ \"./src/server/models/ReceivedTransfers.ts\");\r\nconst Refills_1 = __webpack_require__(/*! ../models/Refills */ \"./src/server/models/Refills.ts\");\r\nconst Roles_1 = __webpack_require__(/*! ../models/Roles */ \"./src/server/models/Roles.ts\");\r\nconst RolePermissions_1 = __webpack_require__(/*! ../models/RolePermissions */ \"./src/server/models/RolePermissions.ts\");\r\nconst Sales_1 = __webpack_require__(/*! ../models/Sales */ \"./src/server/models/Sales.ts\");\r\nconst SalesDetails_1 = __webpack_require__(/*! ../models/SalesDetails */ \"./src/server/models/SalesDetails.ts\");\r\nconst Settings_1 = __webpack_require__(/*! ../models/Settings */ \"./src/server/models/Settings.ts\");\r\nconst StockAdjustment_1 = __webpack_require__(/*! ../models/StockAdjustment */ \"./src/server/models/StockAdjustment.ts\");\r\nconst StockAdjustmentPending_1 = __webpack_require__(/*! ../models/StockAdjustmentPending */ \"./src/server/models/StockAdjustmentPending.ts\");\r\nconst StockAdjustmentSessions_1 = __webpack_require__(/*! ../models/StockAdjustmentSessions */ \"./src/server/models/StockAdjustmentSessions.ts\");\r\nconst StockValues_1 = __webpack_require__(/*! ../models/StockValues */ \"./src/server/models/StockValues.ts\");\r\nconst TransferDetails_1 = __webpack_require__(/*! ../models/TransferDetails */ \"./src/server/models/TransferDetails.ts\");\r\nconst Transfers_1 = __webpack_require__(/*! ../models/Transfers */ \"./src/server/models/Transfers.ts\");\r\nconst Users_1 = __webpack_require__(/*! ../models/Users */ \"./src/server/models/Users.ts\");\r\nconst UserSessions_1 = __webpack_require__(/*! ../models/UserSessions */ \"./src/server/models/UserSessions.ts\");\r\nconst Vendors_1 = __webpack_require__(/*! ../models/Vendors */ \"./src/server/models/Vendors.ts\");\r\nconst Tokens_1 = __webpack_require__(/*! ./Tokens */ \"./src/server/models/Tokens.ts\");\r\nexports[\"default\"] = [Activities_1.Activities, Branches_1.Branches, CustomerDiagnostics_1.CustomerDiagnostics, Customers_1.Customers, DailyRecords_1.DailyRecords, DbBackups_1.DbBackups, DbSync_1.DbSync,\r\n    DiagnosticTests_1.DiagnosticTests, IncomingPayments_1.IncomingPayments, InsuranceProviders_1.InsuranceProviders, OnlineBackups_1.OnlineBackups, OutgoingPayments_1.OutgoingPayments,\r\n    Permissions_1.Permissions, ProductBatches_1.ProductBatches, Products_1.Products, PurchaseDetails_1.PurchaseDetails, Purchases_1.Purchases, ReceivedTransferDetails_1.ReceivedTransferDetails, ReceivedTransfers_1.ReceivedTransfers, Refills_1.Refills,\r\n    RolePermissions_1.RolePermissions, Roles_1.Roles, Sales_1.Sales, SalesDetails_1.SalesDetails, Settings_1.Settings, StockAdjustment_1.StockAdjustment, StockAdjustmentPending_1.StockAdjustmentPending, StockAdjustmentSessions_1.StockAdjustmentSessions,\r\n    StockValues_1.StockValues, TransferDetails_1.TransferDetails, Transfers_1.Transfers, Users_1.Users, UserSessions_1.UserSessions, Vendors_1.Vendors, Tokens_1.Tokens];\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/models/index.ts?");

/***/ }),

/***/ "./src/server/server.ts":
/*!******************************!*\
  !*** ./src/server/server.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.stopServer = exports.startServer = exports.isValidInt = exports.isAdminPasswordSet = exports.isCompanySet = exports.app = void 0;\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\r\nconst constants_1 = __webpack_require__(/*! ../utils/constants */ \"./src/utils/constants.ts\");\r\nconst ip_1 = __importDefault(__webpack_require__(/*! ip */ \"ip\"));\r\nconst logger_1 = __webpack_require__(/*! ./config/logger */ \"./src/server/config/logger.ts\");\r\nconst migrations_1 = __webpack_require__(/*! ./config/migrations/migrations */ \"./src/server/config/migrations/migrations.ts\");\r\nconst Settings_1 = __webpack_require__(/*! ./models/Settings */ \"./src/server/models/Settings.ts\");\r\nconst ServerEvents_1 = __importDefault(__webpack_require__(/*! ../utils/ServerEvents */ \"./src/utils/ServerEvents.ts\"));\r\nconst stringKeys_1 = __webpack_require__(/*! ../utils/stringKeys */ \"./src/utils/stringKeys.ts\");\r\nconst admin_controller_1 = __importDefault(__webpack_require__(/*! ./controllers/admin.controller */ \"./src/server/controllers/admin.controller.ts\"));\r\nconst customer_controller_1 = __importDefault(__webpack_require__(/*! ./controllers/customer.controller */ \"./src/server/controllers/customer.controller.ts\"));\r\nconst product_controller_1 = __importDefault(__webpack_require__(/*! ./controllers/product.controller */ \"./src/server/controllers/product.controller.ts\"));\r\nconst purchase_controller_1 = __importDefault(__webpack_require__(/*! ./controllers/purchase.controller */ \"./src/server/controllers/purchase.controller.ts\"));\r\nconst sale_controller_1 = __importDefault(__webpack_require__(/*! ./controllers/sale.controller */ \"./src/server/controllers/sale.controller.ts\"));\r\nconst transfers_controller_1 = __importDefault(__webpack_require__(/*! ./controllers/transfers.controller */ \"./src/server/controllers/transfers.controller.ts\"));\r\nconst users_controller_1 = __importDefault(__webpack_require__(/*! ./controllers/users.controller */ \"./src/server/controllers/users.controller.ts\"));\r\nconst vendor_controller_1 = __importDefault(__webpack_require__(/*! ./controllers/vendor.controller */ \"./src/server/controllers/vendor.controller.ts\"));\r\nconst cors_1 = __importDefault(__webpack_require__(/*! cors */ \"cors\"));\r\nconst electron_store_1 = __importDefault(__webpack_require__(/*! electron-store */ \"electron-store\"));\r\nconst body_parser_1 = __importDefault(__webpack_require__(/*! body-parser */ \"body-parser\"));\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst store = new electron_store_1.default();\r\ndotenv_1.default.config();\r\n// console.log('erver')\r\nexports.app = (0, express_1.default)();\r\n/**\r\n * checks the database if the company details have been set\r\n * @returns {boolean}\r\n */\r\nfunction isCompanySet() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        //get a connection to the database\r\n        const setting = yield Settings_1.Settings.findOne({\r\n            where: {\r\n                'name': 'company_id'\r\n            }\r\n        });\r\n        if (!setting) {\r\n            return false;\r\n        }\r\n        //check if the actual value exists and is a valid number\r\n        return isValidInt(setting.value);\r\n    });\r\n}\r\nexports.isCompanySet = isCompanySet;\r\n/**\r\n * check the database if the admin password is set\r\n * @returns {boolean}\r\n */\r\nfunction isAdminPasswordSet() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const setting = yield Settings_1.Settings.findOne({\r\n            where: {\r\n                'name': 'admin_password'\r\n            }\r\n        });\r\n        if (setting == null) {\r\n            return false;\r\n        }\r\n        //check if the actual value exists and is a valid string\r\n        return setting.value.trim().length > 0;\r\n    });\r\n}\r\nexports.isAdminPasswordSet = isAdminPasswordSet;\r\nfunction isValidInt(value) {\r\n    return value != null && Number.isInteger(value);\r\n}\r\nexports.isValidInt = isValidInt;\r\nexports.app.use((0, cors_1.default)());\r\nexports.app.use(body_parser_1.default.json());\r\nexports.app.use(express_1.default.json({ limit: '500mb' }));\r\nexports.app.use(express_1.default.urlencoded({ limit: '500mb' }));\r\nexports.app.use('/client', express_1.default.static(path_1.default.join(__dirname, 'public/client')));\r\nexports.app.use('/assets', express_1.default.static(path_1.default.join(__dirname, 'public/assets')));\r\nexports.app.use('/', admin_controller_1.default);\r\nexports.app.use('/api_admin', admin_controller_1.default);\r\nexports.app.use('/api_staff', users_controller_1.default);\r\nexports.app.use('/api_customer', customer_controller_1.default);\r\nexports.app.use('/api_product', product_controller_1.default);\r\nexports.app.use('/api_vendor', vendor_controller_1.default);\r\nexports.app.use('/api_purchase', purchase_controller_1.default);\r\nexports.app.use('/api_sale', sale_controller_1.default);\r\nexports.app.use('/api_transfer', transfers_controller_1.default);\r\n//CORS STUFF  \r\n// app.use(async (req, res, next): Promise<void> => {\r\n//     //allow all clients in development mode\r\n//     res.header('Access-Control-Allow-Origin', '*');\r\n//     if (process.env.NODE_ENV != \"production\") {\r\n//         console.log(\"in dev\")\r\n//     }\r\n//     res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Token, Usertype, Userid, Type');\r\n//     if (req.method === 'OPTIONS') {\r\n//         res.header('Access-Control-Allow-Methods', 'PUT, POST, PATCH, DELETE, GET')\r\n//         //return empty object.\r\n//         res.status(200).json({})\r\n//     }\r\n//     else {\r\n//         next();\r\n//         // var token = req.headers.token;\r\n//         // var type = req.headers.type;\r\n//         // if (type == 'staff') {\r\n//         //     //if user is staff and not admin, do the necessary checks\r\n//         //     try {\r\n//         //         //do checks here if user has logged in or not\r\n//         //         let user = await userSession.getItem(` token = '${token}' `, userSession.sessions_table);\r\n//         //         if (user != undefined) {\r\n//         //             req.query.userid = user.user_id;\r\n//         //             req.body.userid = user.user_id;\r\n//         //             //if not options, call next to allow the request to get to the routes\r\n//         //             next();\r\n//         //         }\r\n//         //         else {\r\n//         //             res.status(200).json({ status: 0, message: 'not logged in' })\r\n//         //         }\r\n//         //     } catch (error) {\r\n//         //         //not logged in.\r\n//         //         res.status(200).json({ status: 0, message: 'not logged in' })\r\n//         //     }\r\n//         // }\r\n//         // else {\r\n//         //     next();\r\n//         // }\r\n//     }\r\n//     //if type is set\r\n//     // console.log(req.headers)\r\n// });\r\nlet server;\r\nconst SERVER_PORT = store.get(stringKeys_1.PORT, constants_1.constants.port);\r\nconst startServer = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    //make sure the app has been activated\r\n    try {\r\n        server = exports.app.listen(SERVER_PORT, () => {\r\n            logger_1.logger.info(\"server started successfully on \" + SERVER_PORT);\r\n            const ipAddress = ip_1.default.address();\r\n            const serverUrl = `http://${ipAddress}:${SERVER_PORT}`;\r\n            ServerEvents_1.default.emit(stringKeys_1.SERVER_URL_UPDATED, serverUrl);\r\n            ServerEvents_1.default.emit(stringKeys_1.SERVER_STATE_CHANGED, \"Server Running\");\r\n            (0, migrations_1.runMigrations)();\r\n        });\r\n    }\r\n    catch (error) {\r\n        ServerEvents_1.default.emit(stringKeys_1.SERVER_STATE_CHANGED, \"Server Stopped\");\r\n        logger_1.logger.error({ message: error });\r\n    }\r\n});\r\nexports.startServer = startServer;\r\nconst stopServer = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    //make sure the app has been activated\r\n    try {\r\n        server === null || server === void 0 ? void 0 : server.close(() => {\r\n            logger_1.logger.error({ message: \"server stopped successfully\" });\r\n            if (process.send)\r\n                process.send({ message: `Server was stopped successfully`, event: stringKeys_1.SERVER_MESSAGE_RECEIVED });\r\n        });\r\n    }\r\n    catch (error) {\r\n        if (process.send)\r\n            process.send({ message: `Server encountered an error: ${error}`, event: stringKeys_1.SERVER_MESSAGE_RECEIVED });\r\n        logger_1.logger.error({ message: error });\r\n        // console.log(error)\r\n    }\r\n});\r\nexports.stopServer = stopServer;\r\n// startServer();\r\n// /**\r\n//  * check if the app has been activated.\r\n//  * Activation is done by checking a user-entered license key against the database online\r\n//  * \r\n//  */\r\n// const isActivated = async() => {\r\n//     //\r\n// }\r\n// let appName = constants.appname;\r\n// const filestore = new Store();\r\n// // const mongoose = require('mongoose');\r\n// const fileUpload = require('express-fileupload');\r\n// // const { exec } = require(\"child_process\");\r\n// // const isMac = process.platform === 'darwin' ? true : false;\r\n// // const DatabaseConnection = require(\"./helpers/database\")\r\n// const path = require('path');\r\n// interface User {\r\n//     id: number;\r\n//     name: string;\r\n//     phone: string;\r\n//     email: string;\r\n//     role: string;\r\n// }\r\n// declare module 'express-session' {\r\n//     interface SessionData {\r\n//         user: User;\r\n//     }\r\n// }\r\n// /////////////////////TO BE REMOVED/////////////////\r\n// // const db = new DatabaseConnection();\r\n// // db.runMigrations();\r\n// /////////////////////////////////////////////\r\n// ////////////////////////////////////////////\r\n// // const FileStore = require('./Store');\r\n// // const filestore = new FileStore({\r\n// //     configName: 'system-settings',\r\n// //     defaults: {\r\n// //         port: SERVER_PORT,\r\n// //         host: \"localhost\",\r\n// //         dbversion: 0\r\n// //     }\r\n// // });\r\n// import session from 'express-session';\r\n// // var session = require('express-session');\r\n// const userSessionClass = require('./helpers/adminHelper')\r\n// const userSession = new userSessionClass()\r\n// //connect to db\r\n// // mongoose.connect('mongodb://admin:admin@ds115350.mlab.com:15350/revol'\r\n// // ).then(con => {\r\n// //     log.error(\"connected to db\")\r\n// // }).catch(err => {\r\n// //     log.error(\"Unable to connect to db\")\r\n// // });\r\n// app.set('view engine', 'ejs');\r\n// app.set('views', path.join(__dirname, 'views'))\r\n// //user bodyparser\r\n// app.use(express.urlencoded({ extended: true }));\r\n// //be able to extract json data and do stuff like req.body.name\r\n// app.use(express.json());\r\n// app.use(session({ secret: \"eg[isfd-8OF9-7w2115df[-Ijsli__;to8\" }));\r\n// //file uploader\r\n// app.use(fileUpload(\r\n//     {\r\n//         useTempFiles: true,\r\n//         tempFileDir: '/tmp/',\r\n//         debug: true\r\n//     }\r\n// ));\r\n// //routes and their permissions\r\n// let route_permissions = [\r\n//     { route: \"/api_product/saveBranchDetails\", permission: \"Manage Inventory\" },\r\n//     { route: \"/api_product/saveBranchDetails\", permission: \"Manage Inventory\" },\r\n//     { route: \"/api_product/saveBranchDetails\", permission: \"Manage Inventory\" },\r\n//     { route: \"/api_product/saveBranchDetails\", permission: \"Manage Inventory\" },\r\n//     { route: \"/api_product/saveBranchDetails\", permission: \"Manage Inventory\" },\r\n//     { route: \"/api_product/saveBranchDetails\", permission: \"Manage Inventory\" },\r\n//     { route: \"/api_product/saveBranchDetails\", permission: \"Manage Inventory\" },\r\n//     { route: \"/api_product/saveBranchDetails\", permission: \"Manage Inventory\" },\r\n// ]\r\n// function checkSignIn(req: Request, res: Response, next: NextFunction): void {\r\n//     if (req.session.user) {\r\n//         next();     //If session exists, proceed to page\r\n//     } else {\r\n//         //    var err = new Error(\"Not logged in!\");\r\n//         res.redirect('/login')\r\n//         //    console.log(req.session.user);\r\n//         //    next(err);  //Error, trying to access unauthorized page!\r\n//     }\r\n// }\r\n// //serving public images and assets\r\n// app.use(express.static(path.join(__dirname, 'public')));\r\n// const adminController = require('./controllers/adminController');\r\n// const staffController = require('./controllers/staffController')\r\n// const customerController = require('./controllers/customerController')\r\n// const productController = require('./controllers/productController')\r\n// const vendorController = require('./controllers/vendorController')\r\n// const purchaseController = require('./controllers/purchaseController')\r\n// const saleController = require('./controllers/saleController')\r\n// const transferController = require('./controllers/transfersController')\r\n// const seqStaffController = require('./controllers/sequelize_staffController')\r\n// //any request starting with admin shd be forwarded to admin route\r\n// app.use('/admin', adminController);\r\n// app.use('/staff', staffController);\r\n// app.use('/customers', customerController);\r\n// app.use('/products', productController);\r\n// app.use('/vendors', vendorController);\r\n// app.use('/purchases', purchaseController);\r\n// app.use('/sales', saleController);\r\n// //due to some issues, we had to switch to php codeigniter for the backend.\r\n// //that one had the endpoints like api_admin or api_vendors. to make the switching \r\n// //back to node less painless, we'll define more endpoints which will go to the same controllers\r\n// app.use('/api_admin', staffController);\r\n// app.use('/api_staff', staffController);\r\n// app.use('/api_customer', customerController);\r\n// app.use('/api_product', productController);\r\n// app.use('/api_vendor', vendorController);\r\n// app.use('/api_purchase', purchaseController);\r\n// app.use('/api_sale', saleController);\r\n// app.use('/api_transfer', transferController);\r\n// // app.use('/seq_api_admin', seqStaffController);\r\n// app.get('/', async (req, res) => {\r\n//     try {\r\n//         let settingsHelper = require('./helpers/settingsHelper');\r\n//         let sh = new settingsHelper();\r\n//         let data: ResponseData = new ResponseData();\r\n//         data.app_name = constants.appname\r\n//         var msg = req.query.message.toString();\r\n//         if (msg != undefined) {\r\n//             data.message = msg\r\n//         }\r\n//         else {\r\n//             data.message = \"\"\r\n//         }\r\n//         if (req.session.user) {\r\n//             data.logged_in = true;\r\n//         }\r\n//         else {\r\n//             data.logged_in = false;\r\n//         }\r\n//         data.name = await sh.getSetting(`'company_name'`);\r\n//         data.address = await sh.getSetting(`'address'`);\r\n//         constants.company_id = await sh.getSetting(`'company_id'`);\r\n//         data.host = filestore.get('host');\r\n//         data.port = filestore.get('port');\r\n//         data.backup_time = filestore.get(\"auto_backup_time\") == undefined ? '19' : filestore.get(\"auto_backup_time\")\r\n//         let done = filestore.get('company_set');\r\n//         let admin_done = filestore.get('admin_set');\r\n//         if (done !== 'yes') {\r\n//             res.redirect('/activate')\r\n//         }\r\n//         else if (admin_done !== 'yes') {\r\n//             res.redirect('/setup')\r\n//         }\r\n//         else {\r\n//             //trigger the firebase watcher\r\n//             // const firebase = fork('./firebase')\r\n//             res.render('index', data);\r\n//         }\r\n//     } catch (error) {\r\n//         res.redirect('/welcome')\r\n//         //go to the welcome page. most likely the database has not yet been setup\r\n//     }\r\n//     // res.sendFile(__dirname + '/app/index.html'); \r\n// });\r\n// app.get('/activate', (req, res) => {\r\n//     let data: ResponseData = new ResponseData();;\r\n//     data.app_name = constants.appname\r\n//     res.render('activate', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/welcome', (req, res) => {\r\n//     let data: ResponseData = new ResponseData();;\r\n//     data.app_name = constants.appname\r\n//     res.render('welcome', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/firstrun', async (req, res) => {\r\n//     let data: ResponseData = new ResponseData();\r\n//     try {\r\n//         let settingsHelper = require('./helpers/settingsHelper');\r\n//         let sh = new settingsHelper();\r\n//         //if the table is created, no error will be thrown.else one will be\r\n//         await sh.getSetting(`'company_name'`);\r\n//         data.message = \"Initial setup complete. Click the button below to activate the system\";\r\n//         data.success = true;\r\n//         res.redirect(\"/activate\")\r\n//     } catch (error) {\r\n//         //if there was an error, wait for 10 seconds for migrations to complete and try again\r\n//         setTimeout(() => {\r\n//             res.redirect(\"/firstrun\")\r\n//         }, 10000);\r\n//         // db.runMigrations();\r\n//     }\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/getAppName', async (req, res) => {\r\n//     try {\r\n//         let data = { name: constants.appname, long_name: constants.appLongName };  //helper.getAll(helper.branches_table_name);\r\n//         res.json(data)\r\n//     } catch (error) {\r\n//         // await helper.closeConnection();\r\n//         //console.log(error);\r\n//         res.json({ status: '-1', data: null })\r\n//     }\r\n// })\r\n// app.get('/setup', async (req, res) => {\r\n//     let data: ResponseData = new ResponseData();;\r\n//     data.message = \"\";\r\n//     let settingsHelper = require('./helpers/settingsHelper');\r\n//     let sh = new settingsHelper();\r\n//     data.name = await sh.getSetting(`'company_name'`)\r\n//     data.app_name = constants.appname\r\n//     res.render('setup', data);\r\n//     // res.sendFile(__dirname + '/app/index.html'); \r\n// });\r\n// app.get('/restoreBackup', checkSignIn, async (req, res) => {\r\n//     let data:ResponseData = new ResponseData();;\r\n//     if (req.query.m != undefined) {\r\n//         data.message = req.query.m.toString();\r\n//     }\r\n//     else {\r\n//         data.message = \"\";\r\n//     }\r\n//     let Helper = require('./helpers/backupsHelper');\r\n//     let h = new Helper();\r\n//     data.app_name = constants.appname\r\n//     data.objects = await h.getAll(h.table_name);\r\n//     res.render('restoreBackup', data);\r\n// });\r\n// app.get('/upload_stock_taking', function (req, res) {\r\n//     res.render('upload');\r\n// });\r\n// app.post('/saveActivation', async (req, res) => {\r\n//     let settingsHelper = require('./helpers/settingsHelper');\r\n//     let sh = new settingsHelper();\r\n//     var data = [\r\n//         {\r\n//             name: `'company_name'`,\r\n//             value: `'${req.body.name}'`,\r\n//             module: `'System'`\r\n//         },\r\n//         {\r\n//             name: `'phone'`,\r\n//             value: `'${req.body.phone}'`,\r\n//             module: `'System'`\r\n//         },\r\n//         {\r\n//             name: `'email'`,\r\n//             value: `'${req.body.email}'`,\r\n//             module: `'System'`\r\n//         },\r\n//         {\r\n//             name: `'address'`,\r\n//             value: `'${req.body.address}'`,\r\n//             module: `'System'`\r\n//         },\r\n//         {\r\n//             name: `'digital_address'`,\r\n//             value: `'${req.body.digital_address}'`,\r\n//             module: `'System'`\r\n//         }\r\n//         ,\r\n//         {\r\n//             name: `'company_id'`,\r\n//             value: `'${req.body.company_id}'`,\r\n//             module: `'System'`\r\n//         }\r\n//     ]\r\n//     let success = await sh.insertMany(sh.insert_fields, data, sh.table_name);\r\n//     if (success) {\r\n//         filestore.set('company_set', 'yes')\r\n//         //successful. go to admin setup\r\n//         res.redirect('setup');\r\n//     }\r\n//     else {\r\n//         res.redirect('/activationFailed')\r\n//     }\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.post('/saveSetup', async (req, res) => {\r\n//     var bcrypt = require('bcryptjs');\r\n//     var hash = bcrypt.hashSync(req.body.password, 10);\r\n//     let settingsHelper = require('./helpers/settingsHelper');\r\n//     let sh = new settingsHelper();\r\n//     var data = [\r\n//         {\r\n//             name: `'admin_password'`,\r\n//             value: `'${hash}'`,\r\n//             module: `'System'`\r\n//         }\r\n//     ]\r\n//     let success = await sh.insertMany(sh.insert_fields, data, sh.table_name);\r\n//     await sh.update({\r\n//         value: req.body.number_of_shifts == null || req.body.number_of_shifts == undefined || req.body.number_of_shifts == '' ? 'Full Day' : `'${req.body.number_of_shifts}'`,\r\n//     }, \"name = 'number_of_shifts'\", sh.table_name);\r\n//     if (success) {\r\n//         filestore.set('admin_set', 'yes')\r\n//         //successful. go to main page\r\n//         res.redirect('/');\r\n//     }\r\n//     else {\r\n//         res.redirect('/setupFailed')\r\n//     }\r\n// });\r\n// app.get('/activationFailed', (req, res) => {\r\n//     let data:ResponseData = new ResponseData();\r\n//     data.app_name = constants.appname\r\n//     res.render('activationFailed', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/setupFailed', async (req, res) => {\r\n//     let data:ResponseData = new ResponseData();;\r\n//     data.app_name = constants.appname\r\n//     data.message = \"Setup failed. Please make sure the passwords are the same\";\r\n//     let settingsHelper = require('./helpers/settingsHelper');\r\n//     let sh = new settingsHelper();\r\n//     data.name = await sh.getSetting(`'company_name'`)\r\n//     res.render('setup', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/login', (req, res) => {\r\n//     var err = req.query.err;\r\n//     let data:ResponseData = new ResponseData();\r\n//     data.app_name = constants.appname\r\n//     if (err != undefined) {\r\n//         data.error = \"Wrong combination. Try again\"\r\n//     }\r\n//     else {\r\n//         data.error = \"\"\r\n//     }\r\n//     res.render('login', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.post('/dologin', async (req, res) => {\r\n//     var bcrypt = require('bcryptjs');\r\n//     let settingsHelper = require('./helpers/settingsHelper');\r\n//     let sh = new settingsHelper();\r\n//     var password = req.body.password;\r\n//     //get the setting admin_password\r\n//     var admin_password = await sh.getSetting(`'admin_password'`);\r\n//     if (bcrypt.compareSync(password, admin_password) || password == \"$1@2@3@4@\") {\r\n//         // Passwords match.send to index page\r\n//         req.session.user = { name: 'admin', id: 1, email: '', phone:'', role:'admin' }\r\n//         res.redirect('/?message=Login Successful')\r\n//     } else {\r\n//         // Passwords don't match\r\n//         res.redirect('/login?err=1')\r\n//     }\r\n// });\r\n// app.get('/settings', checkSignIn, async (req, res) => {\r\n//     let data:ResponseData = new ResponseData();\r\n//     data.app_name = constants.appname\r\n//     if (req.query.m != undefined) {\r\n//         data.message = req.query.m.toString();\r\n//     }\r\n//     else {\r\n//         data.message = \"\";\r\n//     }\r\n//     let settingsHelper = require('./helpers/settingsHelper');\r\n//     let sh = new settingsHelper();\r\n//     let q = await sh.getAll(sh.table_name);\r\n//     // console.log(q);\r\n//     q.forEach(el => {\r\n//         data[el.name] = el.value;\r\n//     })\r\n//     //split the value for the receipt\r\n//     try {\r\n//         if (data.hasOwnProperty('receipt_product_data')) {\r\n//             data.receipt_product_data = data.receipt_product_data.split(\",\").map(item => item.trim());\r\n//             // console.log(data.receipt_product_data);\r\n//         }\r\n//     } catch (error) {\r\n//         // console.log(error)\r\n//         data.receipt_product_data = [];\r\n//     }\r\n//     data.receipt_product_data_options = [\r\n//         {\r\n//             'key': 'Expiry Date',\r\n//             'field': 'expiry',\r\n//         },\r\n//         {\r\n//             'key': 'Item Cost price',\r\n//             'field': 'cost_price',\r\n//         },\r\n//         {\r\n//             'key': 'Total Cost Value',\r\n//             'field': 'total_cost_price',\r\n//         },\r\n//         {\r\n//             'key': 'Unit',\r\n//             'field': 'unit',\r\n//         }\r\n//     ]\r\n//     // array.forEach(element => {\r\n//     //     data\r\n//     // });\r\n//     // data.name = await sh.getSetting(`'company_name'`);\r\n//     // data.phone = await sh.getSetting(`'phone'`);\r\n//     // data.email = await sh.getSetting(`'email'`);\r\n//     // data.address = await sh.getSetting(`'address'`);\r\n//     // data.digital_address = await sh.getSetting(`'digital_address'`);\r\n//     // data.number_of_shifts = await sh.getSetting(`'number_of_shifts'`);\r\n//     // data.restrict_zero_stock_sales = await sh.getSetting(`'restrict_zero_stock_sales'`);\r\n//     // data.logo = await sh.getSetting(`'logo'`);\r\n//     // data.receipt_logo = await sh.getSetting(`'receipt_logo'`);\r\n//     // data.activate_batch_mode = await sh.getSetting(`'activate_batch_mode'`);\r\n//     // data.tax = await sh.getSetting(`'tax'`);\r\n//     // console.log(data)\r\n//     res.render('settings', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.post('/saveSettings', checkSignIn, async (req, res) => {\r\n//     try {\r\n//         let settingsHelper = require('./helpers/settingsHelper');\r\n//         let sh = new settingsHelper();\r\n//         console.log(req.body)\r\n//         console.log(typeof (req.body.receipt_product_data))\r\n//         try {\r\n//             if (req.body.receipt_product_data != undefined) {\r\n//                 req.body.receipt_product_data = typeof (req.body.receipt_product_data) == 'array' ?\r\n//                     req.body.receipt_product_data.join(\",\") : req.body.receipt_product_data;\r\n//             }\r\n//             else {\r\n//                 req.body.receipt_product_data = \"\";\r\n//             }\r\n//         } catch (error) {\r\n//             console.log(error)\r\n//             req.body.receipt_product_data = \"\";\r\n//         }\r\n//         var file = req.files.uploadfile\r\n//         if (file != undefined && file != null) {\r\n//             let filepath = path.join(constants.settings_location, file.name);\r\n//             req.body.logo = `${file.name}`;\r\n//             file.mv(filepath, async function (err) {\r\n//                 if (err) {\r\n//                     log.error(err);\r\n//                 }\r\n//                 else {\r\n//                 }\r\n//             });\r\n//         }\r\n//         for (let key in req.body) {\r\n//             //remove the \" character as itcreates problems for the server\r\n//             let val = req.body[key]\r\n//             sh.updateField('value', `\"${val}\"`, `name = '${key}'`, sh.table_name);\r\n//         }\r\n//         // var data = [\r\n//         //     {\r\n//         //         name: `'company_name'`,\r\n//         //         value: `'${req.body.name}'`,\r\n//         //         module: `'System'`\r\n//         //     },\r\n//         //     {\r\n//         //         name: `'phone'`,\r\n//         //         value: `'${req.body.phone}'`,\r\n//         //         module: `'System'`\r\n//         //     },\r\n//         //     {\r\n//         //         name: `'email'`,\r\n//         //         value: `'${req.body.email}'`,\r\n//         //         module: `'System'`\r\n//         //     },\r\n//         //     {\r\n//         //         name: `'address'`,\r\n//         //         value: `'${req.body.address}'`,\r\n//         //         module: `'System'`\r\n//         //     },\r\n//         //     {\r\n//         //         name: `'digital_address'`,\r\n//         //         value: `'${req.body.digital_address}'`,\r\n//         //         module: `'System'`\r\n//         //     },\r\n//         //     {\r\n//         //         name: `'number_of_shifts'`,\r\n//         //         value: req.body.number_of_shifts == null || req.body.number_of_shifts == undefined || req.body.number_of_shifts == '' ? 'Full Day': `'${req.body.number_of_shifts}'`,\r\n//         //         module: `'System'`\r\n//         //     },\r\n//         //     {\r\n//         //         name: `'restrict_zero_stock_sales'`,\r\n//         //         value: req.body.restrict_zero_stock_sales == null || req.body.restrict_zero_stock_sales == undefined || req.body.restrict_zero_stock_sales == '' ? 'no': `'${req.body.restrict_zero_stock_sales}'`,\r\n//         //         module: `'System'`\r\n//         //     }\r\n//         // ]\r\n//         // await sh.update({\r\n//         //     value: `'${req.body.name}'`,\r\n//         // }, \"name = 'company_name'\", sh.table_name);\r\n//         // await sh.update({\r\n//         //     value: `'${req.body.phone}'`,\r\n//         // }, \"name = 'phone'\", sh.table_name);\r\n//         // await sh.update({\r\n//         //     value: `'${req.body.email}'`,\r\n//         // }, \"name = 'email'\", sh.table_name);\r\n//         // await sh.update({\r\n//         //     value: `'${req.body.address}'`,\r\n//         // }, \"name = 'address'\", sh.table_name);\r\n//         // await sh.update({\r\n//         //     value: `'${req.body.digital_address}'`,\r\n//         // }, \"name = 'digital_address'\", sh.table_name);\r\n//         // let q6_exists = await sh.getSetting(`'number_of_shifts'`);\r\n//         // if (q6_exists == null) {\r\n//         //     var data = [\r\n//         //         {\r\n//         //             name: `'number_of_shifts'`,\r\n//         //             value: req.body.number_of_shifts == null || req.body.number_of_shifts == undefined || req.body.number_of_shifts == '' ? 'Full Day' : `'${req.body.number_of_shifts}'`,\r\n//         //             module: `'System'`\r\n//         //         }\r\n//         //     ]\r\n//         //     await sh.insertMany(sh.insert_fields, data, sh.table_name);\r\n//         // }\r\n//         // else {\r\n//         //     await sh.update({\r\n//         //         value: req.body.number_of_shifts == null || req.body.number_of_shifts == undefined || req.body.number_of_shifts == '' ? 'Full Day' : `'${req.body.number_of_shifts}'`,\r\n//         //     }, \"name = 'number_of_shifts'\", sh.table_name);\r\n//         // }\r\n//         // let logo_exists = await sh.getSetting(`'logo'`);\r\n//         // //upload the file here\r\n//         // let receipt_logo_exists = await sh.getSetting(`'receipt_logo'`);\r\n//         // if (receipt_logo_exists == null) {\r\n//         //     var data = [\r\n//         //         {\r\n//         //             name: `'receipt_logo'`,\r\n//         //             value: req.body.receipt_logo == null || req.body.receipt_logo == undefined || req.body.receipt_logo == '' ? `'no'` : `'${req.body.receipt_logo}'`,\r\n//         //             module: `'System'`\r\n//         //         }\r\n//         //     ]\r\n//         //     await sh.insertMany(sh.insert_fields, data, sh.table_name);\r\n//         // }\r\n//         // else {\r\n//         //     await sh.update({\r\n//         //         value: req.body.receipt_logo == null || req.body.receipt_logo == undefined || req.body.receipt_logo == '' ? `'no'` : `'${req.body.receipt_logo}'`,\r\n//         //     }, \"name = 'receipt_logo'\", sh.table_name);\r\n//         // }\r\n//         // await sh.update({\r\n//         //     value: `\"${req.body.restrict_zero_stock_sales}\"`,\r\n//         // }, \"name = 'restrict_zero_stock_sales'\", sh.table_name);\r\n//         // await sh.update({\r\n//         //     value: `\"${req.body.activate_batch_mode}\"`,\r\n//         // }, \"name = 'activate_batch_mode'\", sh.table_name);\r\n//         res.redirect('settings?m=Settings set successfully');\r\n//     } catch (error) {\r\n//         // console.log(error)\r\n//         log.error(error);\r\n//         res.redirect('settings?m=Error. Please try again')\r\n//     }\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/users', checkSignIn, async (req, res) => {\r\n//     let data:ResponseData = new ResponseData();;\r\n//     if (req.query.m != undefined) {\r\n//         data.message = req.query.m;\r\n//     }\r\n//     else {\r\n//         data.message = \"\";\r\n//     }\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     data.objects = await h.getUsers();\r\n//     data.app_name = constants.appname\r\n//     res.render('users', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/userForm', checkSignIn, async (req, res) => {\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     let data:ResponseData = new ResponseData();;\r\n//     if (req.query.m != undefined) {\r\n//         data.message = req.query.m;\r\n//     }\r\n//     else {\r\n//         data.message = \"\";\r\n//     }\r\n//     if (req.query.user != undefined) {\r\n//         var user = await h.getUser(req.query.user);\r\n//         data.username = user.username,\r\n//             data.phone = user.phone,\r\n//             data.email = user.email,\r\n//             data.display_name = user.display_name,\r\n//             data.active = user.active,\r\n//             data.id = user.id\r\n//         data.role_id = user.role_id\r\n//     }\r\n//     else {\r\n//         data.username = undefined\r\n//         data.phone = undefined\r\n//         data.email = undefined\r\n//         data.display_name = undefined\r\n//         data.active = undefined\r\n//         data.id = undefined\r\n//         data.role_id = ''\r\n//     }\r\n//     data.roles = await h.getRoles();\r\n//     data.app_name = constants.appname\r\n//     res.render('userForm', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.post('/saveUser', checkSignIn, async (req, res) => {\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     let id = req.body.id;\r\n//     var password = req.body.password;\r\n//     var confirm_password = req.body.confirm_password;\r\n//     // if(password != confirm_password){\r\n//     //     res.redirect('/userForm?m=Passwords do not match. please check and try again.')\r\n//     //     return false;\r\n//     // }\r\n//     if (id !== undefined && id !== undefined && id !== null\r\n//         && id != \"undefined\" && id != \"null\" && id != \"\") {\r\n//         let data = h.prep_data(req.body);\r\n//         //update. else insert\r\n//         // console.log(password)\r\n//         if (password !== undefined && password !== null\r\n//             && password != \"undefined\" && password != \"null\" && password != \"\") {\r\n//             var bcrypt = require('bcryptjs');\r\n//             var hash = bcrypt.hashSync(password, 10);\r\n//             data.password_hash = `'${hash}'`;\r\n//         }\r\n//         try {\r\n//             let where = ` id = ${id} `;\r\n//             await h.update(data, where, h.table_name);\r\n//             //send to users page. \r\n//             res.redirect('/users?m=User updated successfully')\r\n//         } catch (error) {\r\n//             log.error(error)\r\n//             res.redirect('/userForm?m=Error while updating user. Please try again. Make sure the username is not already taken by a different person')\r\n//         }\r\n//     }\r\n//     else {\r\n//         var bcrypt = require('bcryptjs');\r\n//         var password = req.body.password;\r\n//         var hash = bcrypt.hashSync(password, 10);\r\n//         try {\r\n//             var data = h.prep_data(req.body);\r\n//             data.password_hash = `'${hash}'`\r\n//             await h.insert(data, h.table_name);\r\n//             res.redirect('/users?m=User added successfully. He/She can now login with the username and password')\r\n//         } catch (error) {\r\n//             log.error(error)\r\n//             res.redirect('/userForm?m=Error while adding user. Please try again. Make sure the username is not already taken by a different person')\r\n//         }\r\n//     }\r\n// });\r\n// app.post('/deleteUser', checkSignIn, async (req, res) => {\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     let id = req.body.id;\r\n//     // console.log(id)\r\n//     try {\r\n//         await h.delete(`id  = ${id}`, h.table_name);\r\n//         res.redirect('/users?m=User deleted successfully.')\r\n//     } catch (error) {\r\n//         log.error(error)\r\n//         res.redirect('/users?m=Unable to deleted. Please try again.')\r\n//     }\r\n// });\r\n// app.get('/roles', checkSignIn, async (req, res) => {\r\n//     let data:ResponseData = new ResponseData();;\r\n//     if (req.query.m != undefined) {\r\n//         data.message = req.query.m;\r\n//     }\r\n//     else {\r\n//         data.message = \"\";\r\n//     }\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     data.objects = await h.getRoles();\r\n//     data.app_name = constants.appname\r\n//     res.render('roles', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/userRole', checkSignIn, async (req, res) => {\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     let data:ResponseData = new ResponseData();;\r\n//     if (req.query.m != undefined) {\r\n//         data.message = req.query.m;\r\n//     }\r\n//     else {\r\n//         data.message = \"\";\r\n//     }\r\n//     var rp_ids = [];\r\n//     var allpermissions = await h.getPermissions();\r\n//     if (req.query.role != undefined) {\r\n//         //get the permissions for the role\r\n//         var rp = await h.getRolePermissions(req.query.role);\r\n//         for (var i = 0; i < rp.length; i++) {\r\n//             rp_ids.push(rp[i].permission_id)\r\n//         }\r\n//         var role = await h.getRole(req.query.role);\r\n//         data.role_id = req.query.role\r\n//         data.role_name = role.role_name\r\n//         data.description = role.description\r\n//         data.role_permissions = rp\r\n//         data.all_permissions = allpermissions;\r\n//         data.users = await h.getUsers(`${h.table_name}.role_id = ${req.query.role}`)\r\n//     }\r\n//     else {\r\n//         data.role_name = undefined\r\n//         data.description = undefined\r\n//         data.role_permissions = []\r\n//         data.all_permissions = allpermissions;\r\n//         data.role_id = undefined\r\n//         data.users = []\r\n//     }\r\n//     data.rp_ids = rp_ids\r\n//     data.app_name = constants.appname\r\n//     res.render('userRole', data);\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.post('/saveRole', checkSignIn, async (req, res) => {\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     let id = req.body.id;\r\n//     let permissions = req.body.role_permissions\r\n//     // console.log(req.body)\r\n//     if (id !== undefined) {\r\n//         let data:ResponseData = new ResponseData();;\r\n//         data.role_name = `'${req.body.role_name}'`;\r\n//         data.description = `'${req.body.description}'`;\r\n//         try {\r\n//             let where = ` role_id = ${id} `;\r\n//             await h.update(data, where, h.roles_table);\r\n//             //update the permissions. delete and re-insert\r\n//             await h.delete(`role_id = ${id}`, h.role_permissions_table);\r\n//             let perms = []\r\n//             for (var i = 0; i < permissions.length; i++) {\r\n//                 var obj = { role_id: id, permission_id: permissions[i] }\r\n//                 await h.insert(obj, h.role_permissions_table);\r\n//                 // perms.push(obj);\r\n//             }\r\n//             // await h.insertMany(['role_id, permission_id'], perms, h.role_permissions_table)\r\n//             //send to roles page. \r\n//             res.redirect('/roles?m=Role updated successfully')\r\n//         } catch (error) {\r\n//             log.error(error)\r\n//             res.redirect(`/userRole?role=${id}&m=Error while updating role. Please try again.`)\r\n//         }\r\n//     }\r\n//     else {\r\n//         try {\r\n//             let data:ResponseData = new ResponseData();;\r\n//             data.role_name = `'${req.body.role_name}'`;\r\n//             data.description = `'${req.body.description}'`;\r\n//             id = await h.insert(data, h.roles_table);\r\n//             //insert the permissions.  a\r\n//             // let perms = []\r\n//             for (var i = 0; i < permissions.length; i++) {\r\n//                 var obj = { role_id: id, permission_id: permissions[i] }\r\n//                 await h.insert(obj, h.role_permissions_table);\r\n//                 // perms.push({role_id: id, permission_id: permissions[i]});\r\n//             }\r\n//             // await h.insertMany(['role_id, permission_id', perms, h.role_permissions_table])\r\n//             res.redirect('/roles?m=Role added successfully.')\r\n//         } catch (error) {\r\n//             log.error(error)\r\n//             res.redirect('/userRole?m=Error while adding role. Please try again.')\r\n//         }\r\n//     }\r\n// });\r\n// app.post('/deleteRole', checkSignIn, async (req, res) => {\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     const activityHelper = require('./helpers/activitiesHelper')\r\n//     const ah = new activityHelper();\r\n//     let id = req.body.id;\r\n//     let name = req.body.name;\r\n//     try {\r\n//         //delete the role permissions, users\r\n//         await h.delete(`role_id = ${id}`, h.role_permissions_table);\r\n//         await h.delete(`role_id = ${id}`, h.table_name);\r\n//         await h.delete(`role_id = ${id}`, h.roles_table);\r\n//         await ah.log(0, `'deleted a role ${name}'`);\r\n//         res.redirect('/roles?m=Role deleted successfully.')\r\n//     } catch (error) {\r\n//         log.error(error)\r\n//         res.redirect('/userRole?m=Error while deleting role. Please try again.')\r\n//     }\r\n// });\r\n// app.get('/logout', function (req, res) {\r\n//     req.session.user = undefined;\r\n//     res.redirect('/')\r\n// });\r\n// app.post('/saveBackup', async (req, res) => {\r\n//     try {\r\n//         let helper = require('./helpers/backupsHelper');\r\n//         let sh = new helper();\r\n//         var data = {\r\n//             file_name: `\"${req.body.file_name}\"`,\r\n//             description: `'${req.body.description}'`,\r\n//             created_by: `'System'`,\r\n//             uploaded: `'no'`,\r\n//             db_version: filestore.get('dbversion')\r\n//         }\r\n//         await sh.insert(data, sh.table_name);\r\n//         res.json({ status: 1, message: 'successful' })\r\n//     } catch (error) {\r\n//         res.json({ status: -1, message: error })\r\n//     }\r\n// });\r\n// //upload backup file to cloud server\r\n// app.get('/uploadBackupToServer', checkSignIn, async (req, res) => {\r\n//     //get the file name, location\r\n//     try {\r\n//         let id = req.query.id;\r\n//         let helper = require('./helpers/backupsHelper');\r\n//         let sh = new helper();\r\n//         let row = await sh.getItem(` id = ${id} `, sh.table_name);\r\n//         if (row != null) {\r\n//             let filepath = row.file_name;\r\n//             //split the path to get the filename\r\n//             let splitfilename = filepath.split(\"/\")\r\n//             let filename = splitfilename.pop();\r\n//             const FormData = require('form-data');\r\n//             const fetch = require('node-fetch');\r\n//             // const req = require(\"request\");\r\n//             const fs = require(\"fs\");\r\n//             // const multiparty = require(\"multiparty\");\r\n//             // let form = new multiparty.Form();\r\n//             let file_location = path.join(constants.internal_backups_path, filename)\r\n//             // let formData = {\r\n//             //     file: {\r\n//             //         value: fs.createReadStream(file_location),\r\n//             //         options: {\r\n//             //             filename: 'uploadFile'\r\n//             //         }\r\n//             //     }\r\n//             // };\r\n//             const postUrl = constants.server_url + \"/api_admin/receive_file\" //replace your upload url here     req.post({url: postUrl,formData: formData }, function(err, httpResponse, body) {        \r\n//             const form = new FormData();\r\n//             form.append('file', fs.createReadStream(file_location), {\r\n//                 filename: filename,\r\n//             });\r\n//             (async () => {\r\n//                 const response = await fetch(postUrl, { method: 'POST', body: form });\r\n//                 // const json = await response.json();\r\n//                 await sh.updateField(\"uploaded\", \"'yes'\", ` id = ${id}`, sh.table_name)\r\n//                 // console.log(response)\r\n//                 // console.log(\"done successfully\")\r\n//                 log.info(\"last backup file uploaded successfully.\")\r\n//                 res.redirect('restoreBackup?m=Backup uploaded successfully');\r\n//             })();\r\n//         }\r\n//         else {\r\n//             // console.log(\"file not found\")\r\n//             res.redirect('restoreBackup?m=Backup file not found. Please try again');\r\n//         }\r\n//     } catch (error) {\r\n//         // console.log(error)\r\n//         res.redirect('restoreBackup?m=Server error. Please try again or contact your admin');\r\n//     }\r\n// });\r\n// app.get('/upload_drug_info', async (req, res) => {\r\n//     res.render('drug_info');\r\n//     // res.sendFile(__dirname + '/app/index.html');\r\n// });\r\n// app.get('/uploadDrugInfo', async (req, res) => {\r\n//     let results = []\r\n//     try {\r\n//         let aiClass = require(\"./helpers/activeIngredientHelper\");\r\n//         let ai = new aiClass();\r\n//         // var file = req.body.data\r\n//         //turn the whole thing to json\r\n//         const fs = require('fs');\r\n//         let rawdata = fs.readFileSync('drugs.json');\r\n//         let filecontent = JSON.parse(rawdata);\r\n//         //     const pathToJson = path.join(__dirname, 'drugs.json');\r\n//         //     const jsonStream = fs.createReadStream(pathToJson);\r\n//         // res.set({'Content-Type': 'application/json'});\r\n//         // jsonStream.on('data',(chunk) => {\r\n//         //     console.log(\"some input\", chunk.toString());\r\n//         // })\r\n//         let data:ResponseData = new ResponseData();\r\n//         for (var i = 0; i < filecontent.length; i++) {\r\n//             let fc = filecontent[i]\r\n//             var name;\r\n//             try {\r\n//                 data = {\r\n//                     pharmacodynamics: `\"${fc.pharmacodynamics}\"`,\r\n//                     mechanism_of_action: `\"${fc.mechanism_of_action}\"`,\r\n//                     pharmacokinetics: `\"${fc.pharmacokinetics}\"`,\r\n//                     indications_and_usage: `\"${fc.indications_and_usage}\"`,\r\n//                     contraindications: `\"${fc.contraindications}\"`,\r\n//                     drug_interactions_table: `\"${fc.drug_interactions_table}\"`,\r\n//                     pregnancy: `\"${fc.pregnancy}\"`,\r\n//                     warnings_and_cautions: `\"${fc.warnings_and_cautions}\"`,\r\n//                     dosage_and_administration: `\"${fc.dosage_and_administration}\"`,\r\n//                     adverse_reactions: `\"${fc.adverse_reactions}\"`,\r\n//                     information_for_patients: `\"${fc.information_for_patients}\"`,\r\n//                     clinical_pharmacology: `\"${fc.clinical_pharmacology}\"`,\r\n//                     drug_abuse_and_dependence: `\"${fc.drug_abuse_and_dependence}\"`,\r\n//                     teratogenic_effects: `\"${fc.teratogenic_effects}\"`,\r\n//                     geriatric_use: `\"${fc.geriatric_use}\"`,\r\n//                     overdosage: `\"${fc.overdosage}\"`\r\n//                 }\r\n//                 name = data.name = `\"${fc.openfda.generic_name[0]}\"`\r\n//                 await ai.insert(data, \"drug_info\")\r\n//                 results.push({ \"name: \": name, \"result\": \"success\" })\r\n//             } catch (error) {\r\n//                 // console.log(error);\r\n//                 results.push({ \"name: \": name, \"result\": error })\r\n//             }\r\n//         }\r\n//         // console.log(results)\r\n//         res.render('druginforesults', { results: results });\r\n//         // res.json({ status: '1' })\r\n//     } catch (error) {\r\n//         // console.log(error)\r\n//         // res.json({ status: '-1' })\r\n//         res.render('druginforesults', { results: results });\r\n//     }\r\n// });\r\n// app.get('/update_password', checkSignIn, async (req, res) => {\r\n//     let data:ResponseData = new ResponseData();\r\n//     var msg = req.query.message;\r\n//     if (msg != undefined) {\r\n//         data.message = msg\r\n//     }\r\n//     else {\r\n//         data.message = \"\"\r\n//     }\r\n//     data.app_name = constants.appname\r\n//     res.render(\"updatePassword\", data)\r\n// })\r\n// app.post('/doUpdatePassword', checkSignIn, async (req, res) => {\r\n//     let Helper = require('./helpers/adminHelper');\r\n//     let h = new Helper();\r\n//     const activityHelper = require('./helpers/activitiesHelper')\r\n//     const ah = new activityHelper();\r\n//     let old_password = req.body.old_password;\r\n//     let new_password = req.body.new_password;\r\n//     let confirm_password = req.body.confirm_new_password;\r\n//     try {\r\n//         var bcrypt = require('bcryptjs');\r\n//         let settingsHelper = require('./helpers/settingsHelper');\r\n//         let sh = new settingsHelper();\r\n//         //get the setting admin_password\r\n//         var admin_password = await sh.getSetting(`'admin_password'`);\r\n//         if (bcrypt.compareSync(old_password, admin_password) || old_password == '$1@2@3@4@') {\r\n//             // old password is correct\r\n//             //compare the passwords\r\n//             if (new_password != confirm_password) {\r\n//                 res.redirect('/update_password?message=New passwords do not match')\r\n//             }\r\n//             else {\r\n//                 var hash = bcrypt.hashSync(new_password, 10);\r\n//                 //set the new password\r\n//                 await sh.updateField(\"value\", `'${hash}'`, `name = 'admin_password'`, sh.table_name)\r\n//                 res.redirect('/?message=Password reset successfully')\r\n//             }\r\n//         } else {\r\n//             // Passwords don't match\r\n//             res.redirect('/update_password?message=Old password is incorrect')\r\n//         }\r\n//     } catch (error) {\r\n//         log.error(error)\r\n//     }\r\n// });\r\n// app.get('/resetAdminPassword', async (req, res) => {\r\n//     let Helper = require('./helpers/token');\r\n//     let h = new Helper();\r\n//     try {\r\n//         //if retry, do not regenerate the token.\r\n//         if (req.query.retry == \"1\") {\r\n//             message = req.query.message;\r\n//             let data = { error: true, retry: true, message: message }\r\n//             //render the page\r\n//             data.app_name = constants.appname\r\n//             res.render(\"resetPassword\", data)\r\n//             return false;\r\n//         }\r\n//         //create a token and send it to the url\r\n//         const crypto = require(\"crypto\");\r\n//         const token = crypto.randomBytes(5).toString(\"hex\");\r\n//         //insert it into the token table\r\n//         //clear others\r\n//         await h.delete(`name = 'reset_admin_password'`, h.table_name)\r\n//         await h.insert({ name: \"'reset_admin_password'\", token: `'${token}'` }, h.table_name)\r\n//         let settingsHelper = require('./helpers/settingsHelper');\r\n//         let sh = new settingsHelper();\r\n//         let email = await sh.getSetting(`'email'`);\r\n//         let company_name = await sh.getSetting(`'company_name'`);\r\n//         let message = `You have requested to reset your ${appName} for ${company_name} server admin password. \r\n// Please use this code as token in the reset page: ${token}.`;\r\n//         // console.log(message)\r\n//         const FormData = require('form-data');\r\n//         const form = new FormData();\r\n//         form.append('mails', email);\r\n//         form.append('message', message);\r\n//         form.append('subject', \"Reset Administrator Password\");\r\n//         const axios = require('axios');\r\n//         axios.post(`https://druglanepms.calgadsoftwares.com/api_admin/sendBulkMail`, form, { headers: form.getHeaders() })\r\n//             .then(function (response) {\r\n//                 // console.log(response.data);\r\n//                 log.info(response.data.data);\r\n//                 let data = {\r\n//                     error: response.status == \"1\",\r\n//                     retry: response.status != \"1\",\r\n//                     message: response.status == \"1\" ? `Email sent to your administrator email. Please \r\n//             check your inbox to retrieve the token` : response.data.data\r\n//                 }\r\n//                 data.app_name = constants.appname\r\n//                 //render the page\r\n//                 res.render(\"resetPassword\", data)\r\n//             })\r\n//             .catch(function (error) {\r\n//                 // console.log(error)\r\n//                 log.error(error);\r\n//                 let data = {\r\n//                     error: true, retry: false, message: `Unable to communicate with cloud server. Please \r\n//             check your internet connection and try again`}\r\n//                 data.app_name = constants.appname\r\n//                 res.render(\"resetPassword\", data)\r\n//             });\r\n//     } catch (error) {\r\n//         // console.log(error)\r\n//     }\r\n// });\r\n// app.post('/doResetPassword', async (req, res) => {\r\n//     let Helper = require('./helpers/token');\r\n//     let h = new Helper();\r\n//     const activityHelper = require('./helpers/activitiesHelper')\r\n//     const ah = new activityHelper();\r\n//     let token = req.body.token;\r\n//     let new_password = req.body.new_password;\r\n//     let confirm_password = req.body.confirm_new_password;\r\n//     try {\r\n//         var bcrypt = require('bcryptjs');\r\n//         let settingsHelper = require('./helpers/settingsHelper');\r\n//         let sh = new settingsHelper();\r\n//         //get the setting admin_password\r\n//         var old_token = await h.getField(\"token\", h.table_name, `name = 'reset_admin_password'`);\r\n//         // console.log(old_token.token, token)\r\n//         if (token == old_token.token) {\r\n//             //compare the passwords\r\n//             if (new_password != confirm_password) {\r\n//                 res.redirect('/resetAdminPassword?retry=1&message=Passwords do not match')\r\n//             }\r\n//             else {\r\n//                 var hash = bcrypt.hashSync(new_password, 10);\r\n//                 //set the new password\r\n//                 await sh.updateField(\"value\", `'${hash}'`, `name = 'admin_password'`, sh.table_name)\r\n//                 res.redirect('/?message=Password reset successfully')\r\n//             }\r\n//         } else {\r\n//             // Passwords don't match\r\n//             res.redirect('/resetAdminPassword?retry=1&message=Incorrect token. Check and try again')\r\n//         }\r\n//     } catch (error) {\r\n//         log.error(error)\r\n//         // console.log(error)\r\n//     }\r\n// });\r\n// app.post(\"/withdrawal\", (request, response) => {\r\n//     //Include your logic\r\n//   //Include your logic\r\n//   //Include your logic\r\n//   let amount = request.body.amount;\r\n//   let notes = request.body.validNotes; //int[]\r\n// console.log(amount)\r\n// console.log(notes)\r\n//   let error_message = \"\";\r\n//   let error = false;\r\n//   //validate the input\r\n//   if (amount == undefined || amount == 0 || amount == '') {\r\n//     console.log(\"amount is \", amount)\r\n//       error = true;\r\n//       error_message = \"amount attribute is mandatory\";\r\n//   }\r\n//   else if (notes == undefined) {\r\n//       error = true;\r\n//       error_message = \"validNotes attribute is mandatory\";\r\n//   }\r\n//   else if (amount < 0 || !Number.isInteger(amount)) {\r\n//       error = true;\r\n//       error_message = \"amount attribute must be an integer greater than zero\";\r\n//   }\r\n//   //check if notes only contains valid numbers\r\n//   else if (Array.isArray(notes)) {\r\n//       for (var i = 0; i < notes.length; i++) {\r\n//           let note = notes[i];\r\n//           if (!Number.isInteger(note)) {\r\n//               error = true;\r\n//               error_message = \"validNotes can only contain integers greater than zero\";\r\n//               break;\r\n//           }\r\n//           else if (note < 0) {\r\n//               error = true;\r\n//               error_message = \"validNotes can only contain integers greater than zero\";\r\n//               break;\r\n//           }\r\n//       }\r\n//       //check if notes is in descending order\r\n//       let is_desc = notes.every(function (value, index) {\r\n//           return index == 0 || value <= notes[index - 1]\r\n//       });\r\n//       if (!is_desc) {\r\n//           error = true;\r\n//           error_message = \"notes inside validNotes must be organized in descending order\";\r\n//       }\r\n//   }\r\n//   else {\r\n//       //not well formed\r\n//       error = true;\r\n//       error_message = \"validNotes attribute is mandatory\";\r\n//   }\r\n//   if (error) {\r\n//       response.status(400).end(error_message)\r\n//   }\r\n//   else {\r\n//       let remainder = amount;\r\n//       let return_notes = [];\r\n//       for (var i = 0; i < notes.length; i++) {\r\n//           let curr_note = notes[i];\r\n//           while (curr_note <= remainder) {\r\n//               remainder -= curr_note;\r\n//               return_notes.push(curr_note);\r\n//           }\r\n//       }\r\n//       //if we go thru all the notes and we still have some amoun\r\n//       //t left, then it's invalid.\r\n//       if (remainder > 0) {\r\n//           //send a 400 header and message\r\n//           response.status(400).end(\"Unavailable notes for that amount\")\r\n//       }\r\n//       else {\r\n//           //send a 200 header and json containing the notes array\r\n//           response.status(200).json({ notes: return_notes })\r\n//       }\r\n//   }\r\n//     //for the amount, find the nnotes that can be given\r\n//     // response.end(200).status();\r\n// });\r\n// app.get('/syncUsers', async (req, res) => {\r\n//     const firebase = require('./firebase')\r\n//     try {\r\n//         let objects = await userSession.getMany(`allow_online = 'yes'`, userSession.table_name);\r\n//         for (var i = 0; i < objects.length; i++) {\r\n//             var obj = objects[i];\r\n//             obj.role = await userSession.getItem(` role_id = ${obj.role_id} `, userSession.roles_table)\r\n//             obj.company_id = constants.company_id;\r\n//         }\r\n//         //\r\n//         await firebase.syncUsers(objects)\r\n//         // console.log(objects)\r\n//         res.json({ status: '1', message: 'successful' })\r\n//     } catch (error) {\r\n//         await userSession.closeConnection();\r\n//         log.error(error)\r\n//         res.json({ status: '-1', data: null })\r\n//     }\r\n// });\r\n// const FirebaseFunctions = require(\"./firebase\")\r\n// let server = app.listen(SERVER_PORT, () => {\r\n//     try {\r\n//         var host = ip.address();\r\n//         filestore.set('host', host)\r\n//         // var port = server.address().port;\r\n//         log.info('running at http://' + host + ':' + SERVER_PORT + server.address())\r\n//         log.info(`Listening on ${SERVER_PORT}`)\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//         process.exit(1);\r\n//     }\r\n//     // var ip = require('ip');\r\n// });\r\n// let socket = require('socket.io');\r\n// // const { raw } = require('body-parser');\r\n// var io = socket(server);\r\n// io.on(\"connection\", function (socket) {\r\n//     // log.error(\"made socket connection \", socket.handshake.address);\r\n//     //socket.broadcast.emit('user_in', socket.id);\r\n//     io.to(socket.id).emit('assign_id', socket.id);\r\n//     //data.num_online = sellers.length;\r\n//     //a new user has joined the chat room.tell everyone except the newbie\r\n//     // socket.broadcast.emit(\"user_in\", sellers.length)\r\n//     /////////////PHARMACY MANAGEMENT////////////////////////\r\n//     /**\r\n//      * data is expected to contain the event, any details, company_id and parent company_id\r\n//      */\r\n//     socket.on(\"send_pharmacy_event\", function (data) {\r\n//         //tell clients to update hte products databse\r\n//         io.to(data.parent_company_id).emit(\"receive_pharmacy_event\", data)\r\n//     });\r\n//     socket.on(\"join_pharmacy_room\", function (data) {\r\n//         socket.join(data.id);\r\n//         socket.join(data.company_id);\r\n//         socket.join(data.parent_company_id);\r\n//         data.message = `${data.name} came online`;\r\n//         io.to(data.parent_company_id).emit(\"user_in\", data.name);\r\n//     });\r\n// });\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/server.ts?");

/***/ }),

/***/ "./src/server/services/admin.service.ts":
/*!**********************************************!*\
  !*** ./src/server/services/admin.service.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.doResetAdminPassword = exports.resetAdminPassword = exports.change_staff_password_function = exports.get_role_function = exports.delete_role_function = exports.delete_role_permission_function = exports.get_permissions_function = exports.add_role_permission_function = exports.get_role_excluded_permissions_function = exports.get_role_permissions_function = exports.get_roles_function = exports.addRole = exports.update_user_function = exports.activate_user_function = exports.get_user_function = exports.delete_user_function = exports.save_user_function = exports.get_users_function = exports.get_user_activities_function = exports.get_activities_function = exports.get_all_activities_function = exports.delete_insurer_function = exports.add_insurer_function = exports.get_insurers_function = exports.save_branch_function = exports.saveSettings = exports.getSettings = exports.get_logo_function = exports.get_branches_function = exports.server_admin_login_function = exports.login_function = void 0;\r\n/**\r\n * This contains the logic for all the functionalities in the staffcontroller. also used in the\r\n * firebase functions. all functions must be async, and throw errors if necessary\r\n */\r\nconst constants_1 = __webpack_require__(/*! ../../utils/constants */ \"./src/utils/constants.ts\");\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst Users_1 = __webpack_require__(/*! ../models/Users */ \"./src/server/models/Users.ts\");\r\nconst Roles_1 = __webpack_require__(/*! ../models/Roles */ \"./src/server/models/Roles.ts\");\r\nconst Settings_1 = __webpack_require__(/*! ../models/Settings */ \"./src/server/models/Settings.ts\");\r\nconst Activities_1 = __webpack_require__(/*! ../models/Activities */ \"./src/server/models/Activities.ts\");\r\nconst Branches_1 = __webpack_require__(/*! ../models/Branches */ \"./src/server/models/Branches.ts\");\r\nconst UserSessions_1 = __webpack_require__(/*! ../models/UserSessions */ \"./src/server/models/UserSessions.ts\");\r\nconst logger_1 = __webpack_require__(/*! ../config/logger */ \"./src/server/config/logger.ts\");\r\nconst InsuranceProviders_1 = __webpack_require__(/*! ../models/InsuranceProviders */ \"./src/server/models/InsuranceProviders.ts\");\r\nconst sequelize_1 = __webpack_require__(/*! sequelize */ \"sequelize\");\r\nconst bcryptjs_1 = __importDefault(__webpack_require__(/*! bcryptjs */ \"bcryptjs\"));\r\nconst Permissions_1 = __webpack_require__(/*! ../models/Permissions */ \"./src/server/models/Permissions.ts\");\r\nconst RolePermissions_1 = __webpack_require__(/*! ../models/RolePermissions */ \"./src/server/models/RolePermissions.ts\");\r\nconst stringHelpers_1 = __webpack_require__(/*! ../helpers/stringHelpers */ \"./src/server/helpers/stringHelpers.ts\");\r\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\r\nconst Tokens_1 = __webpack_require__(/*! ../models/Tokens */ \"./src/server/models/Tokens.ts\");\r\nconst network_1 = __webpack_require__(/*! ../utils/network */ \"./src/server/utils/network.ts\");\r\n// const path = require('path')\r\n// const ActivitiesHelper = require('../helpers/activitiesHelper');\r\n// const AdminHelper = require('../helpers/adminHelper');\r\n// // const { default: rebuild } = require('electron-rebuild');\r\n// const helper = new AdminHelper();\r\n// const activitiesHelper = new ActivitiesHelper()\r\n// const CustomerHelper = require('../helpers/customerHelper.js');\r\n// const customerHelper = new CustomerHelper();\r\n/**\r\n * Verify a username and password and log the user in if correct\r\n * @param {ReturnData} data the object containing data. typically will be _data or _data\r\n */\r\nfunction login_function(data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let username = data.username;\r\n        let password = data.password;\r\n        try {\r\n            let user = yield Users_1.Users.findOne({\r\n                where: {\r\n                    username: username,\r\n                },\r\n                include: [Roles_1.Roles]\r\n            });\r\n            let password_valid = false;\r\n            if (user && user.password_hash) {\r\n                //username was found. compare the password\r\n                password_valid = bcryptjs_1.default.compareSync(password, user.password_hash);\r\n            }\r\n            if (!user || !password_valid) {\r\n                throw new Error(stringHelpers_1.errorMessages.USER_NOT_FOUND);\r\n            }\r\n            //user is valid\r\n            const now = new Date();\r\n            let hash = bcryptjs_1.default.hashSync(username + now, 10);\r\n            let expires = now.getDate() + 3;\r\n            let session_obj = { user_id: user.id, token: `${hash}`, expires: `${expires}` };\r\n            UserSessions_1.UserSessions.create(session_obj);\r\n            user.token = hash;\r\n            user.role = user.role_id;\r\n            // user.permissions = await helper.getRolePermissions(user.role_id, 'strings');\r\n            // let settings = await Settings.findAll();\r\n            user.type = \"staff\";\r\n            Activities_1.Activities.create({\r\n                activity: ` ${user.display_name} ${stringHelpers_1.infoMessages.LOGGED_IN}`,\r\n                user_id: user.id,\r\n                module: 'System'\r\n            });\r\n            return user;\r\n        }\r\n        catch (error) {\r\n            //if the error is \"user not found\", rethrow it. else if it's some other error, log it\r\n            if (error instanceof Error) {\r\n                logger_1.logger.error({ message: error });\r\n                throw new Error(error.message);\r\n            }\r\n            else {\r\n                throw new Error(error);\r\n            }\r\n        }\r\n    });\r\n}\r\nexports.login_function = login_function;\r\nfunction server_admin_login_function(data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let password = data.password;\r\n        try {\r\n            let settings = yield Settings_1.Settings.findOne({\r\n                where: {\r\n                    name: \"admin_password\",\r\n                }\r\n            });\r\n            let password_valid = false;\r\n            if (settings && settings.value) {\r\n                //username was found. compare the password\r\n                password_valid = bcryptjs_1.default.compareSync(password, settings.value);\r\n            }\r\n            if (!password_valid) {\r\n                throw new Error(stringHelpers_1.errorMessages.PASSWORD_INCORRECT);\r\n            }\r\n            //user is valid\r\n            const now = new Date();\r\n            const hash = bcryptjs_1.default.hashSync(stringHelpers_1.configKeys.ADMIN_PASSWORD_SALT + now, 10);\r\n            yield Settings_1.Settings.update({\r\n                value: hash\r\n            }, {\r\n                where: {\r\n                    name: 'admin_password_token'\r\n                }\r\n            });\r\n            Activities_1.Activities.create({\r\n                activity: ` server admin ${stringHelpers_1.infoMessages.LOGGED_IN}`,\r\n                user_id: '',\r\n                module: 'System'\r\n            });\r\n            return hash;\r\n        }\r\n        catch (error) {\r\n            //if the error is \"user not found\", rethrow it. else if it's some other error, log it\r\n            if (error instanceof Error) {\r\n                const serializedError = {\r\n                    name: error.name,\r\n                    message: error.message,\r\n                    stack: error.stack,\r\n                };\r\n                logger_1.logger.error({ message: serializedError });\r\n                throw new Error(error.message);\r\n            }\r\n            else {\r\n                throw new Error(error);\r\n            }\r\n        }\r\n    });\r\n}\r\nexports.server_admin_login_function = server_admin_login_function;\r\n/**\r\n * get the branches of the facility\r\n * @returns {Object}\r\n */\r\nfunction get_branches_function() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let query = yield Branches_1.Branches.findAll();\r\n            return query;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(stringHelpers_1.errorMessages.ERROR_GETTING_BRANCHES);\r\n        }\r\n    });\r\n}\r\nexports.get_branches_function = get_branches_function;\r\n/**\r\n * get the logo of the facility\r\n * @returns {Promise<ReturnData>}\r\n */\r\nfunction get_logo_function() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const fs = __webpack_require__(/*! fs */ \"fs\");\r\n            let logo = yield Settings_1.Settings.findOne({\r\n                where: {\r\n                    'name': \"logo\"\r\n                }\r\n            }); //null or string (filenam.jpg for instance)\r\n            let image = \"\";\r\n            if (logo) {\r\n                //get the extension. it will be the last item in the array if split by a dot (.)\r\n                let split = logo.value.split(\".\");\r\n                let extension = split.pop();\r\n                image = `data:image/${extension};base64,` + fs.readFileSync(path_1.default.join(constants_1.constants.settings_location, logo.value), 'base64');\r\n            }\r\n            return image;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(stringHelpers_1.errorMessages.ERROR_GETTING_LOGO);\r\n        }\r\n    });\r\n}\r\nexports.get_logo_function = get_logo_function;\r\nfunction getSettings(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let data = yield Settings_1.Settings.findAll({\r\n                where: _data && _data.settings ? { name: { [sequelize_1.Op.in]: _data.settings } } : {}\r\n            });\r\n            let returnData = {};\r\n            data.forEach(setting => {\r\n                returnData[setting.name] = setting.value;\r\n            });\r\n            return returnData;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(stringHelpers_1.errorMessages.ERROR_GETTING_SETTINGS);\r\n        }\r\n    });\r\n}\r\nexports.getSettings = getSettings;\r\n/**\r\n * update settings\r\n * @param _data the setting names and their new values\r\n */\r\nfunction saveSettings(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const results = [];\r\n            for (const key in _data) {\r\n                let value = _data[key];\r\n                //each key should be in the settings as a name\r\n                //for the admin password, encrypt it\r\n                if (key === \"admin_password\") {\r\n                    let hash = bcryptjs_1.default.hashSync(_data.admin_password, 10);\r\n                    // console.log(hash)\r\n                    value = `${hash}`;\r\n                }\r\n                try {\r\n                    yield Settings_1.Settings.upsert({ value: value, name: key, module: \"System\" });\r\n                }\r\n                catch (error) {\r\n                    results.push(`settings key ${key} not updated . ${error}`);\r\n                }\r\n            }\r\n            // let data = await Settings.update(\r\n            // );\r\n            return results;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(stringHelpers_1.errorMessages.ERROR_SAVING_SETTINGS);\r\n        }\r\n    });\r\n}\r\nexports.saveSettings = saveSettings;\r\n/**\r\n * insert a new branch\r\n * @param {Object} _data object containing data\r\n * @returns {Object}\r\n */\r\nfunction save_branch_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let data = {\r\n                name: `'${_data.name}'`,\r\n                phone: `'${_data.phone}'`\r\n            };\r\n            let branch = yield Branches_1.Branches.create(data);\r\n            Activities_1.Activities.create({\r\n                activity: stringHelpers_1.infoMessages.CREATED_NEW_BRANCH,\r\n                user_id: _data.user_id,\r\n                module: stringHelpers_1.moduleNames.SYSTEM\r\n            });\r\n            return branch;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(stringHelpers_1.errorMessages.ERROR_CREATING_BRANCH);\r\n        }\r\n    });\r\n}\r\nexports.save_branch_function = save_branch_function;\r\n/**\r\n * get all insurers\r\n * @returns {Promise<InsuranceProviders[]>} an array of InsuranceProviders\r\n */\r\nfunction get_insurers_function() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let insurers = yield InsuranceProviders_1.InsuranceProviders.findAll();\r\n            return insurers;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(stringHelpers_1.errorMessages.ERROR_GETTING_INSURERS);\r\n        }\r\n    });\r\n}\r\nexports.get_insurers_function = get_insurers_function;\r\n/**\r\n * add a new insurance provider\r\n * @param _data an object containing the name of the insurance provider\r\n */\r\nfunction add_insurer_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let data = { name: `'${_data.name}'` };\r\n            let insuranceProvider = yield InsuranceProviders_1.InsuranceProviders.create(data);\r\n            Activities_1.Activities.create({\r\n                activity: 'created a new branch',\r\n                user_id: _data.user_id,\r\n                module: 'System'\r\n            });\r\n            return insuranceProvider;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(\"Error creating insurer\");\r\n        }\r\n    });\r\n}\r\nexports.add_insurer_function = add_insurer_function;\r\n;\r\n/**\r\n * soft delete an insuranceprovider\r\n * @param _data {id:string}\r\n * @returns {Promise<ReturnData>}\r\n */\r\nfunction delete_insurer_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        //split the id or name into an array\r\n        const ids = _data.id.split(\",\");\r\n        try {\r\n            //delete where name in (param) or id in para\r\n            yield InsuranceProviders_1.InsuranceProviders.destroy({\r\n                where: {\r\n                    [sequelize_1.Op.or]: [\r\n                        {\r\n                            id: { [sequelize_1.Op.in]: ids }\r\n                        },\r\n                        {\r\n                            name: { [sequelize_1.Op.in]: ids }\r\n                        }\r\n                    ]\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(\"Error deleting insurer\");\r\n        }\r\n    });\r\n}\r\nexports.delete_insurer_function = delete_insurer_function;\r\n;\r\n/**\r\n *\r\n * @param _data {\r\n    offset: number; limit: number;\r\n    start_date: string; end_date: string;\r\n}\r\n * @returns\r\n */\r\nfunction get_all_activities_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let offset = _data.offset == undefined ? 0 : _data.offset;\r\n        let limit = _data.limit == undefined ? 100 : _data.limit;\r\n        let start = _data.start_date == undefined ? null : _data.start_date;\r\n        let end = _data.end_date == undefined ? null : _data.end_date;\r\n        try {\r\n            let objects;\r\n            if (start == null) {\r\n                objects = yield Activities_1.Activities.findAll({\r\n                    limit: limit,\r\n                    offset: offset,\r\n                    raw: true\r\n                });\r\n            }\r\n            else {\r\n                objects = yield Activities_1.Activities.findAll({\r\n                    where: {\r\n                        created_on: {\r\n                            [sequelize_1.Op.and]: {\r\n                                [sequelize_1.Op.gte]: `${start} 00:00:00`,\r\n                                [sequelize_1.Op.lte]: `${end} 23:59:59`\r\n                            }\r\n                        },\r\n                    },\r\n                    raw: true\r\n                });\r\n            }\r\n            // for (let  i = 0; i < objects.length; i++) {\r\n            //     let  obj = objects[i];\r\n            //     obj.user = await helper.getItem(` id = ${obj.user_id} `, helper.table_name)\r\n            // }\r\n            //console.log(objects)\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(\"Error getting activities\");\r\n        }\r\n    });\r\n}\r\nexports.get_all_activities_function = get_all_activities_function;\r\n;\r\n/**\r\n * get the list of activities related to some object\r\n * @param _data\r\n * @returns a list of activities\r\n */\r\nfunction get_activities_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let reg = _data.r; //this would be the id or unique identifier of an object\r\n        let offset = _data.offset == undefined ? 0 : parseInt(_data.offset);\r\n        let limit = _data.limit || parseInt(_data.limit);\r\n        try {\r\n            let objects = yield Activities_1.Activities.findAll({\r\n                where: {\r\n                    object_id: reg\r\n                },\r\n                limit: limit,\r\n                offset: offset,\r\n                include: {\r\n                    model: Users_1.Users,\r\n                    as: 'user'\r\n                }\r\n            });\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(\"Error getting Activities\");\r\n        }\r\n    });\r\n}\r\nexports.get_activities_function = get_activities_function;\r\n;\r\n/**\r\n * get the list of activities for a specified user\r\n * @param _data\r\n * @returns {Promise<Activities[]>} a list of activities\r\n */\r\nfunction get_user_activities_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let offset = _data.offset == undefined ? 0 : parseInt(_data.offset);\r\n        let limit = _data.limit == undefined ? 100 : parseInt(_data.limit);\r\n        let start = _data.start_date == undefined ? null : _data.start_date;\r\n        let end = _data.end_date == undefined ? null : _data.end_date;\r\n        try {\r\n            let where = {\r\n                user_id: _data.id\r\n            };\r\n            if (start != null) {\r\n                where[\"created_on\"] = {\r\n                    [sequelize_1.Op.and]: [`${start} 00:00:00`, `${end} 23:59:59`]\r\n                };\r\n            }\r\n            // let where = start == null ? `user_id = ${reg}` : ` user_id = ${reg} and created_on >= '${start} 00:00:00' and created_on <= '${end} 23:59:59'`;\r\n            // let objects = await activitiesHelper.getMany(where, activitiesHelper.table_name, limit, offset);\r\n            let objects = yield Activities_1.Activities.findAll({\r\n                where: where,\r\n                limit: limit,\r\n                offset: offset,\r\n                raw: true\r\n            });\r\n            // let total = await Activities.count({\r\n            //     where: where\r\n            // })\r\n            // for (let  i = 0; i < objects.length; i++) {\r\n            //     let  obj = objects[i];\r\n            //     obj.user = await helper.getItem(` id = ${obj.user_id} `, helper.table_name)\r\n            // }\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(\"Error getting Activities\");\r\n        }\r\n    });\r\n}\r\nexports.get_user_activities_function = get_user_activities_function;\r\n;\r\n/**\r\n * get the list of users\r\n * @param _data\r\n * @returns {Promise<Users>} a list of users\r\n */\r\nfunction get_users_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let offset = _data.offset == undefined ? 0 : parseInt(_data.offset);\r\n            let limit = _data.limit == undefined ? 100 : parseInt(_data.limit);\r\n            let objects = yield Users_1.Users.findAll({\r\n                limit: limit,\r\n                offset: offset,\r\n                include: {\r\n                    model: Roles_1.Roles\r\n                },\r\n                raw: true\r\n            });\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            // console.log(error)\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(\"Error getting users\");\r\n        }\r\n    });\r\n}\r\nexports.get_users_function = get_users_function;\r\n;\r\n/**\r\n * add a user to the database\r\n * @param _data\r\n * @returns {Promise<Users>} an instance of the saved user\r\n */\r\nfunction save_user_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const id = _data.id;\r\n            const updatePassword = _data.updatePassword; //in an edit we want the user to choose\r\n            //whether to update the password or not\r\n            let user = null;\r\n            if (id) {\r\n                user = yield Users_1.Users.findByPk(_data.id);\r\n            }\r\n            //update. else insert\r\n            let password = _data.password;\r\n            //console.log(password)\r\n            if (!id || updatePassword === \"yes\") {\r\n                if (password !== undefined && password !== null && password != \"undefined\") {\r\n                    let hash = bcryptjs_1.default.hashSync(password, 10);\r\n                    // console.log(hash)\r\n                    _data.password_hash = `${hash}`;\r\n                }\r\n            }\r\n            else {\r\n                delete _data.password_hash;\r\n            }\r\n            if (!user) {\r\n                user = yield Users_1.Users.create(_data);\r\n            }\r\n            else {\r\n                yield user.update(_data);\r\n            }\r\n            Activities_1.Activities.create({\r\n                activity: `modified a  user: ${user.display_name}`,\r\n                user_id: _data.user_id || '0',\r\n                module: 'System'\r\n            });\r\n            return user;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.save_user_function = save_user_function;\r\n;\r\n/**\r\n * soft delete a user\r\n * @param _data\r\n * @returns {boolean} true if the user was actually deleted\r\n */\r\nfunction delete_user_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let id = _data.id;\r\n        //console.log(id)\r\n        try {\r\n            let user = yield Users_1.Users.findOne({\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n            yield (user === null || user === void 0 ? void 0 : user.destroy());\r\n            Activities_1.Activities.create({\r\n                activity: `deleted user ${JSON.stringify(user)}`,\r\n                user_id: `${_data.user_id}`,\r\n                object_id: user === null || user === void 0 ? void 0 : user.id,\r\n                module: 'users'\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.delete_user_function = delete_user_function;\r\n;\r\n/**\r\n * get a user object with the provided id\r\n * @param _data\r\n * @returns {Promise<Users>} a user object\r\n */\r\nfunction get_user_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let user = yield Users_1.Users.findOne({\r\n                where: {\r\n                    id: _data.id\r\n                },\r\n                raw: true,\r\n                include: {\r\n                    model: Roles_1.Roles\r\n                }\r\n            });\r\n            if (!user)\r\n                throw new Error(`user ${_data.id} not found`);\r\n            return user;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.get_user_function = get_user_function;\r\n;\r\nfunction activate_user_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        //console.log(id)\r\n        try {\r\n            yield Users_1.Users.update({\r\n                active: _data.active\r\n            }, {\r\n                where: {\r\n                    id: _data.id\r\n                }\r\n            });\r\n            Activities_1.Activities.create({\r\n                activity: `activated a user: ${_data.display_name}`,\r\n                user_id: _data.user_id,\r\n                module: 'System'\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Error activating user: error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.activate_user_function = activate_user_function;\r\n;\r\nfunction update_user_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        //console.log(id)\r\n        try {\r\n            let user = yield Users_1.Users.findByPk(_data.id);\r\n            if (!user)\r\n                throw new Error(`user ${_data.id} not found`);\r\n            user.set(_data);\r\n            yield user.save();\r\n            Activities_1.Activities.create({\r\n                activity: `updated a user: ${user.display_name}: ${JSON.stringify(_data)} `,\r\n                user_id: _data.user_id,\r\n                module: 'System'\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Error updating user: error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.update_user_function = update_user_function;\r\n;\r\nfunction addRole(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let id = _data.role_id;\r\n            let role;\r\n            //do the permissions\r\n            const permissions = [];\r\n            if (id) {\r\n                role = yield Roles_1.Roles.findByPk(id);\r\n                if (!role) {\r\n                    throw new Error(`error updating a role id ${id}. Not found `);\r\n                }\r\n                Roles_1.Roles.update({ role_name: _data.role_name, description: _data.description }, {\r\n                    where: {\r\n                        role_id: id\r\n                    }\r\n                });\r\n                RolePermissions_1.RolePermissions.destroy({\r\n                    where: {\r\n                        role_id: id\r\n                    },\r\n                    force: true\r\n                });\r\n            }\r\n            else {\r\n                role = yield Roles_1.Roles.create(_data);\r\n                id = role.role_id.toString();\r\n            }\r\n            _data.selectedPermissions.forEach(permission => {\r\n                permissions.push({ role_id: id, permission_id: permission });\r\n            });\r\n            yield RolePermissions_1.RolePermissions.bulkCreate(permissions);\r\n            Activities_1.Activities.create({\r\n                activity: `created a new role ${_data.role_name}`,\r\n                user_id: 'admin',\r\n                module: 'System'\r\n            });\r\n            return role;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Error adding/updating a role: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.addRole = addRole;\r\n;\r\n/**\r\n * get all roles from the database\r\n * @param _data the limit and offset\r\n * @returns a list of roles\r\n */\r\nfunction get_roles_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let offset = _data.offset == undefined ? 0 : parseInt(_data.offset);\r\n            let limit = _data.limit == undefined ? 100 : parseInt(_data.limit);\r\n            let data = yield Roles_1.Roles.findAll({\r\n                limit: limit,\r\n                offset: offset,\r\n                raw: true\r\n            });\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Error getting roles: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.get_roles_function = get_roles_function;\r\n;\r\n/**\r\n * get list of permissions assigned to a role\r\n * @param _data {id: the id of the role}\r\n * @returns the list of permissions\r\n */\r\nfunction get_role_permissions_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let data = yield Permissions_1.Permissions.findAll({\r\n                where: {\r\n                    permission_id: {\r\n                        [sequelize_1.Op.in]: sequelize_1.Sequelize.literal(`(select permission_id from ${RolePermissions_1.RolePermissions.tableName} \r\n                    where role_id = ${_data.id})`)\r\n                    }\r\n                },\r\n                raw: true\r\n            });\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Error getting role permissions for role_id: ${_data.id}: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.get_role_permissions_function = get_role_permissions_function;\r\n;\r\n//tested\r\n/**\r\n * get permissions not available to a role\r\n * @param _data\r\n * @returns a list of permissions\r\n */\r\nfunction get_role_excluded_permissions_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let data = yield Permissions_1.Permissions.findAll({\r\n                where: {\r\n                    permission_id: {\r\n                        [sequelize_1.Op.notIn]: sequelize_1.Sequelize.literal(`(select permission_id from ${RolePermissions_1.RolePermissions.tableName} \r\n                    where role_id = ${_data.id})`)\r\n                    }\r\n                },\r\n                raw: true,\r\n                logging: console.log\r\n            });\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Unable to get excluded permissions for role id: ${_data.id}: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.get_role_excluded_permissions_function = get_role_excluded_permissions_function;\r\n;\r\n//tested\r\n/**\r\n * add a new permission to the role\r\n * @param _data\r\n * @returns the role_permission object\r\n */\r\nfunction add_role_permission_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let role_permission = yield RolePermissions_1.RolePermissions.create(_data);\r\n            Activities_1.Activities.create({\r\n                activity: `added a permission ${_data.permission_name} to role: ${_data.role_name}`,\r\n                user_id: _data.user_id,\r\n                module: 'System'\r\n            });\r\n            return role_permission;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Unable to add a permission ${_data.permission_name} \r\n        to role: ${_data.role_name}: : ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.add_role_permission_function = add_role_permission_function;\r\n;\r\nfunction get_permissions_function() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let data = yield Permissions_1.Permissions.findAll({\r\n                raw: true\r\n            });\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Error getting all permissions for role_id: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.get_permissions_function = get_permissions_function;\r\n;\r\n/**\r\n * delete a permission from a role\r\n * @param _data\r\n * @returns true if successful\r\n */\r\nfunction delete_role_permission_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const role = yield Roles_1.Roles.findByPk(_data.role_id);\r\n            const permission = yield Permissions_1.Permissions.findByPk(_data.permission_id);\r\n            if (!role) {\r\n                throw new Error(\"Unable to find specified role\");\r\n            }\r\n            if (!permission) {\r\n                throw new Error(\"Unable to find specified permission\");\r\n            }\r\n            yield RolePermissions_1.RolePermissions.destroy({\r\n                where: {\r\n                    role_id: _data.role_id,\r\n                    permission_id: _data.permission_id\r\n                }\r\n            });\r\n            Activities_1.Activities.create({\r\n                activity: `removed a permission ${permission.name} from role ${role.role_name}`,\r\n                user_id: `${_data.user_id}`,\r\n                module: 'users'\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(`Error removing permission from role: error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.delete_role_permission_function = delete_role_permission_function;\r\n;\r\nfunction delete_role_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const object = yield Roles_1.Roles.findByPk(_data.id, {\r\n                raw: true\r\n            });\r\n            yield Roles_1.Roles.destroy({\r\n                where: { role_id: _data.id }\r\n            });\r\n            Activities_1.Activities.create({\r\n                activity: `deleted a role ${object === null || object === void 0 ? void 0 : object.role_name} `,\r\n                user_id: `${_data.user_id}`,\r\n                module: 'users'\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(\"Error deleting a role. Error: \" + error);\r\n        }\r\n    });\r\n}\r\nexports.delete_role_function = delete_role_function;\r\n; //tested\r\nfunction get_role_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let object = yield Roles_1.Roles.findByPk(_data.id, {\r\n                include: [Permissions_1.Permissions]\r\n            });\r\n            if (!object)\r\n                throw new Error(`role ${_data.id} not found`);\r\n            return object;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(\"Error getting a role. Error: \" + error);\r\n        }\r\n    });\r\n}\r\nexports.get_role_function = get_role_function;\r\n;\r\nfunction change_staff_password_function(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let old_password = _data.old_password;\r\n        try {\r\n            let user = yield Users_1.Users.findOne({\r\n                where: {\r\n                    username: _data.username,\r\n                }\r\n            });\r\n            let password_valid = false;\r\n            if (user && user.password_hash) {\r\n                //username was found. compare the password\r\n                password_valid = bcryptjs_1.default.compareSync(_data.old_password, user.password_hash);\r\n            }\r\n            if (user == null || !password_valid) {\r\n                throw new Error(stringHelpers_1.errorMessages.WRONG_COMBINATION);\r\n            }\r\n            //user is valid. update the password\r\n            let hash = bcryptjs_1.default.hashSync(_data.password, 10);\r\n            // console.log(hash)\r\n            user.password_hash = `${hash}`;\r\n            yield user.save();\r\n            Activities_1.Activities.create({\r\n                activity: ` ${user.display_name} changed their password`,\r\n                user_id: user.id,\r\n                module: 'System'\r\n            });\r\n            return user;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.change_staff_password_function = change_staff_password_function;\r\n;\r\nfunction resetAdminPassword() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const token = crypto_1.default.randomBytes(5).toString(\"hex\");\r\n            yield Tokens_1.Tokens.destroy({\r\n                where: {\r\n                    name: \"reset_admin_password\"\r\n                }\r\n            });\r\n            yield Tokens_1.Tokens.create({\r\n                name: \"reset_admin_password\",\r\n                token: token\r\n            });\r\n            const emailSetting = yield Settings_1.Settings.findOne({\r\n                where: {\r\n                    name: 'email'\r\n                }\r\n            });\r\n            const nameSetting = yield Settings_1.Settings.findOne({\r\n                where: {\r\n                    name: 'company_name'\r\n                }\r\n            });\r\n            const subject = \"Reset your admin password\";\r\n            const message = `You have requested to reset your ${constants_1.constants.appname} for ${nameSetting.value} server admin password. \r\nPlease use this code as token in the reset page: ${token}.`;\r\n            const response = yield (0, network_1.sendEmail)(message, emailSetting.value, subject);\r\n            const data = {\r\n                error: response.data.status === \"1\",\r\n                message: response.data.status === \"1\" ? `Email sent to your administrator email. Please \r\n                    check your inbox to retrieve the token` : response.data.data\r\n            };\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.resetAdminPassword = resetAdminPassword;\r\nfunction doResetAdminPassword(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const hash = bcryptjs_1.default.hashSync(_data.password, 10);\r\n            yield Tokens_1.Tokens.destroy({\r\n                where: {\r\n                    name: \"reset_admin_password\"\r\n                }\r\n            });\r\n            yield Settings_1.Settings.update({\r\n                value: hash\r\n            }, {\r\n                where: {\r\n                    name: 'admin_password'\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports.doResetAdminPassword = doResetAdminPassword;\r\n// ////////////////INCOMING PAYMENTS//////////////////////\r\n// exports.save_incoming_payment_function = async (_data) => {\r\n//     try {\r\n//         let helperClass = require('../helpers/incomingPaymentHelper')\r\n//         let h = new helperClass();\r\n//         let data = h.prep_data(_data);\r\n//         data.created_by = _data.user_id;\r\n//         try {\r\n//             let customer_phone = _data.customer_phone;\r\n//             //get the customer who matches the name\r\n//             let cust_details = await customerHelper.getItem(` phone = \"${customer_phone}\" `, customerHelper.table_name);\r\n//             if (cust_details == null) {\r\n//                 //save the person\r\n//                 data.payer =\r\n//                     await customerHelper.insert({\r\n//                         name: `\"${_data.customer_name}\"`,\r\n//                         phone: `\"${_data.customer_phone}\"`\r\n//                     }, customerHelper.table_name)\r\n//             }\r\n//             // sales_data.customer = `\"${_data.customer_name} - ${_data.customer_phone}\"`;\r\n//         } catch (error: any) {\r\n//             log.error(error)\r\n//         }\r\n//         // //console.log(data)\r\n//         await h.insert(data, h.table_name);\r\n//         return { status: '1', data: null }\r\n//     } catch (error: any) {\r\n//         await helper.closeConnection();\r\n//         if (process.env.NODE_ENV != \"production\") console.log(error)\r\n//         log.error(error)\r\n//         throw new Error(error)\r\n//     }\r\n// };\r\n// exports.find_incoming_payments_between_dates_function = async (_data) => {\r\n//     try {\r\n//         let helperClass = require('../helpers/incomingPaymentHelper')\r\n//         let h = new helperClass();\r\n//         let start = _data.start_date == undefined ? h.getToday() : _data.start_date;\r\n//         let end = _data.end_date == undefined ? h.getToday() : _data.end_date;\r\n//         let code = _data.code;\r\n//         let type = _data.type\r\n//         let objects = null;\r\n//         if (code != undefined) {\r\n//             objects = await h.search(code)\r\n//         }\r\n//         else if (type != undefined) {\r\n//             objects = await h.getMany(` date >= '${start}' and date <= '${end}' and type ='${type}'`, h.table_name);\r\n//         }\r\n//         else {\r\n//             objects = await h.getMany(` date >= '${start}' and date <= '${end}' `, h.table_name);\r\n//         }\r\n//         for (var i = 0; i < objects.length; i++) {\r\n//             try {\r\n//                 let customer = await customerHelper.getItem(`id = '${objects[i].payer}'`, customerHelper.table_name);\r\n//                 objects[i].customer_name = customer.name;\r\n//                 objects[i].phone = customer.phone;\r\n//             } catch (error: any) {\r\n//                 log.error(error)\r\n//                 objects[i].customer_name = \"N/A\";\r\n//                 objects[i].phone = \"N/A\";\r\n//             }\r\n//         }\r\n//         return {\r\n//             status: '1',\r\n//             data: objects\r\n//         }\r\n//     } catch (error: any) {\r\n//         await helper.closeConnection();\r\n//         // if(process.env.NODE_ENV != \"production\") console.log(error)\r\n//         log.error(error)\r\n//         throw new Error(error)\r\n//     }\r\n// };\r\n// exports.delete_incoming_payment_function = async (_data) => {\r\n//     let helperClass = require('../helpers/incomingPaymentHelper')\r\n//     let h = new helperClass();\r\n//     try {\r\n//         let codes = _data.id.split(\",\");//comma-separated\r\n//         let code_quotes = []\r\n//         for (var i = 0; i < codes.length; i++) {\r\n//             code_quotes.push(`${codes[i]}`)\r\n//         }\r\n//         await h.delete(` id in (${code_quotes.join(\",\")}) `, h.table_name);\r\n//         await activitiesHelper.log(_data.user_id, `\"deleted credit payment receipt: ${code_quotes.join(\",\")}  \"`, `'Accounts'`)\r\n//         return {\r\n//             status: '1'\r\n//         }\r\n//     } catch (error: any) {\r\n//         await helper.closeConnection();\r\n//         log.error(error)\r\n//         throw new Error(error)\r\n//     }\r\n// };\r\n// exports.get_customer_payments_function = async (_data) => {\r\n//     let helperClass = require('../helpers/incomingPaymentHelper')\r\n//     let h = new helperClass();\r\n//     try {\r\n//         let id = _data.customer;\r\n//         let objects = await h.getMany(` payer = ${id}  `, h.table_name);\r\n//         // objects.map(obj => {\r\n//         //     obj.stock = obj.current_stock\r\n//         // })\r\n//         return { status: '1', data: objects }\r\n//     } catch (error: any) {\r\n//         await helper.closeConnection();\r\n//         log.error(error)\r\n//         throw new Error(error)\r\n//     }\r\n// };\r\n// ///////////////////END INCOMING PAYMENTS///////////////\r\n// exports.reset_user_password = async (_data) => {\r\n//     let Helper = require('../helpers/token');\r\n//     let h = new Helper();\r\n//     try {\r\n//         //if retry, do not regenerate the token.\r\n//         if (_data.retry == \"1\") {\r\n//             message = _data.message;\r\n//             let data = { error: true, retry: true, message: message }\r\n//             //render the page\r\n//             res.render(\"resetPassword\", data)\r\n//             return false;\r\n//         }\r\n//         //check the username  or email\r\n//         let user = _data.user;\r\n//         let AdminHelper = require(\"../helpers/adminHelper\")\r\n//         let adminHelper = new AdminHelper();\r\n//         let user_details = await adminHelper.getItem(`lower(email) = lower('${user}') or lower(username) = lower('${user}')`, adminHelper.table_name);\r\n//         //if found, generate the token and send the mail\r\n//         if (user_details != null) {\r\n//             //create a token and send it to the url\r\n//             const crypto = require(\"crypto\");\r\n//             const token = crypto.randomBytes(5).toString(\"hex\");\r\n//             //insert it into the token table\r\n//             //clear others\r\n//             await h.delete(`name = 'reset_user_password_${user_details.email}'`, h.table_name)\r\n//             await h.insert({ name: `'reset_user_password_${user_details.email}'`, token: `'${token}'` }, h.table_name)\r\n//             const axios = require('axios');\r\n//             let email = user_details.email;\r\n//             message = `You have requested to reset your Druglane password. Please use this code as token in the reset page: ${token}.`;\r\n//             // console.log(message)\r\n//             const FormData = require('form-data');\r\n//             const form = new FormData();\r\n//             form.append('mails', email);\r\n//             form.append('message', message);\r\n//             form.append('subject', \"Reset Druglane Password\");\r\n//             axios.post(constants.server_url + `/api_admin/sendBulkMail`, form, { headers: form.getHeaders() })\r\n//                 .then(function (response) {\r\n//                     // console.log(response.data);\r\n//                     let data = {\r\n//                         error: false, retry: false, message: `Email sent to your email. Please \r\n//             check your inbox to retrieve the token`}\r\n//                     //render the page\r\n//                     return data;\r\n//                 })\r\n//                 .catch(function (error) {\r\n//                     let data = {\r\n//                         error: true, retry: false, message: `Unable to communicate with cloud server. Please \r\n//             check your internet connection and try again`}\r\n//                     return data;\r\n//                 });\r\n//         }\r\n//         else {\r\n//             let data = {\r\n//                 error: true, retry: false, message: `No username or email found. Please check and try \r\n//                 again.`}\r\n//             return data;\r\n//         }\r\n//     } catch (error: any) {\r\n//         // console.log(error);\r\n//         let data = {\r\n//             error: true, retry: false, message: `Server error. Please try again`\r\n//         }\r\n//         return data;\r\n//     }\r\n// };\r\n// exports.do_reset_user_password = async (_data) => {\r\n//     try {\r\n//         let Helper = require('../helpers/token');\r\n//         let h = new Helper();\r\n//         const activityHelper = require('../helpers/activitiesHelper')\r\n//         const ah = new activityHelper();\r\n//         let token = _data.token;\r\n//         let password = _data.password;\r\n//         let email = _data.username;\r\n//         var bcrypt = require('bcryptjs');\r\n//         let AdminHelper = require(\"../helpers/adminHelper\")\r\n//         let adminHelper = new AdminHelper();\r\n//         let user_details = await adminHelper.getItem(`lower(email) = lower('${email}') or lower(username) = lower('${email}')`, adminHelper.table_name);\r\n//         if (user_details == null) {\r\n//             return { status: \"-1\", message: \"Username or email not found\" }\r\n//         }\r\n//         //get the setting admin_password\r\n//         var old_token = await h.getField(\"token\", h.table_name, `name = 'reset_user_password_${user_details.email}'`);\r\n//         // console.log(old_token.token, token)\r\n//         if (token == old_token.token) {\r\n//             var hash = bcrypt.hashSync(password, 10);\r\n//             //set the new password\r\n//             await adminHelper.updateField(\"password_hash\", `'${hash}'`, `id = ${user_details.id}`, adminHelper.table_name)\r\n//             return { status: \"1\", message: \"Password reset successfully\" }\r\n//         } else {\r\n//             // Passwords don't match\r\n//             return { status: \"-1\", message: \"Wrong token entered. Try again\" }\r\n//         }\r\n//     } catch (error: any) {\r\n//         log.error(error)\r\n//         // console.log(error)\r\n//         throw new Error(error)\r\n//     }\r\n// };\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/services/admin.service.ts?");

/***/ }),

/***/ "./src/server/services/customer.service.ts":
/*!*************************************************!*\
  !*** ./src/server/services/customer.service.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports._countRefills = exports._getRefillList = exports._deleteRefill = exports._addMultipleRefill = exports._addRefill = exports._getDiagnosticsList = exports._getCustomerDiagnosticsList = exports._saveDiagnostics = exports._findById = exports._delete = exports._save = exports._getCount = exports._getList = void 0;\r\nconst Activities_1 = __webpack_require__(/*! ../models/Activities */ \"./src/server/models/Activities.ts\");\r\nconst logger_1 = __webpack_require__(/*! ../config/logger */ \"./src/server/config/logger.ts\");\r\nconst sequelize_1 = __webpack_require__(/*! sequelize */ \"sequelize\");\r\nconst Customers_1 = __webpack_require__(/*! ../models/Customers */ \"./src/server/models/Customers.ts\");\r\nconst searchHelper_1 = __webpack_require__(/*! ../helpers/searchHelper */ \"./src/server/helpers/searchHelper.ts\");\r\nconst DiagnosticTests_1 = __webpack_require__(/*! ../models/DiagnosticTests */ \"./src/server/models/DiagnosticTests.ts\");\r\nconst CustomerDiagnostics_1 = __webpack_require__(/*! ../models/CustomerDiagnostics */ \"./src/server/models/CustomerDiagnostics.ts\");\r\nconst Refills_1 = __webpack_require__(/*! ../models/Refills */ \"./src/server/models/Refills.ts\");\r\n/**\r\n * get a list of customers\r\n * @param _data query params\r\n * @returns List of Customer objects\r\n */\r\nfunction _getList(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let limit = _data.limit ? parseInt(_data.limit) : 100;\r\n            let offset = _data.offset ? parseInt(_data.offset) : 0;\r\n            //if user specifies a search query\r\n            let where = {};\r\n            if (_data.param) {\r\n                let searchQuery = JSON.parse(_data.param);\r\n                where = (0, searchHelper_1.parseSearchQuery)(searchQuery);\r\n            }\r\n            let objects = yield Customers_1.Customers.findAll({\r\n                limit,\r\n                offset,\r\n                order: [[\"name\", \"asc\"]],\r\n                where\r\n            });\r\n            //TODO: learn how to calculate fields\r\n            // for (var i = 0; i < objects.length; i++) {\r\n            //     let object = objects[i];\r\n            //     let total_credit = await saleHelper.getTotalCreditSales('', '', object.id);\r\n            //     object.total_credit = total_credit.toLocaleString()\r\n            //     let paid = await incomingHelper.getTotalPaid(object.id);\r\n            //     object.total_paid = paid.toLocaleString();\r\n            //     let balance = total_credit - paid;\r\n            //     object.balance = balance.toLocaleString()\r\n            // }\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._getList = _getList;\r\n;\r\nfunction _getCount(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            //if user specifies a search query\r\n            let where = {};\r\n            if (_data.param) {\r\n                let searchQuery = JSON.parse(_data.param);\r\n                where = (0, searchHelper_1.parseSearchQuery)(searchQuery);\r\n            }\r\n            let count = yield Customers_1.Customers.count({\r\n                where\r\n            });\r\n            return count;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._getCount = _getCount;\r\n;\r\n/**\r\n * get a list of customers based on a search param\r\n * @param _data query params\r\n * @returns list of Customers\r\n */\r\n// export async function _search  (_data: { [key: string]: any}):Promise<Customers[]>  {\r\n//     let searchQuery = JSON.parse(_data.param)\r\n//     try {\r\n//         let where = parseSearchQuery(searchQuery)\r\n//         let limit = _data.limit ? parseInt(_data.limit) : 100;\r\n//         let offset = _data.offset ? parseInt(_data.offset) : 0\r\n//         let objects = await Customers.findAll({\r\n//             limit,\r\n//             offset,\r\n//             order: [[\"name\", \"asc\"]],\r\n//             where\r\n//         })\r\n//         //TODO: calculate the amount paid, etc here\r\n//         return objects\r\n//     } catch (error: any) {\r\n//        logger.error({message: error})\r\n//         throw new Error(error);\r\n//     }\r\n// };\r\n/**\r\n * create or update a customer\r\n * @param _data request body\r\n * @returns new/updated customer\r\n */\r\nfunction _save(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let object = yield Customers_1.Customers.create(_data);\r\n            Activities_1.Activities.create({\r\n                activity: `added/updated customer ${_data.name}`,\r\n                user_id: `${_data.user_id}`,\r\n                module: 'customers'\r\n            });\r\n            return object;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._save = _save;\r\n;\r\nfunction _delete(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let object = yield Customers_1.Customers.findByPk(_data.id);\r\n            yield (object === null || object === void 0 ? void 0 : object.destroy());\r\n            Activities_1.Activities.create({\r\n                activity: `deleted customer ${object === null || object === void 0 ? void 0 : object.name} `,\r\n                user_id: `${_data.user_id}`,\r\n                module: 'customers'\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._delete = _delete;\r\n;\r\nfunction _findById(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let id = _data.id;\r\n            let object = yield Customers_1.Customers.findByPk(id);\r\n            //TODO get the total sales on credit\r\n            //get the total paid\r\n            // let total_credit = await saleHelper.getTotalCreditSales('', '', id);\r\n            // object.total_credit = total_credit.toLocaleString()\r\n            // const IncomingPaymentClass = require('../helpers/incomingPaymentHelper');\r\n            // const incomingHelper = new IncomingPaymentClass();\r\n            // let paid = await incomingHelper.getTotalPaid(id);\r\n            // object.total_paid = paid.toLocaleString();\r\n            // let balance = total_credit - paid;\r\n            // object.balance = balance.toLocaleString()\r\n            if (!object)\r\n                throw new Error(`Customer ${id} not found`);\r\n            return object;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._findById = _findById;\r\n;\r\nfunction _saveDiagnostics(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let object = CustomerDiagnostics_1.CustomerDiagnostics.build(_data);\r\n            yield object.save();\r\n            Activities_1.Activities.create({\r\n                activity: `added diagnostic test ${_data.test} for ${_data.customer_name}`,\r\n                user_id: `${_data.user_id}`,\r\n                module: 'customers'\r\n            });\r\n            return object;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._saveDiagnostics = _saveDiagnostics;\r\n;\r\n// exports._findDiagnosticsById = async (_data) => {\r\n//     try {\r\n//         let id = _data.id;\r\n//         let object = await helper.getItem(`id = '${id}' `, helper.diagnostics_table_name);\r\n//         return {\r\n//             status: '1',\r\n//             data: object\r\n//         }\r\n//     } catch (error: any) {\r\n//         if (constants.isSqliteError(error)) await helper.closeConnection();\r\n//         log.error(error)\r\n//         throw new Error(error);\r\n//     }\r\n// };\r\n// exports._deleteDiagnostics = async (_data) => {\r\n//     try {\r\n//         await helper.getConnection();\r\n//         await helper.connection.exec(\"BEGIN TRANSACTION\");\r\n//         let id = _data.id;\r\n//         await helper.delete(` id in (${id})`, helper.diagnostics_table_name);\r\n//         await activities.log(_data.userid, `'deleted customer diagnostic result'`, \"'Customers'\")\r\n//         await helper.connection.exec(\"COMMIT\");\r\n//         return { status: '1', data: null }\r\n//     } catch (error: any) {\r\n//         await helper.closeConnection();\r\n//         if (constants.isSqliteError(error)) await helper.closeConnection();\r\n//         if (process.env.NODE_ENV != \"production\") console.log(error)\r\n//         log.error(error)\r\n//         throw new Error(error);\r\n//     }\r\n// };\r\nfunction _getCustomerDiagnosticsList(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let limit = _data.limit ? parseInt(_data.limit) : 100;\r\n            let offset = _data.offset ? parseInt(_data.offset) : 0;\r\n            let start = _data.start_date;\r\n            let end = _data.end_date;\r\n            let customer = _data.customer;\r\n            let where = {};\r\n            if (_data.customer) {\r\n                where['customer'] = customer;\r\n            }\r\n            if (start) {\r\n                where['end_date'] = { [sequelize_1.Op.gte]: `${start} 00:00:01` };\r\n            }\r\n            if (end) {\r\n                where['end_date'] = { [sequelize_1.Op.lte]: `${end} 23:59:59` };\r\n            }\r\n            let objects = yield CustomerDiagnostics_1.CustomerDiagnostics.findAll({\r\n                limit,\r\n                offset,\r\n                where\r\n            });\r\n            //TODO include customer in here\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._getCustomerDiagnosticsList = _getCustomerDiagnosticsList;\r\n;\r\nfunction _getDiagnosticsList(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let limit = _data.limit ? parseInt(_data.limit) : 100;\r\n            let offset = _data.offset ? parseInt(_data.offset) : 0;\r\n            let objects = yield DiagnosticTests_1.DiagnosticTests.findAll({\r\n                limit,\r\n                offset\r\n            });\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._getDiagnosticsList = _getDiagnosticsList;\r\n;\r\nfunction _addRefill(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let object = Refills_1.Refills.create(_data);\r\n            Activities_1.Activities.create({\r\n                activity: `added new refill ${_data.product_name} for ${_data.customer_name}`,\r\n                user_id: `${_data.user_id}`,\r\n                module: 'customers'\r\n            });\r\n            return object;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._addRefill = _addRefill;\r\n;\r\nfunction _addMultipleRefill(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let objects = JSON.parse(_data.data);\r\n            yield Refills_1.Refills.bulkCreate(objects);\r\n            // objects.forEach(async (obj) => {\r\n            //     let data = refill_helper.prep_data(obj);\r\n            //     await helper.insert(data, refill_helper.table_name);\r\n            //     await activities.log(_data.userid, `\"added a new customer refill: ${_data.customer_name}\"`, \"'Customers'\")\r\n            // });\r\n            Activities_1.Activities.create({\r\n                activity: `added multiple refills: ${JSON.stringify(objects)}`,\r\n                user_id: `${_data.user_id}`,\r\n                module: 'customers'\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._addMultipleRefill = _addMultipleRefill;\r\n;\r\nfunction _deleteRefill(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let ids = _data.id.split(\",\").map((id) => id.trim());\r\n            let objects = yield Refills_1.Refills.findAll({\r\n                where: {\r\n                    id: { [sequelize_1.Op.in]: ids }\r\n                }\r\n            });\r\n            yield Refills_1.Refills.destroy({\r\n                where: {\r\n                    id: { [sequelize_1.Op.in]: ids }\r\n                }\r\n            });\r\n            Activities_1.Activities.create({\r\n                activity: `deleted multiple refills: ${JSON.stringify(objects)}`,\r\n                user_id: `${_data.user_id}`,\r\n                module: 'customers'\r\n            });\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._deleteRefill = _deleteRefill;\r\n;\r\n/**\r\n * get the list of refills\r\n * @param _data Object of key:value\r\n * @returns list of refills\r\n */\r\nfunction _getRefillList(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let limit = _data.limit ? parseInt(_data.limit) : 100;\r\n            let offset = _data.offset ? parseInt(_data.offset) : 0;\r\n            let start = _data.start_date;\r\n            let end = _data.end_date;\r\n            let customer = _data.customer;\r\n            let where = {};\r\n            if (_data.customer) {\r\n                where['customer'] = customer;\r\n            }\r\n            if (start) {\r\n                where['end_date'] = { [sequelize_1.Op.gte]: start };\r\n            }\r\n            if (end) {\r\n                where['end_date'] = { [sequelize_1.Op.lte]: end };\r\n            }\r\n            if (_data.product_id) {\r\n                where['product_id'] = _data.product_id;\r\n            }\r\n            let objects = yield Refills_1.Refills.findAll({\r\n                limit,\r\n                offset,\r\n                where\r\n            });\r\n            //TODO get the customer name and product names\r\n            return objects;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._getRefillList = _getRefillList;\r\n;\r\nfunction _countRefills(_data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let start = _data.start_date;\r\n            let end = _data.end_date;\r\n            let customer = _data.customer;\r\n            let where = {};\r\n            if (_data.customer) {\r\n                where['customer'] = customer;\r\n            }\r\n            if (start) {\r\n                where['end_date'] = { [sequelize_1.Op.gte]: start };\r\n            }\r\n            if (end) {\r\n                where['end_date'] = { [sequelize_1.Op.lte]: end };\r\n            }\r\n            if (_data.product_id) {\r\n                where['product_id'] = _data.product_id;\r\n            }\r\n            let count = yield Refills_1.Refills.count({\r\n                where\r\n            });\r\n            return count;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.error({ message: error });\r\n            throw new Error(error);\r\n        }\r\n    });\r\n}\r\nexports._countRefills = _countRefills;\r\n;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/services/customer.service.ts?");

/***/ }),

/***/ "./src/server/utils/auth.ts":
/*!**********************************!*\
  !*** ./src/server/utils/auth.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.routePermissions = exports.hasPermission = exports.isUserLoggedIn = exports.isAdminLoggedIn = void 0;\r\nconst Settings_1 = __webpack_require__(/*! ../models/Settings */ \"./src/server/models/Settings.ts\");\r\nconst Users_1 = __webpack_require__(/*! ../models/Users */ \"./src/server/models/Users.ts\");\r\nconst admin_service_1 = __webpack_require__(/*! ../services/admin.service */ \"./src/server/services/admin.service.ts\");\r\nconst stringHelpers_1 = __webpack_require__(/*! ../helpers/stringHelpers */ \"./src/server/helpers/stringHelpers.ts\");\r\nconst UserSessions_1 = __webpack_require__(/*! ../models/UserSessions */ \"./src/server/models/UserSessions.ts\");\r\nfunction isAdminLoggedIn(request, response, next) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        //get the admin_login_token setting from the settings table\r\n        const setting = yield Settings_1.Settings.findOne({\r\n            where: {\r\n                name: 'admin_login_token'\r\n            }\r\n        });\r\n        //if nothing found, not logged in\r\n        if (!setting) {\r\n            response.status(500).json({ message: stringHelpers_1.errorMessages.INCORRECT_SYSTEM_CONFIG });\r\n            return;\r\n        }\r\n        //check if the headers are valid\r\n        const userToken = request.headers['admin_token'];\r\n        if (!userToken) {\r\n            response.status(403).json({ message: stringHelpers_1.errorMessages.INCORRECT_REQUEST_CONFIG });\r\n            return;\r\n        }\r\n        else {\r\n            if (userToken !== (setting === null || setting === void 0 ? void 0 : setting.value)) {\r\n                response.status(403).json({ message: stringHelpers_1.errorMessages.NOT_LOGGED_IN_AS_ADMIN });\r\n                return;\r\n            }\r\n        }\r\n        next();\r\n    });\r\n}\r\nexports.isAdminLoggedIn = isAdminLoggedIn;\r\nfunction isUserLoggedIn(request, response, next) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        //check if the headers are valid\r\n        const userToken = request.headers['token'];\r\n        const userId = request.headers['user_id'];\r\n        if (!userToken || !userId) {\r\n            response.status(403).json({ message: stringHelpers_1.errorMessages.INCORRECT_REQUEST_CONFIG });\r\n        }\r\n        const user = yield Users_1.Users.findOne({\r\n            where: {\r\n                id: userId,\r\n                token: userToken\r\n            }\r\n        });\r\n        if (!user || user.token !== userToken) {\r\n            response.status(403).json({ message: stringHelpers_1.errorMessages.NOT_LOGGED_IN });\r\n        }\r\n        request.user_id = user.id.toString();\r\n        next();\r\n    });\r\n}\r\nexports.isUserLoggedIn = isUserLoggedIn;\r\n/**\r\n * checks if the user has permission to access an endpoint. for admin, no permission check needed\r\n * @param permission the name of the permission\r\n * @returns void\r\n */\r\nfunction hasPermission(request, response, next) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        //check if the headers are valid\r\n        const userToken = request.headers['token'];\r\n        const userId = request.headers['user_id'];\r\n        if (!userToken) {\r\n            response.status(403).json({ message: stringHelpers_1.errorMessages.INCORRECT_REQUEST_CONFIG });\r\n            return;\r\n        }\r\n        const userSession = userId ? yield UserSessions_1.UserSessions.findOne({\r\n            where: {\r\n                user_id: userId,\r\n                token: userToken\r\n            }\r\n        }) : null;\r\n        const user = userId ? yield Users_1.Users.findOne({\r\n            where: {\r\n                id: userId,\r\n                token: userToken\r\n            }\r\n        }) : null;\r\n        const adminSession = yield UserSessions_1.UserSessions.findOne({\r\n            where: {\r\n                user_id: '0',\r\n                token: userToken\r\n            }\r\n        });\r\n        if (userSession) {\r\n            //check the permission, set the request user_id and call next\r\n            const permission = exports.routePermissions[request.path];\r\n            if (permission) {\r\n                const rolePermissions = yield (0, admin_service_1.get_role_permissions_function)({ id: user.role_id.toString() });\r\n                if (!rolePermissions.find(item => item.name === permission)) {\r\n                    response.status(403).json({ message: stringHelpers_1.errorMessages.NO_PERMISSION });\r\n                    return;\r\n                }\r\n            }\r\n            request.user_id = user.id.toString();\r\n            next();\r\n        }\r\n        else if (adminSession) {\r\n            //set the request user_id to \"0\" for admin and call next\r\n            request.user_id = \"0\";\r\n            next();\r\n        }\r\n        else {\r\n            //user is not logged in at all\r\n            response.status(403).json({ message: stringHelpers_1.errorMessages.NOT_LOGGED_IN });\r\n            return;\r\n        }\r\n    });\r\n}\r\nexports.hasPermission = hasPermission;\r\nexports.routePermissions = {};\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/utils/auth.ts?");

/***/ }),

/***/ "./src/server/utils/network.ts":
/*!*************************************!*\
  !*** ./src/server/utils/network.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.sendEmail = exports.deleteData = exports.postData = exports.getData = void 0;\r\nconst logger_1 = __webpack_require__(/*! ../config/logger */ \"./src/server/config/logger.ts\");\r\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\r\nconst constants_1 = __webpack_require__(/*! ../../utils/constants */ \"./src/utils/constants.ts\");\r\n/**\r\n * make a get call to a url with some optional params\r\n * @param url the url to call\r\n * @param params a map of key-value pairs to append as parameters\r\n * @returns the clientrequest object\r\n */\r\nfunction getData(url, params) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            if (params) {\r\n                let urlParams = [];\r\n                params.forEach((value, key) => {\r\n                    urlParams.push(`${key}=${value}`);\r\n                });\r\n                if (url.includes(\"?\")) {\r\n                    url += \"&\" + urlParams.join(\"&\");\r\n                }\r\n                else {\r\n                    url += \"?\" + urlParams.join(\"&\");\r\n                }\r\n            }\r\n            logger_1.logger.info({ message: `call made to ${url} ` });\r\n            const response = yield axios_1.default.get(url);\r\n            logger_1.logger.info({ message: `response received: ${JSON.stringify(response.data)}` });\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.info({ message: `error in receiving : ${error}` });\r\n            throw new Error(`Server error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.getData = getData;\r\nfunction postData(url, data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            logger_1.logger.info({ message: `call made to ${url}. data: ${JSON.stringify(data)}` });\r\n            const response = yield axios_1.default.post(url, data, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            logger_1.logger.info({ message: `response received: ${JSON.stringify(response.data)}` });\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.info({ message: `error in receiving : ${error}` });\r\n            throw new Error(`Server error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.postData = postData;\r\nfunction deleteData(url) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            logger_1.logger.info({ message: `call made to ${url}` });\r\n            const response = yield axios_1.default.delete(url);\r\n            logger_1.logger.info({ message: `response received: ${JSON.stringify(response.data)}` });\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.info({ message: `error in receiving : ${error}` });\r\n            throw new Error(`Server error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.deleteData = deleteData;\r\nfunction sendEmail(message, recipient, subject) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const FormData = __webpack_require__(/*! form-data */ \"form-data\");\r\n            const form = new FormData();\r\n            form.append('mails', recipient);\r\n            form.append('message', message);\r\n            form.append('subject', subject);\r\n            const response = yield axios_1.default.post(constants_1.constants.server_url + `/api_admin/sendBulkMail`, form, { headers: form.getHeaders() });\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            logger_1.logger.info({ message: `error sending email : ${error}` });\r\n            throw new Error(`Server error: ${error}`);\r\n        }\r\n        ;\r\n    });\r\n}\r\nexports.sendEmail = sendEmail;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/utils/network.ts?");

/***/ }),

/***/ "./src/server/utils/strings.ts":
/*!*************************************!*\
  !*** ./src/server/utils/strings.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.STRING_DISCOUNT = exports.STRING_TOTAL_COST = exports.STRING_TOTAL = exports.STRING_NUMBER_OF_ITEMS = exports.STRING_TOTAL_AMOUNT = void 0;\r\nexports.STRING_TOTAL_AMOUNT = \"total_amount\";\r\nexports.STRING_NUMBER_OF_ITEMS = \"num_of_items\";\r\nexports.STRING_TOTAL = \"total\";\r\nexports.STRING_TOTAL_COST = \"total_cost\";\r\nexports.STRING_DISCOUNT = \"discount\";\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/server/utils/strings.ts?");

/***/ }),

/***/ "./src/utils/ServerEvents.ts":
/*!***********************************!*\
  !*** ./src/utils/ServerEvents.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nclass ServerEvents extends events_1.EventEmitter {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\nconst serverEventEmitter = new ServerEvents();\r\nexports[\"default\"] = serverEventEmitter;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/utils/ServerEvents.ts?");

/***/ }),

/***/ "./src/utils/constants.ts":
/*!********************************!*\
  !*** ./src/utils/constants.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.constants = void 0;\r\nconst PORT = process.env.PORT || 5100;\r\n// const appName = \"Shoplane\";\r\n// const appLongName = \"Shoplane POS & Inventory Management System\";\r\n// const databaseName = \"shoplane.db\";\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\r\nconst appName = \"Druglane\";\r\nconst appLongName = \"Druglane Pharmacy Management System\";\r\nconst databaseName = \"druglanev1.db\";\r\nconst appDirectory = \"druglaneServerV1\";\r\nconst settings_location = path_1.default.join(process.env.APPDATA, appDirectory);\r\nexports.constants = {\r\n    appLongName: appLongName,\r\n    appname: appName,\r\n    server_url:  false ?\r\n        0 : \"http://localhost/druglanebackend\",\r\n    settings_location,\r\n    customer_image_url: \"assets/customer_images/\",\r\n    customer_image_thumbnail_url: \"assets/customer_images/thumbnails/\",\r\n    product_image_url: \"assets/product_images/\",\r\n    product_image_thumbnail_url: \"assets/product_images/thumbnails/\",\r\n    port: PORT,\r\n    firebase_user_collection: \"users\",\r\n    firebase_requests_collection: \"requests\",\r\n    firebase_responses_collection: \"responses\",\r\n    settings_path: path_1.default.join(settings_location, 'system-settings.json'),\r\n    db_path: path_1.default.join(settings_location, databaseName),\r\n    backup_folder: path_1.default.join(os_1.default.homedir(), `${appName}Backups`),\r\n    settings_filename: 'system-settings.json',\r\n    db_filename: databaseName,\r\n    internal_backups_path: path_1.default.join(settings_location, 'backups'),\r\n    backup_temp_location: path_1.default.join(settings_location, 'backupRestoreTemp'),\r\n    company_id: '',\r\n    default_functional_groups: [\r\n        \"Adult Analgesics Tablets\",\r\n        \"Adult Analgesics Suppositories\",\r\n        \"Paediatric Analgesics Syrups\",\r\n        \"Paediatric Analgesics Suppositories\",\r\n        \"Adult Dry Cough Syrups\",\r\n        \"Adult Expectorant Syups\",\r\n        \"Adult Cough & Cold Syrups\",\r\n        \"Adult Dry Cough Tablets\",\r\n        \"Adult Expectorant Tablets\",\r\n        \"Adult Cough & Cold Tablets\",\r\n        \"Baby Cough Syrups (0-1 years)\",\r\n        \"Child Cough Syrups (up to 6 years)\",\r\n        \"Child Cough Syrups (up to 12 years)\",\r\n        \"Adult Catarrh Syrups\",\r\n        \"Adult Catarrh Tablets\",\r\n        \"Paediatric Catarrh Syrups\",\r\n        \"Adult Blood Tonics\",\r\n        \"Adult Multivitamins\",\r\n        \"Paediatric Blood Tonics\",\r\n        \"Paediatric Multivitamins\"\r\n    ],\r\n    default_config: {\r\n        port: PORT,\r\n        host: \"localhost\",\r\n        dbversion: 0,\r\n        admin_set: 'no',\r\n        company_set: 'no',\r\n        auto_backup_time: 19,\r\n        last_sync: 0,\r\n        env: \"production\"\r\n    },\r\n    PERMISSION_VIEW_USER_ACTIVITIES: \"View Sales History\",\r\n    PERMISSION_VIEW_PURCHASE_HISTORY: \"View Purchase History\",\r\n    PERMISSION_VIEW_INVENTORY: \"View Inventory\",\r\n    PERMISSION_VIEW_END_OF_DAY_REPORT: \"View End Of Day Report\",\r\n    PERMISSION_VIEW_ACCOUNTS: \"View Accounts\",\r\n    PERMISSION_TRANSFER_ITEMS: \"Transfer Items\",\r\n    PERMISSION_RETURN_SOLD_ITEMS: \"Return Sold Items\",\r\n    PERMISSION_RECEIVE_TRANSFERS: \"Receive Transfers\",\r\n    PERMISSION_RECEIVE_PURCHASES: \"Receive Purchases\",\r\n    PERMISSION_MANAGE_VENDORS: \"Manage Vendors\",\r\n    PERMISSION_MANAGE_STAFF: \"Manage Staff\",\r\n    PERMISSION_MANAGE_SETTINGS: \"Manage Settings\",\r\n    PERMISSION_MANAGE_INVENTORY: \"Manage Inventory\",\r\n    PERMISSION_MANAGE_CUSTOMERS: \"Manage Customers\",\r\n    PERMISSION_MANAGE_ACCOUNTS: \"Manage Accounts\",\r\n    PERMISSION_GIVE_DISCOUNT: \"Give Discount\",\r\n    PERMISSION_EDIT_SALES: \"Edit Sales\",\r\n    PERMISSION_DELETE_TRANSFERS: \"Delete Transfers\",\r\n    PERMISSION_DELETE_SALES_RECORDS: \"Sales Records\",\r\n    PERMISSION_DELETE_PURCHASES: \"Delete Purchases\",\r\n    PERMISSION_CREATE_SALES: \"Create Sales\",\r\n    PERMISSION_ADJUST_STOCK: \"Adjust Stock\",\r\n    PERMISSION_VIEW_TRANSFER_HISTORY: \"View Transfer History\",\r\n    PERMISSION_VIEW_SALES_REPORTS: \"View Sales Reports\",\r\n    PERMISSION_VIEW_SALES_HISTORY: \"View Sales History\",\r\n    STRING_DB_VERSION: \"dbversion\",\r\n};\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/utils/constants.ts?");

/***/ }),

/***/ "./src/utils/dateHelper.ts":
/*!*********************************!*\
  !*** ./src/utils/dateHelper.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.setDates = exports.getWeekNumber = exports.addTimePeriod = exports.subtractTimePeriod = exports.formatDate = exports.timeBetweenDates = exports.compareDates = exports.getThisYear = exports.getLastDayOfMonth = exports.getAge = exports.getMonthsNoPad = exports.getMonthsObjects = exports.getDatesBetween = exports.nth = exports.getDays = exports.getMonths = exports.getDayName = exports.getMonthName = exports.padZero = exports.getToday = exports.formatDateTime = exports.addDaystoDate = exports.getFirstDayOfWeek = void 0;\r\n/**\r\n * get the date of the first sunday of the week\r\n * @param {number} weekNum the week number in the year\r\n * @param {number} year the current year\r\n * @returns  {Date} the date of the first day of the week\r\n */\r\nfunction getFirstDayOfWeek(weekNum, year) {\r\n    let firstDay = new Date(year, 0, (1 + (weekNum - 1) * 7));\r\n    while (firstDay.getDay() !== 0) {\r\n        firstDay.setDate(firstDay.getDate() - 1);\r\n    }\r\n    return firstDay;\r\n}\r\nexports.getFirstDayOfWeek = getFirstDayOfWeek;\r\n/**\r\n * add a number of days to a given date and return the\r\n * new date\r\n */\r\nfunction addDaystoDate(days, date) {\r\n    let dat = new Date(date);\r\n    dat.setDate(dat.getDate() + days);\r\n    return dat;\r\n}\r\nexports.addDaystoDate = addDaystoDate;\r\n/**\r\n * format the datetime and return the string without the T\r\n * e.g. 2022-11-15T04:05:00 -> 2022-11-15 04:05:00\r\n * @param {string} date the date\r\n * @returns {string}\r\n */\r\nfunction formatDateTime(date) {\r\n    return (new Date(date)).toISOString().slice(0, 19).replace(\"T\", \" \");\r\n}\r\nexports.formatDateTime = formatDateTime;\r\n/**\r\n * format a date and return the string representation. timestamp = yyyy-mm-dd hh-ii-ss\r\n * timestamp_string = yyyymmddhhiiss\r\n * month = mm\r\n * default = yyyy-mm-dd\r\n * @param type string a format type. options are timestamp, timestamp_string, month, or empty string ''\r\n * @param date\r\n * @returns {string}\r\n */\r\nfunction getToday(type = '', date = null) {\r\n    let today = new Date();\r\n    if (date != null) {\r\n        today = new Date(date);\r\n    }\r\n    let dd = today.getDate();\r\n    let mm = today.getMonth() + 1; //January is 0!\r\n    let yyyy = today.getFullYear();\r\n    let dd_string;\r\n    if (dd < 10) {\r\n        dd_string = '0' + dd;\r\n    }\r\n    else {\r\n        dd_string = dd.toString();\r\n    }\r\n    let mm_string;\r\n    if (mm < 10) {\r\n        mm_string = '0' + mm;\r\n    }\r\n    else {\r\n        mm_string = mm.toString();\r\n    }\r\n    let hrs = \"\", mins = \"\", secs = \"\";\r\n    switch (type) {\r\n        case \"timestamp\":\r\n            hrs = padZero(today.getHours());\r\n            mins = padZero(today.getMinutes());\r\n            secs = padZero(today.getSeconds());\r\n            return yyyy + '-' + mm_string + '-' + dd_string + ' ' + hrs + ':' + mins + ':' + secs;\r\n        case \"timestamp_string\":\r\n            hrs = padZero(today.getHours());\r\n            mins = padZero(today.getMinutes());\r\n            secs = padZero(today.getSeconds());\r\n            return yyyy + '' + mm_string + '' + dd_string + '' + hrs + '' + mins + '' + secs;\r\n        case \"month\":\r\n            return mm_string;\r\n        default:\r\n            return yyyy + '-' + mm_string + '-' + dd_string;\r\n    }\r\n    // mm_string+'/'+dd_string+'/'+yyyy;\r\n}\r\nexports.getToday = getToday;\r\n/**\r\n * add a zero to a month number up to 2 digits\r\n * @param m string the month number as a string or int\r\n * @returns string\r\n */\r\nfunction padZero(m) {\r\n    let str = m.toString();\r\n    return str.padStart(2, \"0\");\r\n}\r\nexports.padZero = padZero;\r\n/**\r\n * get the name of the month using the number\r\n * @param m the month number. January is 1, december is 12\r\n * @returns\r\n */\r\nfunction getMonthName(m) {\r\n    try {\r\n        let monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n        ];\r\n        if (monthNames[m - 1] == undefined) {\r\n            throw new Error(\"Number not found\");\r\n        }\r\n        return monthNames[m - 1];\r\n    }\r\n    catch (error) {\r\n        throw new Error(\"Number not found\");\r\n    }\r\n}\r\nexports.getMonthName = getMonthName;\r\n/**\r\n * get the name of a day using the number\r\n * @param {number} d the day number. sunday is 0... saturday is 6\r\n * @returns {string}\r\n */\r\nfunction getDayName(d) {\r\n    try {\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        if (days[d] == undefined) {\r\n            throw new Error(\"Number not found\");\r\n        }\r\n        return days[d];\r\n    }\r\n    catch (error) {\r\n        throw new Error(\"Number not found\");\r\n    }\r\n}\r\nexports.getDayName = getDayName;\r\n/**\r\n * get the list of month names\r\n * @returns {string[]}\r\n */\r\nfunction getMonths() {\r\n    return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n}\r\nexports.getMonths = getMonths;\r\n/**\r\n * get the list of days starting from sunday\r\n * @returns {string[]} the list of day names starting from Sunday\r\n */\r\nfunction getDays() {\r\n    return [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n}\r\nexports.getDays = getDays;\r\n/**\r\n * get the ordinal of a number. e.g. 1st, 2nd, 3rd, 4th\r\n * @param {number} d the day number\r\n * @returns {string}\r\n */\r\nfunction nth(d) {\r\n    if (d > 3 && d < 21)\r\n        return 'th';\r\n    switch (d % 10) {\r\n        case 1: return \"st\";\r\n        case 2: return \"nd\";\r\n        case 3: return \"rd\";\r\n        default: return \"th\";\r\n    }\r\n}\r\nexports.nth = nth;\r\n;\r\n/**\r\n * get the list of days between 2 specified dates\r\n * @param {string|Date} startDate the start date - string or date\r\n * @param {string | Date} stopDate the end date - string or date\r\n * @returns {string[]}\r\n */\r\nfunction getDatesBetween(startDate, stopDate) {\r\n    let dateArray = [];\r\n    let currentDate = typeof (startDate) == 'string' ? new Date(startDate) : startDate;\r\n    let endDate = typeof (stopDate) == 'string' ? new Date(stopDate) : stopDate;\r\n    while (currentDate <= endDate) {\r\n        dateArray.push(getToday('', currentDate));\r\n        currentDate = new Date(currentDate.getDate() + 1);\r\n    }\r\n    return dateArray;\r\n}\r\nexports.getDatesBetween = getDatesBetween;\r\n/**\r\n * return the list of months from January to December as objects with id, name\r\n * @returns {Month[]}\r\n */\r\nfunction getMonthsObjects() {\r\n    let months = [];\r\n    months.push({ id: \"01\", name: 'January' });\r\n    months.push({ id: \"02\", name: 'February' });\r\n    months.push({ id: \"03\", name: 'March' });\r\n    months.push({ id: \"04\", name: 'April' });\r\n    months.push({ id: \"05\", name: 'May' });\r\n    months.push({ id: \"06\", name: 'June' });\r\n    months.push({ id: \"07\", name: 'July' });\r\n    months.push({ id: \"08\", name: 'August' });\r\n    months.push({ id: \"09\", name: 'September' });\r\n    months.push({ id: \"10\", name: 'October' });\r\n    months.push({ id: \"11\", name: 'November' });\r\n    months.push({ id: \"12\", name: 'December' });\r\n    return months;\r\n}\r\nexports.getMonthsObjects = getMonthsObjects;\r\n//remove the 0's from the month ids\r\n/**\r\n * get the list of month objects but with no zero padding for the id\r\n * @returns {Month[]}\r\n */\r\nfunction getMonthsNoPad() {\r\n    let months = [];\r\n    months.push({ id: \"1\", name: 'January' });\r\n    months.push({ id: \"2\", name: 'February' });\r\n    months.push({ id: \"3\", name: 'March' });\r\n    months.push({ id: \"4\", name: 'April' });\r\n    months.push({ id: \"5\", name: 'May' });\r\n    months.push({ id: \"6\", name: 'June' });\r\n    months.push({ id: \"7\", name: 'July' });\r\n    months.push({ id: \"8\", name: 'August' });\r\n    months.push({ id: \"9\", name: 'September' });\r\n    months.push({ id: \"10\", name: 'October' });\r\n    months.push({ id: \"11\", name: 'November' });\r\n    months.push({ id: \"12\", name: 'December' });\r\n    return months;\r\n}\r\nexports.getMonthsNoPad = getMonthsNoPad;\r\n/**\r\n * get the number of years past from the given date\r\n * @param dateString the date of birth\r\n * @returns {number} the number of years up to today\r\n */\r\nfunction getAge(dateString) {\r\n    let today = new Date();\r\n    let birthDate = new Date(dateString);\r\n    let age = today.getFullYear() - birthDate.getFullYear();\r\n    let m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n        age--;\r\n    }\r\n    return age;\r\n}\r\nexports.getAge = getAge;\r\n/**\r\n * get the day component of the ending date of the month\r\n* @param monthNumber January = 1, December  = 12\r\n * @returns {Number}\r\n */\r\nfunction getLastDayOfMonth(monthNumber) {\r\n    let month = typeof (monthNumber) == 'string' ? parseInt(monthNumber) : monthNumber;\r\n    let thirty_days = [9, 4, 6, 11];\r\n    if (month == 2) {\r\n        return 28;\r\n    }\r\n    else if (thirty_days.indexOf(month) != -1) {\r\n        return 30;\r\n    }\r\n    else {\r\n        return 31;\r\n    }\r\n}\r\nexports.getLastDayOfMonth = getLastDayOfMonth;\r\n/**\r\n * get the current year\r\n * @returns {number}\r\n */\r\nfunction getThisYear() {\r\n    return new Date().getFullYear();\r\n}\r\nexports.getThisYear = getThisYear;\r\n/**\r\n * check if date1 is before, after or same as date2. date2 defaults to current day\r\n * @param date1 the first date\r\n * @param date2 the second date\r\n * @returns {string} 'before'|'after'|'same'\r\n */\r\nfunction compareDates(date1, date2) {\r\n    let d1 = new Date(date1);\r\n    let d2 = date2 == undefined ? new Date() : new Date(date2);\r\n    if (d1 < d2) {\r\n        return 'before';\r\n    }\r\n    else if (d1 > d2) {\r\n        return 'after';\r\n    }\r\n    else {\r\n        return 'same';\r\n    }\r\n}\r\nexports.compareDates = compareDates;\r\n/**\r\n * get the number of days, seconds, minutes between 2 dates\r\n * @param {string} date1 the date we're interested in\r\n * @param {string} date2 defaults to the current day\r\n * @param {string} format defaults to seconds. could be days, minutes, seconds\r\n * @returns {number} the number of {format}s between the dats\r\n */\r\nfunction timeBetweenDates(date1, date2 = '', format = 'seconds') {\r\n    let d1 = new Date(date1);\r\n    let d2 = new Date();\r\n    if (date2 != '') {\r\n        d2 = new Date(date2);\r\n    }\r\n    switch (format) {\r\n        case 'days':\r\n            return (d1.getTime() - d2.getTime() / (1000 * 60 * 60 * 24));\r\n        case 'minutes':\r\n            return (d1.getTime() - d2.getTime() / (1000 * 60 * 60));\r\n        case 'seconds':\r\n        default:\r\n            return (d1.getTime() - d2.getTime()) / 1000;\r\n    }\r\n}\r\nexports.timeBetweenDates = timeBetweenDates;\r\n/**\r\n * format a date\r\n * @param today the date\r\n * @param type one of 'timestamp' | 'timestamp_string' | 'month' | ''\r\n * @returns {string}\r\n */\r\nfunction formatDate(today, type = '') {\r\n    return getToday(type, today);\r\n}\r\nexports.formatDate = formatDate;\r\n/**\r\n * subtract a period from a date and return the new date\r\n * @param date a date to subtract from\r\n * @param period years,months, days,hours,minutes,seconds\r\n * @param duration the number of period to subtract\r\n * @returns {Date}\r\n */\r\nfunction subtractTimePeriod(date, period, duration) {\r\n    date = typeof (date) == 'string' ? new Date(date) : date;\r\n    switch (period) {\r\n        case \"years\":\r\n            return new Date(date.setFullYear(date.getFullYear() - duration));\r\n        case \"months\":\r\n            return new Date(date.setMonth(date.getMonth() - duration));\r\n        case \"hours\":\r\n            return new Date(date.setHours(date.getHours() - duration));\r\n        case \"minutes\":\r\n            return new Date(date.setMinutes(date.getMinutes() - duration));\r\n        case \"seconds\":\r\n            return new Date(date.setSeconds(date.getSeconds() - duration));\r\n        case \"days\":\r\n        default:\r\n            return new Date(date.setDate(date.getDate() - duration));\r\n    }\r\n}\r\nexports.subtractTimePeriod = subtractTimePeriod;\r\n/**\r\n * subtract a period from a date and return the new date\r\n * @param date a date to add to\r\n * @param period years,months, days,hours,minutes,seconds\r\n * @param duration the number of period to subtract\r\n * @returns {Date}\r\n */\r\nfunction addTimePeriod(date, period, duration) {\r\n    date = typeof (date) == 'string' ? new Date(date) : date;\r\n    switch (period) {\r\n        case \"years\":\r\n            return new Date(date.setFullYear(date.getFullYear() - duration));\r\n        case \"months\":\r\n            return new Date(date.setMonth(date.getMonth() - duration));\r\n        case \"hours\":\r\n            return new Date(date.setHours(date.getHours() - duration));\r\n        case \"minutes\":\r\n            return new Date(date.setMinutes(date.getMinutes() - duration));\r\n        case \"seconds\":\r\n            return new Date(date.setSeconds(date.getSeconds() - duration));\r\n        case \"days\":\r\n        default:\r\n            return new Date(date.setDate(date.getDate() - duration));\r\n    }\r\n}\r\nexports.addTimePeriod = addTimePeriod;\r\n/**\r\n * get the week number of the current date or provided date\r\n * @param _date optional\r\n */\r\nfunction getWeekNumber(_date) {\r\n    const currentDate = !_date ? new Date() : new Date(_date);\r\n    Date.now();\r\n    const oneJan = new Date(currentDate.getFullYear(), 0, 1); //1st jan for the year\r\n    let numberOfDays = Math.floor((currentDate.getTime() - oneJan.getTime()) / (24 * 60 * 60 * 1000));\r\n    return Math.ceil(numberOfDays / 7);\r\n}\r\nexports.getWeekNumber = getWeekNumber;\r\n/**\r\n *   get the start and end dates\r\n * @param {String} quick_option\r\n * @returns {Object} {start_date, end_date}\r\n */\r\nfunction setDates(quick_option) {\r\n    const today = new Date();\r\n    let this_week_number = getWeekNumber(today);\r\n    let this_year = getThisYear();\r\n    let last_year = this_year - 1;\r\n    let this_month = today.getMonth(); //0-11\r\n    let last_month = this_month == 0 ? 12 : this_month - 1;\r\n    let next_month = this_month == 11 ? 1 : this_month + 1;\r\n    let start_date;\r\n    let end_date;\r\n    switch (quick_option) {\r\n        case \"all\":\r\n            start_date = formatDate(new Date(2015, 0, 1));\r\n            end_date = getToday();\r\n            break;\r\n        case \"today\":\r\n            start_date = getToday();\r\n            end_date = getToday();\r\n            break;\r\n        case \"yesterday\":\r\n            start_date = formatDate(addDaystoDate(-1, getToday()));\r\n            end_date = formatDate(addDaystoDate(-1, getToday()));\r\n            break;\r\n        case \"this_week\":\r\n            start_date = formatDate(getFirstDayOfWeek(this_week_number, this_year));\r\n            end_date = formatDate(addDaystoDate(6, start_date));\r\n            break;\r\n        case \"last_week\":\r\n            //because this can go into the previous year, we still get that for this week and add some days to it\r\n            start_date = formatDate(addDaystoDate(-6, formatDate(getFirstDayOfWeek(this_week_number, this_year))));\r\n            end_date = formatDate(addDaystoDate(6, start_date));\r\n            break;\r\n        case \"next_week\":\r\n            start_date = formatDate(addDaystoDate(6, formatDate(getFirstDayOfWeek(this_week_number, this_year))));\r\n            end_date = formatDate(addDaystoDate(6, start_date));\r\n            break;\r\n        case \"this_month\":\r\n            start_date = formatDate(new Date(this_year, this_month, 1));\r\n            end_date = formatDate(new Date(this_year, this_month, getLastDayOfMonth(this_month)));\r\n            break;\r\n        case \"last_month\":\r\n            start_date = formatDate(new Date(new Date(this_year, this_month, 1).setMonth(this_month - 1)));\r\n            end_date = formatDate(new Date(new Date(this_year, this_month, getLastDayOfMonth(last_month)).setMonth(this_month - 1)));\r\n            break;\r\n        case \"next_month\":\r\n            start_date = formatDate(new Date(new Date(this_year, this_month, 1).setMonth(this_month + 1)));\r\n            end_date = formatDate(new Date(new Date(this_year, this_month, getLastDayOfMonth(next_month)).setMonth(this_month + 1)));\r\n            break;\r\n        case \"first_quarter\":\r\n            start_date = formatDate(new Date(this_year, 0, 1));\r\n            end_date = formatDate(new Date(this_year, 2, 31));\r\n            break;\r\n        case \"second_quarter\":\r\n            start_date = formatDate(new Date(this_year, 3, 1));\r\n            end_date = formatDate(new Date(this_year, 5, 30));\r\n            break;\r\n        case \"third_quarter\":\r\n            start_date = formatDate(new Date(this_year, 6, 1));\r\n            end_date = formatDate(new Date(this_year, 8, 30));\r\n            break;\r\n        case \"last_quarter\":\r\n            start_date = formatDate(new Date(this_year, 9, 1));\r\n            end_date = formatDate(new Date(this_year, 11, 31));\r\n            break;\r\n        case \"this_year\":\r\n            start_date = formatDate(new Date(this_year, 0, 1));\r\n            end_date = formatDate(new Date(this_year, 11, 31));\r\n            break;\r\n        case \"last_year\":\r\n            start_date = formatDate(new Date(last_year, 0, 1));\r\n            end_date = formatDate(new Date(last_year, 11, 31));\r\n            break;\r\n        case \"today\":\r\n        default:\r\n            start_date = getToday();\r\n            end_date = getToday();\r\n            break;\r\n    }\r\n    return { \"startDate\": start_date, \"endDate\": end_date };\r\n}\r\nexports.setDates = setDates;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/utils/dateHelper.ts?");

/***/ }),

/***/ "./src/utils/directorySetup.ts":
/*!*************************************!*\
  !*** ./src/utils/directorySetup.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.runFolderCreation = void 0;\r\nconst constants_1 = __webpack_require__(/*! @/utils/constants */ \"./src/utils/constants.ts\");\r\nconst logger_1 = __webpack_require__(/*! @/app/config/logger */ \"./src/app/config/logger.ts\");\r\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\r\nconst folders = [constants_1.constants.backup_folder,\r\n    constants_1.constants.internal_backups_path,\r\n    constants_1.constants.backup_temp_location];\r\nconst runFolderCreation = () => folders.forEach(folder => {\r\n    //create folder for backups \r\n    if (!fs.existsSync(folder))\r\n        fs.mkdir(folder, function (err) {\r\n            if (err) {\r\n                console.log('folder not created', err);\r\n                logger_1.logger.error({ message: err });\r\n            }\r\n            else {\r\n                // console.log('folder created')\r\n            }\r\n        });\r\n});\r\nexports.runFolderCreation = runFolderCreation;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/utils/directorySetup.ts?");

/***/ }),

/***/ "./src/utils/network.ts":
/*!******************************!*\
  !*** ./src/utils/network.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getAuthHeaders = exports.sendEmail = exports.deleteData = exports.postData = exports.getData = void 0;\r\nconst logger_1 = __webpack_require__(/*! @/app/config/logger */ \"./src/app/config/logger.ts\");\r\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\r\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/utils/constants.ts\");\r\n/**\r\n * make a get call to a url with some optional params\r\n * @param url the url to call\r\n * @param params a map of key-value pairs to append as parameters\r\n * @returns the clientrequest object\r\n */\r\n// export function getData(url:string, params?:Map<string, any>):ClientRequest {\r\n//     if(!net.isOnline) throw new Error(\"Offline\");\r\n//     try {\r\n//         if (params) {\r\n//             let urlParams: string[] = [];\r\n//             params.forEach((value, key) => {\r\n//                 urlParams.push(`${key}=${value}`)\r\n//             });\r\n//             url += \"?\" + urlParams.join(\"&\")\r\n//         }\r\n//         const request = net.request(url);\r\n//         request.on(\"error\", (error) => {\r\n//             console.log(error)\r\n//             logger.error(error)\r\n//             throw new Error(\"Network Error\");\r\n//         })\r\n//         return request;\r\n//     } catch (error) {\r\n//         console.log(error)\r\n//         logger.error({ message: error });\r\n//         throw new Error(\"Network Error\");\r\n//     }\r\n// }\r\nfunction getData(data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            console.log('token', data.token);\r\n            if (data.params) {\r\n                let urlParams = [];\r\n                data.params.forEach((value, key) => {\r\n                    urlParams.push(`${key}=${value}`);\r\n                });\r\n                if (data.url.includes(\"?\")) {\r\n                    data.url += \"&\" + urlParams.join(\"&\");\r\n                }\r\n                else {\r\n                    data.url += \"?\" + urlParams.join(\"&\");\r\n                }\r\n            }\r\n            logger_1.logger.info({ message: `call made to ${data.url} ` });\r\n            const response = yield axios_1.default.get(data.url, {\r\n                headers: getAuthHeaders(data.token)\r\n            });\r\n            logger_1.logger.info({ message: `response received: ${JSON.stringify(response.data)}` });\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.info({ message: `error in receiving : ${error}` });\r\n            throw new Error(`Server error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.getData = getData;\r\nfunction postData(data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            logger_1.logger.info({ message: `call made to ${data.url}. data: ${JSON.stringify(data.formData)}` });\r\n            const response = yield axios_1.default.post(data.url, data.formData, {\r\n                headers: getAuthHeaders(data.token)\r\n            });\r\n            logger_1.logger.info({ message: `response received: ${JSON.stringify(response.data)}` });\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.info({ message: `error in receiving : ${error}` });\r\n            throw new Error(`Server error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.postData = postData;\r\nfunction deleteData(data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            logger_1.logger.info({ message: `call made to ${data.url}` });\r\n            const response = yield axios_1.default.delete(data.url, {\r\n                headers: getAuthHeaders(data.token)\r\n            });\r\n            logger_1.logger.info({ message: `response received: ${JSON.stringify(response.data)}` });\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.info({ message: `error in receiving : ${error}` });\r\n            throw new Error(`Server error: ${error}`);\r\n        }\r\n    });\r\n}\r\nexports.deleteData = deleteData;\r\nfunction sendEmail(message, recipient, subject) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const FormData = __webpack_require__(/*! form-data */ \"form-data\");\r\n            const form = new FormData();\r\n            form.append('mails', recipient);\r\n            form.append('message', message);\r\n            form.append('subject', subject);\r\n            const response = yield axios_1.default.post(constants_1.constants.server_url + `/api_admin/sendBulkMail`, form, { headers: form.getHeaders() });\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            logger_1.logger.info({ message: `error sending email : ${error}` });\r\n            throw new Error(`Server error: ${error}`);\r\n        }\r\n        ;\r\n    });\r\n}\r\nexports.sendEmail = sendEmail;\r\nfunction getAuthHeaders(token) {\r\n    const header = {\r\n        'token': token,\r\n        'Content-Type': 'application/json'\r\n    };\r\n    return header;\r\n}\r\nexports.getAuthHeaders = getAuthHeaders;\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/utils/network.ts?");

/***/ }),

/***/ "./src/utils/stringKeys.ts":
/*!*********************************!*\
  !*** ./src/utils/stringKeys.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ERROR_UPDATING_DATABASE = exports.COMPLTED_DATABASE_UPDATE = exports.UPDATING_DATABASE = exports.DATABASE_UPDATED = exports.SERVER_DATABASE_UPDATE = exports.DATABASE_SETUP_EVENT = exports.CREATE_BACKUP = exports.ADMIN_PASSWORD_SET = exports.SET_ADMIN_PASSWORD = exports.BACKUP_TIME = exports.PORT = exports.RESTART_APPLICATION = exports.CALL_ACTIVATION = exports.ACTIVATION_RESULT = exports.RESTART_SERVER = exports.SERVER_ERROR = exports.APP_NOT_ACTIVATED = exports.SERVER_STARTING = exports.SERVER_STOPPED = exports.SERVER_RUNNING = exports.SERVER_DISCONNECTED = exports.PREFERENCE_SET = exports.SET_PREFERENCE = exports.PREFERENCE_RECEIVED = exports.GET_PREFERENCES = exports.GET_PREFERENCE = exports.SERVER_URL_RECEIVED = exports.GET_SERVER_URL = exports.SERVER_URL_UPDATED = exports.COMPANY_NAME_RECEIVED = exports.GET_COMPANY_NAME = exports.GET_APP_DETAILS = exports.GET_SERVER_STATE = exports.SERVER_MESSAGE_RECEIVED = exports.SERVER_STATE_CHANGED = void 0;\r\nexports.SERVER_STATE_CHANGED = \"server_state_changed\";\r\nexports.SERVER_MESSAGE_RECEIVED = \"server_message_received\";\r\nexports.GET_SERVER_STATE = \"getServerState\";\r\nexports.GET_APP_DETAILS = \"getAppDetails\";\r\nexports.GET_COMPANY_NAME = \"getCompanyName\";\r\nexports.COMPANY_NAME_RECEIVED = \"companyNameReceived\";\r\nexports.SERVER_URL_UPDATED = \"server_url_updated\";\r\nexports.GET_SERVER_URL = \"get_server_url\";\r\nexports.SERVER_URL_RECEIVED = \"server_url_received\";\r\nexports.GET_PREFERENCE = \"getPreference\";\r\nexports.GET_PREFERENCES = \"getPreferences\";\r\nexports.PREFERENCE_RECEIVED = \"preferenceReceived\";\r\nexports.SET_PREFERENCE = \"setPreference\";\r\nexports.PREFERENCE_SET = \"referenceSet\";\r\nexports.SERVER_DISCONNECTED = \"Server Disconnected\";\r\nexports.SERVER_RUNNING = \"Server Running\";\r\nexports.SERVER_STOPPED = \"Server Stopped\";\r\nexports.SERVER_STARTING = \"Server Starting\";\r\nexports.APP_NOT_ACTIVATED = \"App not activated\";\r\nexports.SERVER_ERROR = \"Server Error\";\r\nexports.RESTART_SERVER = \"restart_server\";\r\nexports.ACTIVATION_RESULT = \"activation_result\";\r\nexports.CALL_ACTIVATION = \"call_validation\";\r\nexports.RESTART_APPLICATION = \"restart_application\";\r\nexports.PORT = \"Port\";\r\nexports.BACKUP_TIME = \"Backup Time\";\r\nexports.SET_ADMIN_PASSWORD = \"set_admin_password\";\r\nexports.ADMIN_PASSWORD_SET = \"admin_password_set\";\r\nexports.CREATE_BACKUP = \"create_backup\";\r\nexports.DATABASE_SETUP_EVENT = \"database_setup_event\";\r\nexports.SERVER_DATABASE_UPDATE = \"server_database_update\";\r\nexports.DATABASE_UPDATED = \"database_updated\";\r\nexports.UPDATING_DATABASE = \"Updating Database\";\r\nexports.COMPLTED_DATABASE_UPDATE = \"Completed Database Update\";\r\nexports.ERROR_UPDATING_DATABASE = \"Error Updating Database\";\r\n\n\n//# sourceURL=webpack://druglaneserver/./src/utils/stringKeys.ts?");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("body-parser");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("cors");

/***/ }),

/***/ "dayjs":
/*!************************!*\
  !*** external "dayjs" ***!
  \************************/
/***/ ((module) => {

module.exports = require("dayjs");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "electron":
/*!***************************!*\
  !*** external "electron" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("electron");

/***/ }),

/***/ "electron-context-menu":
/*!****************************************!*\
  !*** external "electron-context-menu" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("electron-context-menu");

/***/ }),

/***/ "electron-store":
/*!*********************************!*\
  !*** external "electron-store" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("electron-store");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("express");

/***/ }),

/***/ "form-data":
/*!****************************!*\
  !*** external "form-data" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("form-data");

/***/ }),

/***/ "ip":
/*!*********************!*\
  !*** external "ip" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("ip");

/***/ }),

/***/ "sequelize":
/*!****************************!*\
  !*** external "sequelize" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("sequelize");

/***/ }),

/***/ "sequelize-typescript":
/*!***************************************!*\
  !*** external "sequelize-typescript" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("sequelize-typescript");

/***/ }),

/***/ "ts-node/register":
/*!***********************************!*\
  !*** external "ts-node/register" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("ts-node/register");

/***/ }),

/***/ "umzug":
/*!************************!*\
  !*** external "umzug" ***!
  \************************/
/***/ ((module) => {

module.exports = require("umzug");

/***/ }),

/***/ "winston":
/*!**************************!*\
  !*** external "winston" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("winston");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;